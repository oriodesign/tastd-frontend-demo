'use strict';

(function (window, Q, APP_NAME, angular) {

    window.AppHelper = {
        APP_NAME: APP_NAME,
        _beforeAngularPromises: [],
        beforeAngular: function (fn) {
            var self = this;
            self._beforeAngularPromises.push(fn);
            return self;
        },
        readyForAngular: function (fn) {
            var self = this;

            if(self._beforeAngularPromises.length === 0) {
                fn(self.APP_NAME);
                return Q.resolve(self);
            }

            var promises = [];
            for(var i = 0; i < self._beforeAngularPromises.length; i++) {
                promises.push( self._beforeAngularPromises[i]() );
            }

            return Q.all(promises).then(function () {
                fn(self.APP_NAME);
            }).catch(function () {
                if(window.console) { window.console.error(arguments); }
                return {};
            });

        },
        isWebApp : function () {
            return !window.cordova;
        }
    };

    angular
        .module('appHelper', [])
        .constant('AppHelper', window.AppHelper);

})(window, window.Q, window.PARAMETERS.APP.NAME, window.angular);

'use strict';

// Tastd App
angular
    .module(AppHelper.APP_NAME, [
        // app wide third-party modules
        'ngCordova',
        'ionic',
        'ui.gravatar',
        'ui.validate',
        'rzModule',
        'angularMoment',
        'services.storage',
        'angular.filter',
        'pascalprecht.translate',
        'ngIOS9UIWebViewPatch',

        // app wide shared modules
        'appHelper',

        // Directives
        'directives.cuisine',
        'directives.flashMessage',
        'directives.focus',
        'directives.history',
        'directives.loader',
        'directives.map',
        'directives.notification',
        'directives.photo',
        'directives.quickadd',
        'directives.restaurant',
        'directives.review',
        'directives.security',
        'directives.tag',
        'directives.user',
        'directives.wall',

        // Entities
        'entities.address',
        'entities.cuisine',
        'entities.device',
        'entities.expertise',
        'entities.flag',
        'entities.friend',
        'entities.follower',
        'entities.geoname',
        'entities.invite',
        'entities.leader',
        'entities.message',
        'entities.option',
        'entities.place',
        'entities.photo',
        'entities.pushMessage',
        'entities.restaurant',
        'entities.restmod',
        'entities.review',
        'entities.tag',
        'entities.user',
        'entities.wishlist',

        // Filters
        'filters',

        // Modals
        'modals.address',
        'modals.autocomplete',
        'modals.geoname',
        'modals.cuisine',
        'modals.filters',
        'modals.fields',
        'modals.review',
        'modals.geoGuru',
        'modals.tag',
        'modals.user',

        // Popups
        'popups',

        // Services
        'services.cache',
        'services.contacts',
        'services.event',
        'services.facebook',
        'services.flag',
        'services.flashMessage',
        'services.geocode',
        'services.google',
        'services.http',
        'services.layout',
        'services.log',
        'services.map',
        'services.notification',
        'services.photo',
        'services.price',
        'services.prototype',
        'services.ranking',
        'services.review',
        'services.security',
        'services.storage',
        'services.translations',
        'services.utility',
        'services.validator',

        // grunt-html2js generated module : TEMPLATES_MODULE = services.templates
        'services.templates',
        // app wide states modules
        'states.public',
        'states.private'
    ])
    /**
     * app wide run block
     */
    .run(['$ionicPlatform', '$state', 'AppHelper', function (
        $ionicPlatform,
        $state,
        AppHelper
    ) {
        $ionicPlatform.ready(function () {
            if (typeof window.analytics !== 'undefined') {
                window.analytics.startTrackerWithId('UA-58670667-2');
            }

            // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
            // for form inputs)
            if (!AppHelper.isWebApp() && window.cordova.plugins.Keyboard) {
                window.cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
            }

        });
    }]);


'use strict';

// Tastd App
angular
    .module(AppHelper.APP_NAME)
    .config(['$urlRouterProvider', 'gravatarServiceProvider', 'ValidatorViolationContextProvider', 'DebugJsonProvider', 'ConfigProvider', '$ionicConfigProvider', function (
        $urlRouterProvider,
        gravatarServiceProvider,
        ValidatorViolationContextProvider,
        DebugJsonProvider,
        ConfigProvider,
        $ionicConfigProvider
    ) {
        // Disable swipe for back
        $ionicConfigProvider.views.swipeBackEnabled(false);
        $ionicConfigProvider.navBar.alignTitle('center');
        $ionicConfigProvider.views.transition('none');

        // if none of the declared module states are matched, use this as the fallback
        $urlRouterProvider.otherwise('/');

        gravatarServiceProvider.defaults = {
            'default': 'identicon'
        };

        // Use https endpoint
        gravatarServiceProvider.secure = true;

        ValidatorViolationContextProvider.debug(ConfigProvider.isDev());
        DebugJsonProvider.options({ debug : ConfigProvider.isDev() });

        // time ago directive customization
        // http://stackoverflow.com/questions/22964767
        // note the cheating to show future times like past times
        // to work around clock mismatches

        window.moment.lang('en', {
            relativeTime : {
                future: '%s',
                past:   '%s',
                s:  'seconds',
                m:  '1 min',
                mm: '%d mins',
                h:  '1 hour',
                hh: '%d hours',
                d:  '1 day',
                dd: '%d days',
                M:  '1 month',
                MM: '%d months',
                y:  '1 year',
                yy: '%d years'
            }
        });
    }]);


'use strict';

// Tastd App
angular
    .module(AppHelper.APP_NAME)

    .factory('RestError', ['$log', function RestErrorFactory(
        $log
    ) {

        var HTTP_STATUS = {
            NOT_AUTHENTICATED : 401
        };

        return {
            fromResponse : function (response) {
                response = response || {};

                // Is it a restmod model?
                var r = response.$response ? response.$response : response;
                $log.debug('[REST_ERROR] From response', r);
                var data = r ? r.data : {};

                return angular.extend({},{
                    _$response : r,
                    $title : 'Whoops...',
                    $isAuthError : function () {
                        return ( this.code + '' ) === ( HTTP_STATUS.NOT_AUTHENTICATED + '' ) &&
                            ( this.category === 'Auth' );
                    }
                }, data || {});
            }
        };
    }]);

/**
 * ==================  angular-ios9-uiwebview.patch.js v1.1.1 ==================
 *
 * This patch works around iOS9 UIWebView regression that causes infinite digest
 * errors in Angular.
 *
 * The patch can be applied to Angular 1.2.0 â€“ 1.4.5. Newer versions of Angular
 * have the workaround baked in.
 *
 * To apply this patch load/bundle this file with your application and add a
 * dependency on the "ngIOS9UIWebViewPatch" module to your main app module.
 *
 * For example:
 *
 * ```
 * angular.module('myApp', ['ngRoute'])`
 * ```
 *
 * becomes
 *
 * ```
 * angular.module('myApp', ['ngRoute', 'ngIOS9UIWebViewPatch'])
 * ```
 *
 *
 * More info:
 * - https://openradar.appspot.com/22186109
 * - https://github.com/angular/angular.js/issues/12241
 * - https://github.com/driftyco/ionic/issues/4082
 *
 *
 * @license AngularJS
 * (c) 2010-2015 Google, Inc. http://angularjs.org
 * License: MIT
 */

angular.module('ngIOS9UIWebViewPatch', ['ng']).config(['$provide', function($provide) {
    'use strict';

    $provide.decorator('$browser', ['$delegate', '$window', function($delegate, $window) {

        if (isIOS9UIWebView($window.navigator.userAgent)) {
            return applyIOS9Shim($delegate);
        }

        return $delegate;

        function isIOS9UIWebView(userAgent) {
            return /(iPhone|iPad|iPod).* OS 9_\d/.test(userAgent) && !/Version\/9\./.test(userAgent);
        }

        function applyIOS9Shim(browser) {
            var pendingLocationUrl = null;
            var originalUrlFn= browser.url;

            browser.url = function() {
                if (arguments.length) {
                    pendingLocationUrl = arguments[0];
                    return originalUrlFn.apply(browser, arguments);
                }

                return pendingLocationUrl || originalUrlFn.apply(browser, arguments);
            };

            window.addEventListener('popstate', clearPendingLocationUrl, false);
            window.addEventListener('hashchange', clearPendingLocationUrl, false);

            function clearPendingLocationUrl() {
                pendingLocationUrl = null;
            }

            return browser;
        }
    }]);
}]);

'use strict';

angular
    .module(AppHelper.APP_NAME)
    .controller('AppCtrl', function () {
    });

angular
    .module(AppHelper.APP_NAME)
    .run(['$ionicPlatform', '$ionicHistory', 'Platform', function (
        $ionicPlatform,
        $ionicHistory,
        Platform
    ) {

        $ionicPlatform.ready(function () {
            if (Platform.isAndroid()) {
                document.addEventListener("backbutton", onBackButton, false);
            }
        });

        function onBackButton() {
            $ionicHistory.goBack();
        }
    }]);

angular
    .module(AppHelper.APP_NAME)
    .run(['$ionicPlatform', 'PushMessageManager', 'NotificationBadge', 'Security', function (
        $ionicPlatform,
        PushMessageManager,
        NotificationBadge,
        Security
    ) {

        $ionicPlatform.ready(function () {
            document.addEventListener("resume", onResume, false);
        });

        function onResume() {
            if (!Security.user) {
                return;
            }
            PushMessageManager.getUnseenCounter(Security.user.id).then(function(response){
                NotificationBadge.counter = response.data.counter;
            });
        }

    }]);

'use strict';

angular
    .module(AppHelper.APP_NAME)
    .run(['$rootScope', '$log', 'LayoutManager', function (
        $rootScope,
        $log,
        LayoutManager
    ) {

        $rootScope.$on('$stateChangeSuccess', onStateChangeSuccess);

        function onStateChangeSuccess (event, toState) {
            $log.debug('[CONFIGURE_LAYOUT_LISTENER] On state change success');
            if (toState.layout) {
                LayoutManager.configureLayout(toState.layout);
            }

            if (toState.title) {
                $log.debug('[CONFIGURE_LAYOUT_LISTENER] Set title ' + toState.title);
                LayoutManager.setTranslatedTitle(toState.title);
            }
        }

    }]);

'use strict';

angular
    .module(AppHelper.APP_NAME)
    .run(['$rootScope', 'RestError', '$ionicPopup', '$state', '$log', 'Message', 'JsonUtil', function (
        $rootScope,
        RestError,
        $ionicPopup,
        $state,
        $log,
        Message,
        JsonUtil
    ) {

        $rootScope.$on('$stateChangeError', onStateChangeError);

        function onStateChangeError () {
            $log.error('[ERROR LISTENER] Error on state change, arguments:', arguments);
            var error = RestError.fromResponse(arguments[5]);
            var stackTrace = buildStackTrace(arguments, error);
            showPopupError(error);
            pushError(stackTrace);
        }

        function pushError (stackTrace) {
            var payload = {
                category: 'BUG',
                title: 'stateChangeError',
                content: JsonUtil.toSimpleString({
                    url: window.location.href,
                    stackTrace: stackTrace
                })
            };

            Message.$create(payload);
        }

        function showPopupError (error) {
            $ionicPopup.alert({
                title: 'Whoops.. error on state change!',
                template: error.message
            }).then(function () {
                if(error.$isAuthError()) {
                    $state.go('signin');
                }
            });
        }

        function buildStackTrace(parameters, error) {
            var stackTrace = _.map(parameters, function(x) {
                if (x && x.name) {
                    return x.name;
                }
            });
            stackTrace.concat([error.message]);

            return stackTrace;
        }
    }]);

angular
    .module(AppHelper.APP_NAME)
    .run(['$ionicPlatform', '$cordovaPush', 'DeviceManager', 'Security', '$q', 'Platform', '$rootScope', function (
        $ionicPlatform,
        $cordovaPush,
        DeviceManager,
        Security,
        $q,
        Platform,
        $rootScope
    ) {
        var devices = [],
            iOsConfig = {
                "badge": true,
                "sound": true,
                "alert": true
            };

        $rootScope.$on(Security.EVENTS.LOGIN_SUCCESS, onSecurityEvent);
        $rootScope.$on(Security.EVENTS.SIGNUP_SUCCESS, onSecurityEvent);
        $rootScope.$on(Security.EVENTS.REMEMBER_ME_SUCCESS, onSecurityEvent);

        $ionicPlatform.ready(function () {
            checkSecurityUser().then(findMyDevices);
        });

        function onSecurityEvent (e) {
            // console.log("SECURITY EVENT", e);
            checkSecurityUser().then(findMyDevices);
        }

        function findMyDevices() {
            DeviceManager.findAllByUserId(Security.user.id).then(pushSubscribe);
        }

        function checkSecurityUser() {
            var deferred = $q.defer();
            var intervalId = setInterval(function(){
                if (Security.user) {
                    clearInterval(intervalId);
                    deferred.resolve();
                }
            }, 1000);

            return deferred.promise;
        }

        function pushSubscribe(results) {
            devices = results;
            if (Platform.isIOS()) {
                $cordovaPush.register(iOsConfig).then(updateIOSDevice, updateIOSDeviceError);
            } else if (Platform.isAndroid()) {
                // alert(Platform.getDebugString());
            } else {
                // alert(Platform.getDebugString());
            }
        }

        function updateIOSDevice(deviceToken) {
            // console.log(deviceToken, 'Device TOKEN');
            var currentDevice = _.find(devices, function(device){
                // console.log('Device Token MATCH');
                return device.token === deviceToken;
            });
            if (currentDevice) {
                return;
            }
            // console.log('Device Token MISS, create a new one');
            DeviceManager.createIOSDevice(deviceToken, Security.user.id);
        }

        function updateIOSDeviceError(error) {
            // alert("Registration error: " + error);
        }

    }]);

'use strict';

angular
    .module(AppHelper.APP_NAME)
    .run(['$rootScope', 'NotificationBadge', '$cordovaPush', function (
        $rootScope,
        NotificationBadge,
        $cordovaPush
    ) {

        $rootScope.$on('$cordovaPush:notificationReceived', onPushNotification);

        function onPushNotification (event, notification) {

            if (notification.alert) {
                // console.log('notification.alert');
            }

            if (notification.sound) {
                // console.log('notification.sound');
                //var snd = new Media(event.sound);
                //snd.play();
            }

            if (notification.badge) {
                // console.log('notification.badge',notification.badge);
                NotificationBadge.counter = notification.badge;
                $cordovaPush.setBadgeNumber(notification.badge).then(function(result) {
                    // Success
                }, function(err) {
                    // An error occurred. Show a message to the user
                });
            }
        }

    }]);

'use strict';

angular
    .module(AppHelper.APP_NAME)
    .run(['$rootScope', 'Analytics', '$log', function ($rootScope, Analytics, $log) {
        $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams){
            $log.debug('[TRACK VIEW LISTENER] State change success. Track view.');
            Analytics.trackView(toState.name);
        });
    }]);

'use strict';

angular
    .module('entities.address', [
        'entities.restmod',
        'entities.geoname',
        'ngCordova.plugins.geolocation'
    ]);

'use strict';

angular
    .module('entities.address')
    .factory('Address', ['restmod', function AddressFactory(restmod) {

        var Address = restmod.model('/addresses').mix({
            $$type: 'Address',
            geoname: {
                hasOne: 'Geoname'
            },
            $config: {
                name: 'address',
                plural: 'addresses'
            },
            $extend: {
                Record: {
                    getNameForRanking: function () {
                        return this.geoname.formattedName;
                    }
                }
            }
        });

        return Address;
    }]);

'use strict';

angular
    .module('entities.address')
    .factory('AddressManager', ['Address', 'EntityManager', function AddressManagerFactory (
        Address,
        EntityManager
    ) {
        return new EntityManager(Address);
    }]);

'use strict';

angular
    .module('entities.cuisine', [
        'entities.restmod'
    ]);

'use strict';

angular
    .module('entities.cuisine')
    .factory('Cuisine', ['restmod', 'RestBase', function CuisineFactory(restmod, RestBase) {
        var Cuisine = restmod
            .model('/cuisines')
            .mix(RestBase, {
                $$type : 'Cuisine'
            });
        return Cuisine;
    }]);

'use strict';

angular
    .module('entities.cuisine')
    .factory('CuisineManager', ['Cuisine', '$q', 'EntityManager', function CuisineManagerFactory(
        Cuisine,
        $q,
        EntityManager
    ) {
        var CuisineManager = _.extend(new EntityManager(Cuisine),{
            findAll: findAll,
            findOneById: findOneById,
            cache: []
        });

        return CuisineManager;

        function findOneById (id) {
            var deferred = $q.defer();
            CuisineManager.findAll().then(function(cuisines){
                var result = _.find(cuisines, function(cuisine) {
                    return parseInt(cuisine.id) === parseInt(id);
                });

                deferred.resolve(result);
            });

            return deferred.promise;
        }

        function findAll() {
            var deferred = $q.defer();

            if (CuisineManager.cache.length !== 0) {
                deferred.resolve(CuisineManager.cache);

                return deferred.promise;
            }

            Cuisine.$search().$asPromise().then(function(cuisines){
                CuisineManager.cache = cuisines;
                deferred.resolve(cuisines);
            });

            return deferred.promise;
        }
    }]);

'use strict';

angular
    .module('entities.device', [
        'entities.restmod'
    ]);

'use strict';

angular
    .module('entities.device')
    .factory('Device', ['restmod', 'RestBase', function DeviceFactory(restmod, RestBase) {
        var Device = restmod
            .model('/devices')
            .mix(RestBase, {
                $$type : 'Device'
            });

        return Device;
    }]);

'use strict';

angular
    .module('entities.device')
    .factory('DeviceManager', ['Device', 'EntityManager', function DeviceManagerFactory(
        Device,
        EntityManager
    ) {
        return _.extend(new EntityManager(Device), {
            findAllByUserId: findAllByUserId,
            createIOSDevice: createIOSDevice
        });

        function findAllByUserId(userId) {
            return Device.$search({ user: userId }).$asPromise();
        }

        function createIOSDevice(deviceToken, userId) {
            return Device.$create({
                token: deviceToken,
                user: userId,
                name: 'ios'
            });
        }

    }]);


'use strict';

angular
    .module('entities.expertise', [])
    .factory('ExpertiseManager', ['$http', 'Config', function ExpertiseManagerFactory (
        $http,
        Config
    ) {
        return {
            findAll: findAll
        };

        function findAll(userId, wish) {
            var params = {
                user: userId,
                groupBy: 'geoname'
            };
            if(wish){
                params.wish = wish;
            }
            return $http.get(Config.apiUrl()+'/expertise', {params: params})
                .then(function(resp) {
                    return resp.data.expertise;
                });
        }

    }]);

'use strict';

angular.module('entities.flag', [
    'entities.restmod'
]);


'use strict';

angular
    .module('entities.flag')
    .factory('Flag', ['restmod', function (restmod) {
        var Flag = restmod.model('/flags').mix({
            $$type : 'Flag'
        });

        return Flag;
    }]);

'use strict';

angular
    .module('entities.flag')
    .factory('FlagManager', ['Flag', 'EntityManager', function FlagManagerFactory(
        Flag,
        EntityManager
    ) {

        return _.extend(new EntityManager(Flag), {

        });

    }]);

'use strict';

angular
    .module('entities.friend', [
        'entities.restmod',
        'services.security'
    ]);

'use strict';

angular
    .module('entities.friend')
    .factory('Friend', ['restmod', function FriendFactory(restmod) {
        var Friend = restmod.model('/friends').mix({
            $$type: 'Friend'
        });

        return Friend;
    }]);


'use strict';

angular
    .module('entities.friend')
    .factory('FriendManager', ['Friend', 'EntityManager', function UserManagerFactory (
        Friend,
        EntityManager
    ) {
        return _.extend(new EntityManager(Friend), {});
    }]);

'use strict';

angular
    .module('entities.follower', [
        'entities.restmod',
        'entities.user'
    ]);

'use strict';

angular
    .module('entities.follower')
    .factory('Follower', ['restmod', 'ConnectedUserBase', function FollowerFactory(restmod, ConnectedUserBase) {

        var Follower = restmod
            .model()
            .mix('User', ConnectedUserBase, {
                $$type : 'Follower', // fake type
                $config: {
                    name: 'follower', // if you only set NAME, then plural is infered from it using the inflector.
                    plural: 'followers'
                }
            });

        Follower.$$type = 'Follower';

        return Follower;
    }]);

'use strict';

angular.module('entities.geoname', [
    'entities.restmod',
    'services.security'
]);

'use strict';

angular
    .module('entities.geoname')
    .factory('Geoname', ['restmod', 'Config', function GeonameFactory(restmod, Config) {
        var Geoname = restmod.model('/geonames').mix({
            $$type : 'Geoname',
            $config: {
                urlPrefix: Config.publicUrl()
            }
        });

        return Geoname;
    }]);

'use strict';

angular
    .module('entities.geoname')
    .factory('GeonameManager', ['Security', 'Geoname', 'EntityManager', function GeonameManagerFactory(
        Security,
        Geoname,
        EntityManager
    ) {

        return _.extend(new EntityManager(Geoname), {
            getSearchParameters : getSearchParameters,
            findAll: findAll,
            createFromStateParams: createFromStateParams
        });

        function createFromStateParams ($stateParams) {
            return {
                id: $stateParams.cityId,
                asciiName: $stateParams.cityName,
                lat: parseFloat($stateParams.lat),
                lng: parseFloat($stateParams.lng)
            };
        }

        function findAll (p) {
            if (typeof p === 'string') {
                p = {
                    asciiName: p
                };
            }
            return Geoname.$search(p).$asPromise();
        }

        function getSearchParameters (q) {
            var parameters = {};
            if (q) {
                parameters.asciiName = q;
            } else {
                parameters.user = Security.user.id;
            }
            return parameters;
        }
    }]);


'use strict';

angular
    .module('entities.invite', [
        'entities.restmod'
    ]);

'use strict';

angular
    .module('entities.invite')
    .factory('Invite', ['restmod', function InviteFactory(restmod) {
        return restmod.model('/invites').mix({
            $$type: 'Invite',
            $config: {
                name: 'invite',
                plural: 'invites'
            }
        });
    }]);

'use strict';

angular
    .module('entities.leader', [
        'entities.restmod',
        'entities.user'
    ]);

'use strict';

angular
    .module('entities.leader')
    .factory('LeaderBatch', ['restmod', function LeaderBatchFactory(restmod) {

        var LeaderBatch = restmod.model().mix({
            $$type : 'LeaderBatch',
            $config: {
                name: 'batch',
                plural: 'batch'
            }
        });

        return LeaderBatch;
    }]);

'use strict';

angular
    .module('entities.leader')
    .factory('Leader', ['restmod', 'ConnectedUserBase', function LeaderFactory(restmod, ConnectedUserBase) {

        var Leader = restmod
            .model()
            .mix('User', ConnectedUserBase, {
                batch: {
                    hasMany: 'LeaderBatch'
                },
                $$type : 'Leader', // fake type
                $config: {
                    name: 'leader', // if you only set NAME, then plural is infered from it using the inflector.
                    plural: 'leaders'
                }
            });

        Leader.$$type = 'Leader';

        return Leader;
    }]);

'use strict';

angular
    .module('entities.message', [
        'entities.restmod'
    ]);

'use strict';

angular
    .module('entities.message')
    .factory('Message', ['restmod', function MessageFactory(restmod) {
        return restmod.model('/messages').mix({
            $$type : 'Message'
        });
    }]);

'use strict';

angular
    .module('entities.message')
    .factory('MessageHelper', ['Message', function MessageHelperFactory(Message) {

        var TITLE_ERROR_PREFIX = 'Error Rest. ID#';

        var rs = {};

        rs.sendMessage = function (msg) {
            return Message.$create(msg).$asPromise();
        };

        rs.sendRestaurantError = function (restId, error) {
            var msg = {
                title : TITLE_ERROR_PREFIX + restId,
                content : error,
                category : 'ERROR'
            };
            return Message.$create(msg).$asPromise();
        };

        return rs;
    }]);

'use strict';

angular
    .module('entities.option', [
        'entities.restmod'
    ]);

'use strict';

angular
    .module('entities.option')
    .factory('Option', ['restmod', 'RestBase', function OptionFactory(restmod, RestBase) {
        var Option = restmod
            .model('/options')
            .mix(RestBase, {
                $$type : 'Option'
            });
        return Option;
    }]);

'use strict';

angular
    .module('entities.option')
    .factory('OptionManager', ['Option', 'EntityManager', '$q', 'Security', function UserManagerFactory (
        Option,
        EntityManager,
        $q,
        Security
    ) {
        var OPTION_DEFAULT_NAME = 'tastdapp',
            optionModel,
            option;

        return _.extend(new EntityManager(Option), {
            get : get,
            set : set
        });

        function set(name, content) {
            return _fetchOption().then(function () {
                option[name] = content;
                return _persist();
            });
        }

        function wrapOption(opt, name){
            var wrappingObj = {
                $save : function(){
                    return set(name, getNakedObj());
                },
                $destroy : function() {
                    return _fetchOption().then(function () {
                        delete option[name];
                        return _persist();
                    });
                }
            };

            var wrapped = angular.extend({}, opt[name], wrappingObj);

            function getNakedObj(){
                return _.omit(wrapped, _.keys(wrappingObj));
            }

            return wrapped;
        }

        function get(name) {
            return _fetchOption().then(function () {
                return wrapOption(option, name);
            });
        }

        function _persist() {
            optionModel.content = option;
            return optionModel.$save().$asPromise();
        }

        function _fetchOption() {
            if (option) {
                var d = $q.defer();
                d.resolve();
                return d.promise;
            }
            return Option.$search({
                user : Security.user.id
            }).$asPromise().then(function (opt) {
                optionModel = opt[0];
                if (optionModel) {
                    option = optionModel.content;
                } else {
                    optionModel = Option.$build();
                    optionModel.name = OPTION_DEFAULT_NAME;
                    option = {};
                }
            });
        }
    }]);

'use strict';

angular
    .module('entities.photo', [
        'entities.restmod'
    ]);

'use strict';

angular
    .module('entities.photo')
    .factory('Photo', ['restmod', function PhotoFactory(restmod) {
        return restmod.model('/photos').mix({
            $$type: 'Photo',
            $config: {
                name: 'photo',
                plural: 'photos'
            }
        });
    }]);

'use strict';

angular
    .module('entities.photo')
    .factory('PhotoManager', ['Photo', 'EntityManager', function PhotoManagerFactory (
        Photo,
        EntityManager
    ) {
        return _.extend(new EntityManager(Photo), {});
    }]);

'use strict';

angular
    .module('entities.place', [])
    .factory('PlaceManager', ['$http', 'Config', '$q', function PlaceManagerFactory (
        $http,
        Config,
        $q
    ) {
        return {
            findAll: findAll,
            removeDuplicates: removeDuplicates
        };

        function findAll(lat, lng, name) {
            var deferred = $q.defer();
            var url = Config.apiUrl('/google-places/place-results');
            var options = {
                latitude: lat,
                longitude: lng,
                name: name
            };
            $http.get(url, {params: options})
                .then(function(response) {
                    if (response.data && response.data.placeResults) {
                        return deferred.resolve(response.data.placeResults);
                    }
                    return deferred.resolve([]);
                });

            return deferred.promise;
        }

        function removeDuplicates(placeResults){
            var results = [];
            angular.forEach(placeResults, function(p1) {
                var unique = true;
                angular.forEach(results, function(p2) {
                    if (p1.name === p2.name) {
                        unique = false;
                    }
                });
                if(unique){
                    results.push(p1);
                }
            });

            return results;
        }

    }]);

'use strict';

angular
    .module('entities.pushMessage', [
        'entities.restmod'
    ]);

'use strict';

angular
    .module('entities.pushMessage')
    .factory('PushMessage', ['restmod', 'RestBase', function PushMessageFactory(restmod, RestBase) {
        var PushMessage = restmod
            .model('/push-messages')
            .mix(RestBase, {
                $$type : 'PushMessage',
                $config: {
                    name: 'pushMessage',
                    plural: 'pushMessages'
                }
            });
        return PushMessage;
    }]);

'use strict';

angular
    .module('entities.pushMessage')
    .factory('PushMessageManager', ['PushMessage', '$http', 'Config', 'EntityManager', function PushMessageManagerFactory(
        PushMessage,
        $http,
        Config,
        EntityManager
    ) {

        var PushMessageManager = _.extend(new EntityManager(PushMessage), {
            findAllByUserId: findAllByUserId,
            markAllAsSeen: markAllAsSeen,
            getUnseenCounter: getUnseenCounter
        });

        return PushMessageManager;

        function findAllByUserId(userId) {
            return PushMessage.$search({ user: userId }).$asPromise();
        }

        function markAllAsSeen(userId) {
            var payload = {
                user: userId
            };
            return $http.post(Config.apiUrl()+'/push-messages/seen', payload);
        }

        function getUnseenCounter (userId) {
            var parameters = {
                user: userId
            };
            return $http.get(Config.apiUrl()+'/push-messages/counter', {params: parameters});
        }

    }]);


'use strict';

angular.module('entities.restaurant', [
    'entities.restmod',
    'services.utility'
]);


'use strict';

angular
    .module('entities.restaurant')
    .factory('Restaurant', ['restmod', 'Geoname', '$http', 'Base64Util', function RestaurantFactory(
        restmod,
        Geoname,
        $http,
        Base64Util
    ) {

        var Restaurant = restmod.model('/restaurants').mix({
            $$type : 'Restaurant',
            reviews   : {
                hasMany : 'Review'
            }
        });

        return Restaurant;
    }]);

'use strict';

angular
    .module('entities.restaurant')
    .factory('RestaurantManager', ['Restaurant', 'EntityManager', '$http', 'Config', 'Geoname', 'Base64Util', '$q', function RestaurantManagerFactory (
        Restaurant,
        EntityManager,
        $http,
        Config,
        Geoname,
        Base64Util,
        $q
    ) {
        var RestaurantManager = _.extend(new EntityManager(Restaurant), {
            buildFromPlace: buildFromPlace,
            buildFromPlaceId: buildFromPlaceId,
            findTopRestaurants: findTopRestaurants,
            findNearLocation: findNearLocation,
            findByName: findByName
        });

        return RestaurantManager;

        function findByName (name, geonameId) {
            name.replace('\'', '%27');
            return RestaurantManager.findAll({
                name: name,
                geoname: geonameId,
                orderBy: 'score'
            });
        }

        function findTopRestaurants (geonameId) {
            return RestaurantManager.findAll({
                orderBy: 'score',
                geoname: geonameId
            });
        }

        function findNearLocation (lat, lng, name) {
            var params = {
                orderBy: 'distance',
                lat: lat,
                lng: lng,
                maxDistance: 1
            };

            if (name && name.trim() !== '') {
                params.name = name;
            }

            return RestaurantManager.findAll(params);
        }

        function buildFromPlaceId (placeId) {
            var deferred = $q.defer();
            var url = Config.apiUrl('/google-places/place-results/' + placeId);
            $http.get(url).then(function(response) {
                var placeResultData = response.data.placeResult;
                var restaurant = RestaurantManager.buildFromPlace(placeResultData);
                if (!placeResultData.picture) {
                    return deferred.resolve(restaurant);
                }

                return $http.get(placeResultData.picture, {responseType: 'arraybuffer'})
                    .then(function(response) {
                        restaurant.uploadedPicture = Base64Util.base64ArrayBuffer(response.data);
                        deferred.resolve(restaurant);
                    });
            });

            return deferred.promise;
        }

        function buildFromPlace (place) {
            return Restaurant.$build({
                name    : place.name,
                picture : place.picture,
                address : place.formattedAddress,
                lat     : place.latitude,
                lng     : place.longitude,
                geoname : Geoname.$build(place.geoname),
                website : place.website,
                phone   : place.telephone,
                placeId : place.id
            });
        }
    }]);

'use strict';

angular
    .module('entities.restmod', [
        'services.config',
        'restmod'
    ]);

'use strict';

angular
    .module('entities.restmod')
    .factory('EntityManager', function EntityManagerFactory(){
        return function EntityManager(entity) {

            // Methods to retrieve promises

            this.findAll = function (parameters) {
                return entity.$search(parameters).$asPromise();
            };

            this.findOneById = function (id) {
                return entity.$find(id).$asPromise();
            };

            this.save = function (resource) {
                return resource.$save().$asPromise();
            };

            // Methods to retrieve Restmod Resources and Collections

            this.findRestmodResource = function (id) {
                return entity.$find(id);
            };

            this.createRestmodResource = function (parameters) {
                return entity.$create(parameters);
            };

            this.buildRestmodResource = function (parameters) {
                return entity.$build(parameters);
            };

            this.searchRestmodCollection = function (parameters) {
                return entity.$search(parameters);
            };


        };
    });

'use strict';

angular
    .module('entities.restmod')
    .factory('RestBase', ['restmod', 'inflector', '$filter', '$log', function RestBaseFactory(
        restmod,
        inflector,
        $filter,
        $log
    ) {

        var RestBase = {
            created: {
                mask:'CU'
            }, // won't send this attribute on Create or Update
            updated: {
                mask:'CU'
            },
            $extend : {
                Record : {
                    isEqual : function (record) {
                        return this.$pk === record.$pk;
                    }
                },
                Collection : {
                    $orderBy : function (expression, reverse) {
                        var ordered  = $filter('orderBy')(this, expression, reverse || false);
                        // reset the collection contents:
                        this.length = 0;
                        this.push.apply(this, ordered);
                        return this;
                    },
                    $fetchMore : function (params) {
                        var extendedParams = angular.extend({}, params || {}, {
                            page : this.$metadata.nextPage
                        });
                        $log.debug('[REST_BASE] $fetchMore with params', params, extendedParams);
                        return this.$fetch(extendedParams);
                    }
                },
                Model: {
                    encodeUrlName: inflector.parameterize
                }
            }
        };

        return restmod.mixin('DefaultPacker', RestBase);
    }]);

'use strict';

angular
    .module('entities.restmod')
    .config(['restmodProvider', 'ConfigProvider', function (restmodProvider, ConfigProvider) {
        restmodProvider.rebase({
            $config: {
                urlPrefix: ConfigProvider.apiUrl(),
                style : 'DefaultPacker',
                patchMethod : 'PUT'
            }
        }, 'RestBase');
    }]);

'use strict';

angular
    .module('entities.review', [
        'entities.restmod'
    ]);


'use strict';

angular
    .module('entities.review', [
        'entities.restmod'
    ])
    .factory('ReviewBatch', ['restmod', function ReviewBatchFactory(restmod) {

        var ReviewBatch = restmod.model().mix({
            $$type : 'ReviewBatch',
            $config: {
                name: 'batch',
                plural: 'batch'
            }
        });

        return ReviewBatch;
    }]);

'use strict';

angular
    .module('entities.review')
    .factory('Review', ['restmod', function ReviewFactory(restmod) {

        var Review = restmod.model('/reviews').mix({
            batch: {
                hasMany: 'ReviewBatch'
            },
            $$type : 'Review',
            $config: {
                name: 'review',
                plural: 'reviews'
            }
        });

        return Review;
    }]);

'use strict';

angular
    .module('entities.review')
    .factory('ReviewManager', ['Review', 'EntityManager', 'TagManager', '$q', '$log', 'Config', '$http', function ReviewManagerFactory(
        Review,
        EntityManager,
        TagManager,
        $q,
        $log,
        Config,
        $http
    ) {

        var ReviewManager = _.extend(new EntityManager(Review), {
            getWallByUserId: getWallByUserId,
            getPublicWall: getPublicWall,
            transformForList: transformForList,
            findAllForList: findAllForList,
            loadMoreForList: loadMoreForList,
            changeCuisine: changeCuisine,
            updatePositionWithRanking: updatePositionWithRanking,
            persistOrder: persistOrder,
            replaceTagsWithGroupId: replaceTagsWithGroupId,
            updateReviewTagFields: updateReviewTagFields
        });

        return ReviewManager;

        function updateReviewTagFields (review) {
            review.bestFor = getTagsWithGroupId(review, TagManager.BEST_FOR);
            review.drinks = getTagsWithGroupId(review, TagManager.DRINKS);
            review.location = getTagsWithGroupId(review, TagManager.LOCATION);
            review.vibe = getTagsWithGroupId(review, TagManager.VIBE);
            review.entertainment = getTagsWithGroupId(review, TagManager.ENTERTAINMENT);
            review.specialMention = getTagsWithGroupId(review, TagManager.SPECIAL_MENTION);
            review.otherTags = getTagsWithGroupId(review, TagManager.OTHER);
        }

        function getTagsWithGroupId (review, id) {
            return _.filter(review.tags, function(t){
                return t.groupId === id;
            });
        }

        function replaceTagsWithGroupId (review, newTags, groupId) {
            $log.debug('[REVIEW_MANAGER] Replace tags with group id', review, newTags, groupId);
            var tags = _.filter(review.tags, function (t) {
                return t.groupId !== groupId;
            });
            tags = tags.concat(newTags);
            review.tags = tags;
        }

        function findAllForList(userId, geonameId, page) {
            var deferred = $q.defer();
            ReviewManager.findAll({
                user: userId,
                geoname: geonameId,
                orderBy: 'cuisine',
                page: page || 1
            }).then(function(reviews){
                var reviewsForList = ReviewManager.transformForList(reviews);
                deferred.resolve(reviewsForList);
            });

            return deferred.promise;
        }

        function loadMoreForList(userId, geonameId, reviews) {
            var deferred = $q.defer();
            ReviewManager.findAllForList(userId, geonameId, reviews.$metadata.nextPage)
                .then(function(newReviews){
                    reviews.$metadata = newReviews.$metadata;
                    _.each(newReviews, function(r){
                        reviews.push(r);
                    });
                    deferred.resolve(newReviews);
                });
            return deferred.promise;
        }

        function getWallByUserId(userId) {
            return Review.$search({
                user: userId,
                orderBy : 'created',
                serializationGroups : 'reviewOwner'
            }).$asPromise();
        }

        function getPublicWall () {
            return Review.$search({
                orderBy : 'created',
                serializationGroups : 'reviewOwner'
            }).$asPromise();
        }

        function transformForList(reviews){
            _.forEach(reviews, function(item) {
                item.restaurantId = item.restaurant.id;
                item.name = item.restaurant.name;
                item.picture = item.restaurant.picture;
                item.color = item.cuisine.color;
                item.cuisineName = item.cuisine.name;
                item.cuisineId = item.cuisine.id;
            });
            return reviews;
        }

        function changeCuisine(review, cuisine) {
            var deferred = $q.defer();
            var result = copyReview(review);
            var destroyPromise = review.$destroy().$asPromise();
            destroyPromise.then(function(){
                result.cuisine = cuisine;
                result.$save().$asPromise().then(function(review){
                    deferred.resolve(review);
                });
            });

            return deferred.promise;
        }

        function copyReview(review) {
            var result = Review.$build();
            result.restaurant = review.restaurant;
            result.comment = review.comment;
            result.picture = review.picture;
            result.cuisine = review.cuisine;
            result.name = review.name;
            result.cost = review.cost;
            result.geoname = review.geoname;
            result.taggedFriends = review.taggedFriends;
            result.tags = review.tags;
            result.position = null;

            return result;
        }

        function updatePositionWithRanking (review, ranking) {
            var newReview = _.findWhere(ranking, {id: review.id});
            review.position = newReview.position;
            $log.debug('[REVIEW_MANAGER] Set position = ' + newReview.position, review, newReview);

            return review;
        }

        function persistOrder(reviews) {
            // set the position property based on the order in the array
            reviews = _(reviews).each(function(v, k, obj) {
                obj[k].position = k+1;
            }).value();
            var payload = _.map(reviews, function(x) {
                return {
                    id: x.id,
                    position: x.position
                };
            });
            payload = {
                reviews: payload
            };
            return $http.post(Config.apiUrl()+'/reviews/reorder', payload);
        }

    }]);


'use strict';

angular
    .module('entities.tag', [
        'entities.restmod'
    ]);


'use strict';

angular
    .module('entities.tag')
    .factory('Tag', ['restmod', function TagFactory(restmod) {

	    var Tag = restmod.model('/tags').mix({
	    	$extend: {
	    		Model: {
	    			$highlighted: function() {
	    				return this.$search({highlight: true});
	    			}
	    		}
	    	}
	    });

	    return Tag;
    }]);

'use strict';

angular
    .module('entities.tag')
    .factory('TagManager', ['Tag', 'EntityManager', function TagManagerFactory (
        Tag,
        EntityManager
    ) {
        return _.extend(new EntityManager(Tag), {
            BEST_FOR: 0,
            ATMOSPHERE: 1,
            LOCATION: 2,
            FOOD: 3,
            DRINKS: 4,
            SERVICES: 5,
            MENU: 6,
            OTHER: 7,
            VIBE: 8,
            ENTERTAINMENT: 9,
            SPECIAL_MENTION: 10
        });
    }]);

'use strict';

angular
    .module('entities.user', [
        'entities.restmod',
        'services.security'
    ]);

'use strict';

angular
    .module('entities.user')
    .factory('ChangePassword', ['restmod', 'ConnectedUserBase', function ChangePasswordFactory(restmod, ConnectedUserBase) {

        var ChangePassword = restmod
            .model()
            .mix('User', ConnectedUserBase, {
                $$type : 'ChangePassword', // fake type
                $config : {
                    name : 'change-password', // if you only set NAME, then plural is infered from it using the inflector.
                    plural : 'change-passwords'
                }
            });

        return ChangePassword;
    }]);

'use strict';

angular
    .module('entities.user')
    .factory('ConnectedUserBase', ['restmod', function ConnectedUserBaseFactory(restmod) {

        // FIXME
        var extendParams = function (params, defaultParams) {
            return angular.extend({}, params || {}, defaultParams || {});
        };

        return restmod.mixin({
            $extend: {
                Collection: {
                    $refreshApproved: function (params) {
                        return this.$refresh(extendParams(params, {
                            status: 'approved'
                        }));
                    },
                    $fetchMoreApproved: function (params) {
                        return this.$fetchMore(extendParams(params, {
                            status: 'approved'
                        }));
                    }
                }
            }
        });
    }]);




'use strict';

angular
    .module('entities.user')
    .factory('Credential', ['restmod', function CredentialFactory(restmod) {

        var Credential = restmod.model().mix({
            $$type: 'Credential',
            $config: {
                name: 'credential',
                plural: 'credentials'
            }
        });

        return Credential;
    }]);




'use strict';

angular
    .module('entities.user')
    .factory('User', ['restmod', function UserFactory(restmod) {

        var User = restmod.model('/users').mix({
            $$type: 'User',
            followers: {
                hasMany: 'Follower'
            },
            leaders: {
                hasMany: 'Leader'
            },
            credentials: {
                hasMany: 'Credential'
            },
            changePassword: {
                hasMany: 'ChangePassword'
            },
            getFakeEmail: function () {
                return this.id + '_tastd@tastd.com';
            },
            isProfileComplete: function () {
                return !this.firstName || !this.lastName;
            },
            isMyLeader: function () {
                return this.$metadata && this.$metadata.isMyLeader;
            }
        });

        return User;
    }]);




'use strict';

angular
    .module('entities.user')
    .factory('UserManager', ['User', 'EntityManager', function UserManagerFactory (
        User,
        EntityManager
    ) {
        var UserManager = _.extend(new EntityManager(User), {
            findLeadersOf: findLeadersOf,
            findFollowersOf: findFollowersOf,
            createFromStateParams: createFromStateParams
        });

        return UserManager;

        function createFromStateParams ($stateParams) {
            return {
                id: $stateParams.userId,
                firstName: $stateParams.userFirstName,
                lastName: $stateParams.userLastName,
                fullName: $stateParams.userFullName
            };
        }

        function findLeadersOf (userId, name) {
            var parameters = {
                leadersOf: userId,
                orderBy: 'score'
            };

            if (name && name.trim() !== '') {
                parameters.query = name;
            }

            return UserManager.findAll(parameters);
        }

        function findFollowersOf (userId, name) {
            var parameters = {
                followersOf: userId,
                orderBy: 'score'
            };

            if (name && name.trim() !== '') {
                parameters.query = name;
            }

            return  UserManager.findAll(parameters);
        }


    }]);

'use strict';

angular
    .module('entities.wishlist', [
        'entities.restmod'
    ]);

'use strict';

angular
    .module('entities.wishlist')
    .factory('Wish', ['restmod', function WishFactory(restmod) {
        var Wish = restmod.model('/wishes').mix({
            $$type : 'Wish'
        });

        return Wish;
    }]);

'use strict';

angular
    .module('entities.wishlist')

    .factory('WishHelper', ['Wish', function WishHelperFactory(Wish) {
        var WishHelper = {
            getWishes: getWishes,
            getWishesFromStateParam: getWishesFromStateParam
        };

        return WishHelper;

        function getWishes(options) {
            return Wish.$search(options).$asPromise();
        }

        function getWishesFromStateParam($stateParams) {
            return WishHelper.getWishes({
                user : $stateParams.userId,
                geoname : $stateParams.cityId,
                cuisine : $stateParams.cuisineId
            });
        }

    }]);

'use strict';

angular.module('directives.cuisine', []);

'use strict';

angular
    .module('directives.cuisine')
    .directive('cuisine', function CuisineDirective() {
        return {
            restrict : 'EA',
            scope: {
                cuisine : '=cuisineModel',
                disabled : '=disabled',
                icon: '=icon'
            },
            template : '<div ng-if="cuisine" class="cuisine">' +
                '<div class="cuisine-avatar" ng-style="disabled? {} : {background:\'#\'+ cuisine.color }">' +
                '<i ng-class="disabled || icon ? {\'icon-cuisine\':true}: {\'icon-checkmark-round\':true}" class="icon"></i></div>'+
                '<div class="cuisine-name">{{ cuisine.nameÂ }}</div>' +
                '</div>'
        };
    });

'use strict';

angular
    .module('directives.cuisine')
    .directive('selectCuisine', function SelectCuisineDirective() {

        return {
            restrict : 'EA',
            templateUrl : 'js/directives/cuisine/select-cuisine.html',
            controller : ['$scope', 'CuisineModal', function ($scope, CuisineModal) {

                $scope.openModal = function () {
                    CuisineModal.create()
                        .then(function (cuisine) {
                            $scope.item.cuisine = cuisine;
                        });
                };
            }],
            scope : {
                item : '=',
                cuisines : '='
            }
        };
    });

'use strict';

angular
    .module('directives.flashMessage', [
        'services.flashMessage'
    ])
    .directive('flashMessage', function(
    ){
        return {
            restrict: 'E',
            scope: {},
            templateUrl : 'js/directives/flash-message/flash-message.html',
            controllerAs : 'ctrl',
            controller : ['FlashMessageManager', function(FlashMessageManager){
                var ctrl = this;
                ctrl.reset = reset;
                ctrl.manager = FlashMessageManager;
                function reset($event) {
                    $event.stopPropagation();
                    $event.preventDefault();
                    FlashMessageManager.reset();
                }
            }]
        };
    });

angular
    .module('directives.focus', [])
    .directive('focusMe', ['$timeout', '$parse', function($timeout, $parse) {
    return {
        link: function(scope, element, attrs) {
            var model = $parse(attrs.focusMe);
            scope.$watch(model, function(value) {
                if(value === true) {
                    $timeout(function() {
                        element[0].focus();
                    });
                }
            });
        }
    };
}]);

'use strict';

angular
    .module('directives.history', []);

'use strict';

angular
    .module('directives.history')
    .directive('back', function BackDirective() {
        return {
            restrict : 'E',
            scope: {
            },
            controller : ['$scope', '$ionicHistory', '$log', '$state', function ($scope, $ionicHistory, $log, $state) {
                $scope.back = function(){
                    var backView = $ionicHistory.backView();
                    if (!backView) {
                        return $state.go('wall');
                    }

                    $log.debug('[BACK] Try to go to back state ' + backView.stateId);
                    if (backView && backView.stateId.indexOf('restaurantCreate') > -1) {
                        return $ionicHistory.goBack(-2);
                    }
                    return $ionicHistory.goBack();
                };
            }],
            template : '<div class="back-button" ng-click="back()"' +
                'class="header-button"><i class="icon ion-arrow-left-c"></i></div>'
        };
    });

'use strict';

angular
    .module('directives.loader', []);

'use strict';

angular
    .module('directives.loader')
    .directive('listLoader', function ListLoaderDirective() {

        return {
            restrict : 'E',
            templateUrl : 'js/directives/loader/list-loader.html',
            controllerAs : 'ctrl',
            controller : function (/*$scope, Loader, $state*/) {
                var ctrl = this;
            },
            scope : {
                loading : '='
            }
        };
    });


'use strict';

angular
    .module('directives.loader')
    .directive('progressBar', function ListLoaderDirective() {

        return {
            restrict : 'E',
            templateUrl : 'js/directives/loader/progress-bar.html',
            controllerAs : 'ctrl',
            controller : function (/*$scope, Loader, $state*/) {
                var ctrl = this;
            },
            scope : {
                progress: '='
            }
        };
    });



'use strict';

angular
    .module('directives.map', [
    ]);

'use strict';

angular
    .module('directives.map')
    .directive('staticMap', function StaticMapDirective() {
        //maps.googleapis.com/maps/api/staticmap?size=640x200&zoom=14&markers=color:red|label:X|61.133789,10.401121
        var BASE_URL = 'https://maps.googleapis.com/maps/api/staticmap?';
        var ZOOM_DEFAULT_LEVEL = 14;
        // USE CORRECT MARKER IMAGE URL
        var MARKER_URL = encodeURIComponent('http://goo.gl/caV6hq');

        return {
            restrict : 'EA',
            replace : true,
            template : '<img alt="Google Map">',
            controller : function () {

            },
            link : function(scope, element, attrs){
                function buildAddress(){
                    return BASE_URL +
                            'size=' + encodeURIComponent(attrs.size) +
                            '&zoom=' + ZOOM_DEFAULT_LEVEL +
                            '&markers=color:' + '0x' + attrs.color +
                            '&markers=icon:' + MARKER_URL +
                            '|' + encodeURIComponent(attrs.lat) +
                            ',' + encodeURIComponent(attrs.lng);
                }

                var el = element[0];
                var size = attrs.size.split('x');
                el.width = parseInt(size[0], 10);
                el.height = parseInt(size[1], 10);
                el.src = buildAddress();
            }
        };
    });

'use strict';

angular
    .module('directives.notification', [
        'services.security'
    ]);

'use strict';

angular
    .module('directives.notification')
    .directive('notification', function NotificationDirective() {
        return {
            restrict: 'E',
            replace: true,
            scope: {
                pushMessage: '=pushMessage'
            },
            templateUrl: 'js/directives/notification/notification.html'
        };
    });

'use strict';

angular
    .module('directives.photo', [
        'services.photo'
    ]);

'use strict';

angular
    .module('directives.photo')
    .directive('dynlayoutGallery', function DynlayoutGalleryDirective() {
        var layouts = [
            // 0 foto => niente
            [],
            // 1 foto => 100%
            [['full']],
            // 2 foto => 50% 50%
            [['half-l', 'half-r']],
            // 3 foto => 33% 33% 33%
            [['third-l', 'third', 'third-r']],
            // 4 --> 2 sopra (50% 50%), 2 sotto (50% 50%)
            [['half-l', 'half-r'], ['half-l', 'half-r']],
            // 5 --> 2 sopra (50% 50%), 3 sotto (33%,33%,33%)
            [['half-l', 'half-r'], ['third-l', 'third', 'third-r']],
            // 6 --> 3 sopra (33%,33%,33%), 3 sotto (33%,33%,33%)
            [['third-l', 'third', 'third-r'], ['third-l', 'third', 'third-r']],
            // 7 --> 2 (50% 50%), 2 (50% 50%), 3 (33%,33%,33%)
            [['half-l', 'half-r'], ['half-l', 'half-r'], ['third-l', 'third', 'third-r']],
            // 8 --> 2 (50% 50%), 3(33%,33%,33%),3(33%,33%,33%)
            [['half-l', 'half-r'], ['third-l', 'third', 'third-r'], ['third-l', 'third', 'third-r']],
            // 9 --> 3 (33%,33%,33%),3 (33%,33%,33%),3 (33%,33%,33%)
            [['third-l', 'third', 'third-r'], ['third-l', 'third', 'third-r'], ['third-l', 'third', 'third-r']]
        ];

        function groupPhotos(photos) {
            var layout = layouts[photos.length],
                i = 0,
                arr = [];
            // var arr = angular.copy(layouts[photos.length]);
            angular.forEach(layout, function (group) {
                var tmp = [];
                arr.push(tmp);
                angular.forEach(group, function (photo) {
                    tmp.push({
                        src : photos[i].src,
                        layout : photo,
                        index : i
                    });
                    i++;
                });
            });
            return arr;
        }

        return {
            restrict : 'EA',
            replace : true,
            template : '<span class="dynlayout-gallery-container">' +
                            '<div ng-repeat="group in groupedPhotos track by $index" style="clear:both">' +
                                '<span ng-repeat="photo in group track by $index" ng-click="photoClicked(photo.index)" class="photo-wrapper" ng-class="\'photo-\'+photo.layout">' +
                                    // '<img class="gallery-photo" src="http://d3e9bp48wqwk17.cloudfront.net/restaurant_thumb/553052a522bb2.jpg">' +
                                    '<img class="gallery-photo" ng-src="{{photo.src}}">' +
                                '</span>' +
                            '</div>' +
                        '</span>',
            controller : ['$scope', '$ionicModal', function ($scope, $ionicModal) {

                var PHOTO_TPL_URL = 'js/directives/photo/photo.html';

                $scope.groupedPhotos = groupPhotos($scope.photos);

                $scope.layout = layouts[$scope.photos.length];
                $scope.photoClicked = function (index) {
                    $ionicModal.fromTemplateUrl(PHOTO_TPL_URL, {
                        scope : angular.extend($scope.$new(), {
                            photoIndex : index
                        }),
                        animation : 'slide-in-up'
                    })
                        .then(function (m) {
                            var modalScope = m.scope;

                            modalScope.close = function () {
                                m.remove();
                            };

                            m.show();
                        });
                };

            }],
            scope : {
                photos : '=',
                user : '='
            }
        };
    });

'use strict';

angular
    .module('directives.photo')
    .directive('gallery', ['Loader', '$timeout', '$ionicSlideBoxDelegate', function GalleryDirective(
        Loader,
        $timeout,
        $ionicSlideBoxDelegate
    ) {

        var GALLERY_TPL_URL = 'js/directives/photo/gallery.html';
        var PHOTO_TPL_URL = 'js/directives/photo/photo.html';

        function groupPhotos(photos) {
            var groups = [];
            if (photos.length === 0) {
                return [];
            }
            // fake photo: addRemove button
            photos.push({
                _isAddRemove : true
            });
            angular.forEach(photos, function (photo, i) {
                if (i % 3 === 0) {
                    groups.push([]);
                }
                groups[Math.floor(i / 3)].push(photo);
            });
            photos.pop();
            return groups;
        }

        return {
            restrict : 'EA',
            replace : true,
            templateUrl : GALLERY_TPL_URL,
            controllerAs : 'ctrl',
            controller : ['PhotoUpload', 'PhotoManager', 'Photo', '$ionicModal', '$scope', '$q', function (
                PhotoUpload,
                PhotoManager,
                Photo,
                $ionicModal,
                $scope,
                $q
            ) {
                var ctrl = this;
                ctrl.numberSelected = 0;
                ctrl.selected = new Array($scope.photos.length);

                ctrl.groupedPhotos = groupPhotos($scope.photos);

                ctrl.onClick = function (index) {
                    if (index === $scope.photos.length) {
                        ctrl.addRemove();
                    } else {
                        ctrl.photoClicked(index);
                    }
                };

                ctrl.needFakeBlock = function (row) {
                    if (row === ctrl.groupedPhotos.length - 1) {
                        return ctrl.groupedPhotos[row].length === 1;
                    }
                    return false;
                };

                ctrl.select = function (index) {
                    ctrl.numberSelected = (ctrl.selected[index]) ? (ctrl.numberSelected - 1) : (ctrl.numberSelected + 1);
                    ctrl.selected[index] = !ctrl.selected[index];
                };

                ctrl.photoClicked = function (index) {
                    if (ctrl.numberSelected === 0) {
                        $ionicModal
                            .fromTemplateUrl(PHOTO_TPL_URL, {
                                scope : angular.extend($scope.$new(), {
                                    photoIndex : index
                                }),
                                animation : 'slide-in-up'
                            })
                            .then(function (m) {
                                var modalScope = m.scope;

                                modalScope.close = function () {
                                    m.remove();
                                };

                                modalScope.delete = function (photo) {
                                    var id = photo.id,
                                        index = $scope.photos.indexOf(photo),
                                        defer = $q.defer();

                                    PhotoManager.findRestmodResource(id).$destroy().$then(function () {
                                        // WORKAROUND for https://github.com/driftyco/ionic/issues/3431
                                        // Ionic Slide Box Breaks on splice an item
                                        $scope.photos.splice(index, 1);
                                        ctrl.groupedPhotos = groupPhotos($scope.photos);
                                        $timeout(function () {
                                            if ($scope.photos.length) {
                                                // shift to the next one or (if it was the last one) to the first one
                                                $ionicSlideBoxDelegate.slide(index % $scope.photos.length);
                                                $ionicSlideBoxDelegate.update();
                                            } else {
                                                m.remove();
                                            }
                                            defer.resolve();
                                        }, 1000);
                                        $scope.onDeletePhoto && $scope.onDeletePhoto([id]);
                                    });
                                    Loader.track(defer.promise);
                                };

                                m.show();
                            });

                    } else {
                        ctrl.select(index);
                    }
                };

                ctrl.uploadPhoto = PhotoUpload.uploadPhotoFactory(function (imageData) {
                    var promise = PhotoManager.createRestmodResource({
                        uploadedPicture : imageData,
                        restaurant : {
                            id : $scope.restaurantId
                        }
                    }).$then(function (photo) {
                        $scope.photos.push(photo);
                        ctrl.groupedPhotos = groupPhotos($scope.photos);
                        $scope.onUploadPhoto && $scope.onUploadPhoto(photo);
                    }).$asPromise();

                    Loader.track(promise);
                });

                ctrl.deletePhoto = function (photo) {
                    var id = photo.id,
                        promise = PhotoManager.findRestmodResource(id).$destroy().$then(function () {
                            $scope.photos.splice($scope.photos.indexOf(photo), 1);
                            ctrl.groupedPhotos = groupPhotos($scope.photos);
                            $scope.onDeletePhoto && $scope.onDeletePhoto([id]);
                        }).$asPromise();

                    Loader.track(promise);
                };

                ctrl.addRemove = function () {
                    if (ctrl.numberSelected === 0) {
                        ctrl.uploadPhoto();
                    } else {
                        var promises = [],
                            deleted = [],
                            toBeRemoved = [];
                        angular.forEach($scope.photos, function (photo, index) {
                            if (ctrl.selected[index]) {
                                promises.push(PhotoManager.findRestmodResource(photo.id).$destroy().$asPromise());
                                deleted.push(photo.id);
                                toBeRemoved.push(photo);
                            }
                        });

                        Loader.track($q.all(promises).then(function () {
                            angular.forEach(toBeRemoved, function (photo) {
                                $scope.photos.splice($scope.photos.indexOf(photo), 1);
                            });
                            ctrl.selected = new Array($scope.photos.length);
                            ctrl.groupedPhotos = groupPhotos($scope.photos);
                            $scope.onDeletePhoto && $scope.onDeletePhoto(deleted);
                        }));
                    }
                };
            }],
            scope : {
                photos : '=',
                restaurantId : '=',
                onUploadPhoto : '&',
                onDeletePhoto : '&'
            }
        };
    }]);

'use strict';

angular.module('directives.quickadd', []);

'use strict';

angular
    .module('directives.quickadd')
    .directive('quickadd', ['MyWishedHelper', 'MyReviewedHelper', 'ConfirmPopup', 'EventDispatcher', 'Analytics', function GalleryDirective(
        MyWishedHelper,
        MyReviewedHelper,
        ConfirmPopup,
        EventDispatcher,
        Analytics
    ) {
        var QUICKADD_TPL_URL = 'js/directives/quickadd/quickadd.html';

        quickAddDirectiveController.$inject = ['$scope'];
        return {
            restrict: 'E',
            replace: true,
            templateUrl: QUICKADD_TPL_URL,
            controllerAs: 'ctrl',
            controller: quickAddDirectiveController,
            scope: {
                restaurant : '=',
                extendedVersion : '=',
                page: '@'
            }
        };

        function quickAddDirectiveController ($scope) {
            var ctrl = this;
            ctrl.restaurantId = $scope.restaurant.restaurantId || $scope.restaurant.id;
            ctrl.toggleWish = toggleWish;
            ctrl.toggleReview = toggleReview;
            ctrl.isWishActive = isWishActive;
            ctrl.isReviewActive = isReviewActive;
            ctrl.quickAddDone = function () {
                $scope.$emit('quickadd.done');
            };


            function toggleWish (restaurantId) {
                isWishActive(restaurantId) ? deleteWish(restaurantId) : createWish(restaurantId);
            }

            function toggleReview (restaurantId) {
                isReviewActive(restaurantId) ? deleteReview(restaurantId) : createReview(restaurantId);
            }

            function deleteWish (restaurantId) {
                MyWishedHelper.remove(restaurantId)
                    .then(function(review){
                        Analytics.trackEvent('wish', 'delete', $scope.page);
                        EventDispatcher.broadcast('wish.delete', review);
                    });
            }

            function createWish (restaurantId) {
                MyWishedHelper.add(restaurantId)
                    .then(function(wish){
                        Analytics.trackEvent('wish', 'create', $scope.page);
                        EventDispatcher.broadcast('wish.create', wish);
                    });
            }

            function createReview (restaurantId) {
                MyReviewedHelper.add(restaurantId)
                    .then(function(review){
                        Analytics.trackEvent('review', 'create', $scope.page);
                        EventDispatcher.broadcast('review.create', review);
                    });
                MyWishedHelper.removeLocal(restaurantId);
            }

            function deleteReview (restaurantId) {
                ConfirmPopup.create('popup.restaurant_delete.title','popup.restaurant_delete.text')
                    .then(function (answer) {
                        answer && MyReviewedHelper.remove(restaurantId)
                            .then(function(review){
                                Analytics.trackEvent('review', 'delete', $scope.page);
                                EventDispatcher.broadcast('review.delete', review);
                            });
                    });
            }

            function isWishActive (restaurantId) {
                return MyWishedHelper.get(restaurantId);
            }

            function isReviewActive (restaurantId) {
                return MyReviewedHelper.get(restaurantId);
            }

        }

    }]);

'use strict';

angular
    .module('directives.review', []);

'use strict';

angular
    .module('directives.review')
    .directive('reviewTagsProperty', ['TagModal', 'TagManager', 'ReviewManager', '$log', function reviewTagsPropertyDirective(
        TagModal,
        TagManager,
        ReviewManager,
        $log
    ) {

        return {
            restrict : 'E',
            replace : true,
            templateUrl : 'js/directives/review/review-tags-property.html',
            scope : {
                review : '=',
                field: '=',
                visible: '@'
            },
            link: function (scope) {
                $log.debug('[REVIEW_TAGS_PROPERTY_DIRECTIVE] Controller', scope.field.title);
                scope.canCreateNewTags = scope.field.canCreateNewTags || false;
                scope.edit = edit;

                return scope;

                function edit () {
                    $log.debug('[REVIEW_TAGS_PROPERTY_DIRECTIVE] Edit');
                    TagModal.create(scope.field.groupId, scope.review, scope.canCreateNewTags)
                        .then(function(tags){
                            ReviewManager.replaceTagsWithGroupId(scope.review, tags, scope.field.groupId);
                            ReviewManager.updateReviewTagFields(scope.review);
                            scope.review.$save();
                        });
                }

            }

        };


    }]);

'use strict';

angular
    .module('directives.review')
    .directive('reviewTextProperty', ['InputTextModal', 'TextareaModal', 'ReviewManager', '$log', function reviewTextPropertyDirective(
        InputTextModal,
        TextareaModal,
        ReviewManager,
        $log
    ) {

        return {
            restrict : 'E',
            replace : true,
            templateUrl : 'js/directives/review/review-text-property.html',
            scope : {
                review : '=',
                field: '=',
                textarea: '@'
            },
            link: function (scope) {
                $log.debug('[REVIEW_TEXT_PROPERTY_DIRECTIVE] Controller', scope.field.title);
                scope.edit = edit;

                var modal = scope.textarea === 'true' ? TextareaModal : InputTextModal;

                function edit () {
                    $log.debug('[REVIEW_TEXT_PROPERTY_DIRECTIVE] Edit');
                    var fieldName = scope.field.propertyName;
                    var title = scope.field.title;
                    modal.create(scope.review[fieldName], title)
                        .then(function(response){
                            $log.debug('[CONTROLLER] Set my review.' + fieldName
                                + ' with value ' + response);
                            scope.review[fieldName] = response;
                            scope.review.$save();
                        });
                }

            }

        };


    }]);

'use strict';

angular
    .module('directives.tag', []);


'use strict';

angular
    .module('directives.tag')
    .directive('tagList', function TagListDirective() {

        var ADD_TAGS_TPL_URL = 'js/directives/tag/add-tags.html';
        var TAG_LIST_TPL_URL = 'js/directives/tag/tag-list.html';

        return {
            restrict : 'EA',
            replace : true,
            templateUrl : TAG_LIST_TPL_URL,
            controllerAs : 'ctrl',
            controller : ['$scope', 'TagManager', 'Loader', '$ionicModal', 'Security', function ($scope, TagManager, Loader, $ionicModal, Security) {

                var ctrl = this;

                $scope.$watchCollection('tags', groupTags);

                groupTags();

                function groupTags(){
                    $scope.groupedTags = _.groupBy($scope.tags, function (tag) {
                        return tag.groupId;
                    });
                }

                ctrl.editTags = function () {
                    if(!$scope.enableEdit){
                        return;
                    }
                    if (!$scope.tags) {
                        $scope.tags = [];
                    }

                    Loader.track(
                        TagManager.findAll({
                            user : Security.user.id
                        })
                        .then(function(tags){
                            return $ionicModal.fromTemplateUrl(ADD_TAGS_TPL_URL, {
                                scope : angular.extend($scope.$new(), {
                                    selectedTags : $scope.tags,
                                    tags : tags
                                }),
                                animation : 'slide-in-up'
                            })
                            .then(function (m) {
                                var modalScope = m.scope;

                                modalScope.done = function () {
                                    m.remove();
                                    $scope.onAfterEdit && $scope.onAfterEdit($scope.tags);
                                };
                                m.show();
                            });

                        })
                    );

                };

            }],
            compile: function(element, attrs){
                attrs.buttonClass = attrs.buttonClass || '';
                attrs.listClass = attrs.listClass || '';
            },
            scope : {
                tags : '=',
                enableEdit : '=',
                showButton : '=',
                onAfterEdit : '&',
                buttonClass : '=',
                listClass : '='
            }
        };
    });

'use strict';

angular
    .module('directives.tag')
    .directive('tagSelector', ['$log', function TagSelectorDirective(
        $log
    ) {

        var TAG_SELECTOR_TPL_URL = 'js/directives/tag/tag-selector.html';

        function removeItem(array, copy) {
            var toBeRemoved = _.find(array, function (item) {
                return item.id === copy.id;
            });
            array.splice(array.indexOf(toBeRemoved), 1);
        }

        return {
            restrict : 'EA',
            replace : true,
            templateUrl : TAG_SELECTOR_TPL_URL,
            controller : ['$scope', 'TagManager', 'Loader', function ($scope, TagManager, Loader) {


                $scope.$watchCollection('tags', groupTags);

                function groupTags(){

                    $scope.grouped = angular.copy($scope.tags);

                    // sort highlight=true first
                    $scope.grouped = _.sortBy($scope.grouped, function (tag) {
                        return tag.highlight ? 0 : 1;
                    });

                    $scope.grouped = _.groupBy($scope.grouped, function (tag) {
                        return tag.groupId;
                    });

                    $scope.newItems = [];
                    angular.forEach($scope.grouped, function (group, groupId) {
                        group.groupName = group[0].groupName;
                        group.groupId = groupId;
                        $scope.newItems[groupId] = {
                            focused : false,
                            name : ''
                        };
                    });

                }

                function findTag(collection, tagName, groupId) {
                    $log.debug('[TAG_SELECTOR] Find Tag');
                    return _.find(collection, function (item) {
                        if (!item) {
                            return false;
                        }
                        return item.name === tagName && item.groupId === parseInt(groupId);
                    });
                }

                function addTagToLists(item) {
                    $log.debug('[TAG_SELECTOR] Add tag to lists');
                    // add tags to tags list only if it is not present yet
                    if (!findTag($scope.selectedTags, item.name, item.groupId)) {
                        $scope.selectedTags.push(item);
                    }
                    var groupedTags = $scope.tags[item.groupId];

                    if (!findTag(groupedTags, item.name, item.groupId)) {
                        groupedTags.$scope.push(item);
                    }
                }

                $scope.isActive = function (tag) {
                    var toBeSelected = _.find($scope.selectedTags, function (selectedTag) {
                        return selectedTag.id === tag.id;
                    });
                    return toBeSelected !== undefined;
                };

                $scope.keyup = function (event, group) {
                    if (event.keyCode === 13) {
                        $scope.addTag(group);
                        event.target.blur();
                        $scope.newItems[group.groupId].focused = false;
                    }
                };


                $scope.addTag = function (group) {
                    $log.debug('[TAG_SELECTOR] Add Tag');
                    var groupedItems = $scope.newItems[group.groupId];
                    if (!groupedItems) {
                        return;
                    }
                    var newTag = groupedItems.name;

                    if (newTag !== '') {
                        Loader.track(
                            TagManager.searchRestmodCollection({
                                name : newTag,
                                groupId : group.groupId
                            })
                                .$then(function (items) {
                                    var tag = findTag(items, newTag, group.groupId);
                                    if (!tag) {
                                        return TagManager.createRestmodResource({
                                            name : newTag,
                                            groupName : group.groupName,
                                            groupId : group.groupId
                                        }).$then(addTagToLists);
                                    } else {
                                        addTagToLists(tag);
                                    }
                                }).$asPromise()
                        );
                    }
                    $scope.newItems[group.groupId].focused = false;
                    $scope.newItems[group.groupId].name = '';
                };

                $scope.select = function (tag) {
                    if ($scope.isActive(tag)) {
                        removeItem($scope.selectedTags, tag);
                    } else {
                        $scope.selectedTags.push(tag);
                    }
                };
            }],
            scope : {
                tags : '=',
                enableAdd : '=',
                selectedTags : '='
            }
        };
    }]);

'use strict';

angular
    .module('directives.user', [
        'services.security',
        'services.utility',
        'entities.user'
    ]);

'use strict';

angular
    .module('directives.user')
    .directive('ionQuickfollow', ['$http', 'User', 'Analytics', 'Loader', 'MyLeadersHelper', 'Security', function(
        $http,
        User,
        Analytics,
        Loader,
        MyLeadersHelper,
        Security
    ){
        return {
            restrict: 'E',
            scope: {
                'user': '=',
                'me': '=',
                'postFollowHook': '=',
                'postUnfollowHook': '='
            },
            template: ['<span class="icon color-tastd-green"',
                          'ng-class="ctrl.isFollowed()? \'icon-circle-check\' : \'icon-stroke-add-gurus\'"',
                          'ng-hide="ctrl.isMe()" ng-click="ctrl.toggle($event)">',
                       '</span>'].join(''),

            controllerAs : 'ctrl',
            controller : ['$scope', function($scope){
                var ctrl = this;

                ctrl.toggle = function($event){
                    $event.stopPropagation();
                    $event.cancelBubble = true;
                    $event.returnValue = false;

                    var followed = MyLeadersHelper.get($scope.user.id);

                    var toggleFn = followed ?
                                    MyLeadersHelper.remove :
                                    MyLeadersHelper.add;

                    Analytics.trackEvent('user', followed ? 'unfollow' : 'follow');

                    Loader.track(toggleFn($scope.user.id).then(function(){
                        if(followed && $scope.postUnfollowHook){
                            $scope.postUnfollowHook($scope.user);
                        }
                        if(!followed && $scope.postFollowHook){
                            $scope.postFollowHook($scope.user);
                        }
                    }));

                };

                ctrl.isMe = function(){
                    return Security.user.id === $scope.user.id;
                };

                ctrl.isFollowed = function(){
                    return MyLeadersHelper.get($scope.user.id);
                };

            }]
        };
    }]);

'use strict';

angular
    .module('directives.user')
    .directive('ionUserAvatar', ['$parse', 'gravatarService', function IonUserAvatarDirective($parse, gravatarService) {
        return {
            restrict: 'EA',
            replace: true,
            scope: {
                user: '='
            },
            template: '<img class="user-avatar" ng-src="{{ getAvatarSrc() }}"/>',
            controller : ['$scope', function($scope){
                $scope.getAvatarSrc = function(){
                    if(!$scope.user) {
                        return '';
                    }else if (!$scope.user.avatar){
                        return gravatarService.url($scope.user.email || $scope.user.getFakeEmail());
                    }else{
                        return $scope.user.avatar;
                    }
                };
            }]
        };
    }]);

'use strict';

angular
    .module('directives.user')
    .directive('ionUserGeoscore', function IonUserGeoscoreDirective() {
        return {
            restrict: 'EA',
            replace: true,
            scope: {
                user: '=user',
                geoname: '='
            },
            template: '<span class="ion-user-score"><span>{{ ::score }}</span><i class="icon-crown"></i></span>',
            link: function(scope) {
                // there should be no need for a $watch since the list
                // gets recreated anyway when the geoname changes
                if (scope.geoname) {
                    var geoScore = _.find(scope.user.geoscores, function(x) {
                        return parseInt(x.geoname.id) === parseInt(scope.geoname.id);
                    });
                    if (geoScore) {
                        scope.score = geoScore ? geoScore.score : 0;
                    }
                }
            }
        };
    });

'use strict';

angular
    .module('directives.user')
    .directive('ionUserScore', function IonUserScoreDirective() {
        return {
            restrict: 'EA',
            replace: true,
            scope: {
                user: '=user'
            },
            template: '<span class="ion-user-score"><span>{{ user.score }}</span><i class="icon-crown"></i></span>'
        };
    });

'use strict';

angular
    .module('directives.user')
    .directive('userFollowButton', function UserFollowButtonDirective() {
        var template = '<div ng-hide="ctrl.hideMe()" class="rounded-button ' +
            '{{ ctrl.isMyLeader() ? \'active\' : \'\' }}"' +
            'title="{{ctrl.isMyLeader() ? \'Following\' : \'Follow\' }}">' +
            '<i class="icon {{ctrl.isMyLeader() ? \'ion-checkmark-round\' : \'\' }}"></i>' +
            ' {{ctrl.isMyLeader() ? \'Following\' : \'+ Follow\' }}' +
            '</div>';

        return {
            restrict: 'EA',
            replace: true,
            scope : {
                user : '=user'
            },
            template: template,
            controllerAs: 'ctrl',
            controller: ['$scope', 'MyLeadersHelper', 'Security', function($scope, MyLeadersHelper, Security){
                var ctrl = this;
                ctrl.hideMe = function() {
                    if (!$scope.user) {
                        return true;
                    }

                    return Security.user.id === $scope.user.id;
                };
                ctrl.isMyLeader = function(){
                    if (!$scope.user) {
                        return false;
                    }
                    return MyLeadersHelper.get($scope.user.id);
                };
            }]
        };
    });

'use strict';

angular
    .module('directives.user')
    .directive('userSignature', ['Security', function UserSignatureDirective(
        Security
    ) {

        var USER_SIGNATURE_TPL_URL = 'js/directives/user/user-signature.html';

        return {
            restrict : 'EA',
            replace : true,
            templateUrl : USER_SIGNATURE_TPL_URL,
            scope : {
                user : '=',
                lightTheme : '=',
                hideQuickFollow : '=',
                hideHeadline : '=',
                postFollowHook : '=',
                postUnfollowHook : '=',
                currentGeoname : '='
            },
            controller : ['$scope', function($scope){
                $scope.me = Security.user;
            }]
        };
    }]);

'use strict';

angular
    .module('directives.wall', [
        'entities.review'
    ]);

'use strict';

angular
    .module('directives.wall')
    .directive('wall', function WallDirective() {

        var WALL_TPL_URL = 'js/directives/wall/wall.html';

        return {
            restrict : 'E',
            replace : true,
            templateUrl : WALL_TPL_URL,
            controllerAs : 'ctrl',
            controller : ['ReviewManager', '$scope', function (
                ReviewManager,
                $scope
            ) {
                var ctrl = this;

                ctrl.loadMore = function () {
                    return $scope.reviews.$fetchMore().$asPromise()
                        .finally(function () {
                            $scope.$broadcast('scroll.infiniteScrollComplete');
                        });
                };

                return ctrl;
            }],
            scope : {
                me: '=',
                page: '@',
                reviews: '=',
                hideSignature: '='
            }
        };

    });


'use strict';

angular.module('directives.security', []);

'use strict';

angular
    .module('directives.security')

    .directive('hasRoles', ['Security', 'ngIfDirective', function HasRolesDirective(Security, ngIfDirective) {
        var ngIf = ngIfDirective[0];

        return {

            transclude: ngIf.transclude,
            priority: ngIf.priority,
            terminal: ngIf.terminal,
            restrict: ngIf.restrict,
            link: function($scope, $element, $attr) {
                var roles = $attr.hasRoles.split(/\ +/);
                $attr.ngIf = function() {
                    // if Security.user.roles contains roles
                    return (_.difference(roles, Security.user.roles).length === 0);
                };

                ngIf.link.apply(ngIf, arguments);
            }
        };

    }]);



'use strict';

angular.module('directives.restaurant', []);

'use strict';

angular
    .module('directives.restaurant')
    .directive('restaurant', function RestaurantDirective() {

        return {
            restrict : 'E',
            templateUrl : 'js/directives/restaurant/restaurant.html',
            controllerAs : 'ctrl',
            controller : ['$scope', 'Loader', '$state', 'MyWishedHelper', 'MyReviewedHelper', function (
                $scope,
                Loader,
                $state,
                MyWishedHelper,
                MyReviewedHelper
            ) {
                var ctrl = this;

                $scope.$on('quickadd.done', function(){
                    $scope.showQuickadd = false;
                });

                // item can be a restaurant or a review: everything will work the same in this directive,
                // but the restaurant id that can be item.restaurantId (review) or item.id (restaurant)
                $scope.restaurantId = $scope.item.restaurantId || $scope.item.id;
                $scope.restaurant = $scope.item.restaurant || $scope.item;

                ctrl.onClick = function () {
                    if (!$scope.preventSelect) {
                        $scope.onClick() || $state.go('restaurantView', {
                                restaurantId : $scope.restaurantId
                            });
                    }
                };

                ctrl.toggleQuickadd = function ($event) {
                    $scope.showQuickadd = !$scope.showQuickadd;
                    $event.stopPropagation();
                };

                ctrl.getIconClass = function () {
                    return MyWishedHelper.get($scope.restaurantId) ? 'icon-bookmark'
                            : (MyReviewedHelper.get($scope.restaurantId)? 'icon-heart' : 'icon-plus');
                };

                ctrl.getBackgroundImageString = function () {
                    if ($scope.showFallbackPicture) {
                        return 'img/default_restaurant.png';
                    }
                    if ($scope.item.thumb) {
                        return $scope.item.thumb;
                    }
                    return $scope.item.picture;
                }

            }],
            scope : {
                item : '=',
                showAddress : '=',
                hideQuickadd : '=',
                showFallbackPicture : '=',
                preventSelect : '=',
                fromWeb: '@',
                onClick : '&',
                distance : '=',
                page: '@'
            }
        };
    });


'use strict';

angular
    .module('directives.restaurant')
    .directive('restaurantList', function RestaurantListDirective() {

        return {
            restrict : 'E',
            templateUrl : 'js/directives/restaurant/restaurant-list.html',
            controllerAs : 'ctrl',
            scope : {
                list: '=',
                page: '@',
                showAddress: '=',
                hideQuickadd: '=',
                showFallbackPicture: '=',
                preventSelect: '=',
                reorder: '=',
                geoname: '='
            }
        };
    });


'use strict';

angular
    .module('directives.restaurant')
    .directive('restaurantEdit', ['AddressModal', 'InaccurateAddressPopup', '$q', 'PhotoUpload', 'GeonameManager', 'GeonameModal', 'ValidatorManager', '$log', function RestaurantEditDirective(
        AddressModal,
        InaccurateAddressPopup,
        $q,
        PhotoUpload,
        GeonameManager,
        GeonameModal,
        ValidatorManager,
        $log
    ) {
        return {
            restrict : 'E',
            replace : true,
            scope : {
                restaurant : '=',
                cuisines : '=',
                form : '=',
                hidePhoto : '='
            },
            templateUrl : 'js/directives/restaurant/restaurant-edit.html',
            controller : ['$scope', function ($scope) {
                var ctrl = this;

                // shown when the form is invalid
                $scope.form.execIfValid = function (callback) {
                    ValidatorManager.validate($scope.restaurantEditForm, $scope)
                        .then(function(){
                            callback()
                        });
                };

                // called on blur to add http:// to the field
                ctrl.prependProtocol = function () {
                    /*
                    var regexp = /^((http|https):\/\/)/;
                    if ($scope.restaurant.website.length > 0 && !regexp.test($scope.restaurant.website)) {
                        $scope.restaurant.website = "http://" + $scope.restaurant.website;
                    }*/
                };

                ctrl.getPhotoStyle = function () {
                    return $scope.restaurant.uploadedPicture ?
                        {'background-image': 'url(data:image/jpg;base64,' + $scope.restaurant.uploadedPicture + ')'} :
                        {'background-image': 'url(' + $scope.restaurant.picture + ')' };
                };

                /**
                 * Choose an address for a new restaurant
                 */
                ctrl.address = function (geoname, addressString) {
                    AddressModal.create(geoname, addressString)
                        .then(function (address) {
                            //
                            if (address.streetNumber
                                || address.subLocalityLevel4
                                || address.subPremise
                                || address.intersection) {
                                return setResult(address);
                            }
                            return InaccurateAddressPopup.create(address)
                                .then(setResult);

                        });
                };

                function setResult(address) {
                    if (address.refused) {
                        return ctrl.address($scope.restaurant.geoname, address.shortAddress);
                    }
                    $log.debug('[RESTAURANT_EDIT] Set address result', address);
                    $scope.restaurant.lat = address.lat;
                    $scope.restaurant.lng = address.lng;
                    $scope.restaurant.address = address.shortAddress;
                }

                /**
                 * Choose a city for a new restaurant
                 */
                ctrl.city = function () {
                    changeGeoname().then(function (geoname) {
                        $scope.restaurant.geoname = geoname;
                    });
                };

                ctrl.uploadPhoto = PhotoUpload.uploadPhotoFactory(function (imageData) {
                    $scope.restaurant.uploadedPicture = imageData;
                });
            }],
            controllerAs : 'ctrl'
        };

        function changeGeoname() {
            var deferred = $q.defer();
            GeonameModal.create().then(function(geoname){
                deferred.resolve(geoname);
            });

            return deferred.promise;
        }

    }]);


'use strict';

angular
    .module('services.analytics.AnalyticsFactory',[])

    // https://github.com/danwilson/google-analytics-plugin

    .factory('Analytics', ['$log', function AnalyticsFactory(
        $log
    ) {

        var Analytics = {
            trackEventWithParams: trackEventWithParams,
            startTrackerWithId: startTrackerWithId,
            setUserId: setUserId,
            trackView: trackView,
            trackEvent: trackEvent,
            trackException: trackException,
            trackFilters: trackFilters,
        };

        return Analytics;


        function trackEventWithParams (category, action, params) {
            var label = '';
            for(var property in params) {
                label += '/' + property;
            }
            if (typeof window.analytics !== 'undefined') {
                window.analytics.trackEvent(category, action, label);
            }
        }

        function startTrackerWithId (id){
            if (typeof window.analytics !== 'undefined') {
                window.analytics.startTrackerWithId(id);
            }
        }

        function setUserId (userId){
            if (typeof window.analytics !== 'undefined') {
                window.analytics.setUserId(userId);
            }
        }

        function trackView (title){
            $log.debug('[ANALYTICS] Track view', title);
            if (typeof window.analytics !== 'undefined') {
                window.analytics.trackView(title);
            }
        }

        /**
         * @param category (The name you supply for the group of objects you want to track)
         * @param action (A string that is uniquely paired with each category, the type of user interaction)
         * @param opt_label (An optional string to provide additional dimensions to the event data)
         * @param opt_value (An integer that you can use to provide numerical data about the user event)
         * @param opt_noninteraction (A boolean that when set to true, indicates that the event hit will not be used in bounce-rate calculation)
         */
        function trackEvent (){
            $log.debug('[ANALYTICS] Track event', arguments);
            if (typeof window.analytics !== 'undefined') {
                window.analytics.trackEvent.apply(this, arguments);
            }
        }

        function trackException(){
            if (typeof window.analytics !== 'undefined') {
                window.analytics.trackException.apply(this, arguments);
            }
        }

        function trackFilters(stateName, result, MIN_COST, MAX_COST) {
            var labels = [];
            // Tags
            if (result.tags.length === 1) {
                labels.push('single_tag');
            } else if (result.tags.length > 1) {
                labels.push('multiple_tags');
            }
            // Price
            if (result.minCost !== MIN_COST || result.maxCost !== MAX_COST) {
                labels.push('price');
            }
            // cuisines
            if (result.cuisines.length === 1) {
                labels.push('single_cuisine');
            } else if (result.cuisines.length > 1) {
                labels.push('multiple_cuisines');
            }

            if (labels.length > 0) {
                Analytics.trackEvent(stateName, 'filters', labels.join('_and_'));
            }
        }

    }]);

'use strict';

angular
    .module('services.analytics',[
        'services.analytics.AnalyticsFactory'
    ]);

'use strict';

angular
    .module('services.cache', []);

'use strict';

angular
    .module('services.cache')
    .factory('Cache', ['$http', 'Config', 'Security', '$q', function CacheFactory($http, Config, Security, $q) {

        return function (helper) {
            var items,
                collection = {};

            function refresh() {
                return $http.get(Config.apiUrl() + helper.url, {
                    params : {
                        user : Security.user.id
                    }
                }).then(function (resp) {
                    items = resp.data[helper.collectionName];
                    return items;
                });
            }


            // this function has to be called once before using the service
            function load() {
                if (items) {
                    var d = $q.defer();
                    return d.resolve(items);
                }
                return refresh();
            }

            function _getItem(id) {
                if (collection[id]) {
                    var d = $q.defer();
                    d.resolve(collection[id]);
                    return d.promise;
                }
                return helper.getItem(id);
            }

            function outOfSyncFallback(id, toBeAdded) {
                return function () {
                    return refresh().then(function () {
                        var found = get(id);
                        if (found !== toBeAdded) {
                            // TODO: show error
                        } else {
                            if (!toBeAdded) {
                                // when item is removed, its model is deleted
                                delete collection[id];
                            }
                        }
                    });
                };
            }

            function addModelToCollection(model) {
                var  id = helper.getId(model);
                collection[id] = model;

                return model;
            }

            // add and remove execute the operation remotely too
            function add(itemOrId, options) {
                var saveOrAdd, id;
                if (typeof itemOrId === 'object') {
                    id = helper.getId(itemOrId);
                    saveOrAdd = save(itemOrId);
                } else {
                    id = itemOrId.toString();
                    saveOrAdd = helper.create(id, options);
                    saveOrAdd.then(function(model){
                        helper.onAdd && helper.onAdd(id);
                        return model;
                    });
                }
                items.push(id);
                saveOrAdd
                    .then(addModelToCollection)
                    .catch(outOfSyncFallback(id, true));

                return saveOrAdd;
            }

            function save(model) {
                return model.$save().$asPromise();
            }

            function destroyAndUpdateCache(item) {
                var id = helper.getId(item);
                return item.$destroy().$then(function () {
                    items.splice(_.indexOf(items, id), 1);
                    delete collection[id];
                }, outOfSyncFallback(id, false))
                    .$asPromise();
            }

            function remove(itemOrId) {
                if (typeof itemOrId === 'object') {
                    return destroyAndUpdateCache(itemOrId);
                }
                var id = itemOrId.toString();
                return _getItem(id).then(
                    function(model){
                        if(model){
                        return destroyAndUpdateCache(model);
                        }
                        else{
                            return outOfSyncFallback(id, false)();
                        }
                    });
            }

            function get(itemId) {
                var id = itemId.toString();
                return _.indexOf(items, id) !== -1;
            }

            function getAll() {
                return items;
            }

            // just client side
            function addLocal(itemId) {
                var id = itemId.toString();
                if (_.indexOf(items, id) === -1) {
                    items.push(id);
                }
                return;
            }

            // just client side
            function removeLocal(itemId) {
                var id = itemId.toString();
                var i = _.indexOf(items, id);
                if (i !== -1) {
                    items.splice(i, 1);
                }
                return;
            }



            return {
                add : add,
                remove : remove,
                get : get,
                getAll : getAll,
                addLocal : addLocal,
                removeLocal : removeLocal,
                refresh : refresh,
                load : load
            };
        };

    }]);


'use strict';

angular
    .module('services.cache')
    .factory('MyCache', ['$q', function MyCacheFactory($q) {

        var map = {};

        return {

            get : function(key, resolver){
                if(map[key]){
                    var defer = $q.defer();
                    defer.resolve(map[key]);
                    return defer.promise;
                } else {
                    return resolver().then(function(value){
                        map[key] = value;
                        return value;
                    });
                }
            },

            set : function(key, value){
                map[key] = value;
            },

            invalidate : function(key){
                delete map[key];
            }

        };

    }]);


'use strict';

angular
    .module('services.cache')
    .factory('MyLeadersHelper', ['Cache', 'User', 'Security', '$http', 'UserManager', function MyLeadersHelperFactory(
        Cache,
        User,
        Security,
        $http,
        UserManager
    ) {

        function add(id) {
            return UserManager.findRestmodResource(id).$then(function (user) {
                return user.followers.$create({
                    id : Security.user.id
                });
            }).$asPromise();
        }

        function getItem(id) {
            return UserManager.findRestmodResource(id).$asPromise().then(function (user) {

                return user.followers.$search({
                    id : Security.user.id
                }).$asPromise();
            });
        }


        var helper = {
            url : '/leaders/ids',
            collectionName : 'leaders',
            add : add,
            getItem : getItem
        };


        var cache = new Cache(helper);


        // overriding add and remove methods of cache

        cache.add = function (itemId) {
            var id = itemId.toString();
            return helper.add(id).then(function () {
                cache.addLocal(id);
            }).catch(function(){
                return cache.refresh().then(function () {
                    if (!cache.get(id)) {
                        // TODO: show error
                    }
                });
            });
        };

        cache.remove = function (itemId) {
            var id = itemId.toString();

            var resourceUrl = Security.user.leaders.$collection().$urlFor({}) + '/' + id;

            return $http.delete(resourceUrl).then(function() {
                cache.removeLocal(id);
            }).catch(function(){
                return cache.refresh().then(function(){
                    if(cache.get(id)){
                        // TODO: show error
                    }
                    else{
                        cache.removeLocal(id);
                    }
                });
            });
        };


        return cache;
    }]);

'use strict';

angular
    .module('services.cache')
    .factory('MyReviewedHelper', ['Cache', 'Review', 'Security', 'MyWishedHelper', function MyReviewedHelperFactory(
        Cache,
        Review,
        Security,
        MyWishedHelper
    ) {

        function onAdd(id) {
            MyWishedHelper.removeLocal(id);
        }

        function create(id) {
            return Review.$create({
                restaurant : {
                    id : id
                }
            }).$asPromise();
        }

        function getId(item) {
            return item.restaurant.id.toString();
        }

        function getItem(id) {
            return Review.$search({
                restaurant : id,
                user : Security.user.id
            }).$asPromise().then(function (items) {
                return items[0];
            });
        }


        var helper = {
            url : '/restaurants/reviewed/ids',
            collectionName : 'restaurants',
            onAdd : onAdd,
            create : create,
            getId : getId,
            getItem : getItem
        };

        return new Cache(helper);
    }]);


'use strict';

angular
    .module('services.cache')
    .factory('MyWishedHelper', ['Cache', 'Wish', 'Security', function MyWishedHelperFactory(Cache, Wish, Security) {

        function create(id, opt) {
            return Wish.$create(angular.extend({
                restaurant : {
                    id : id
                }
            }, (opt || {})))
                .$asPromise();
        }

        function getId(item) {
            return item.restaurant.id.toString();
        }

        function getItem(id) {
            return Wish.$search({
                restaurant : id,
                user : Security.user.id
            }).$asPromise().then(function (items) {
                return items[0];
            });
        }


        var helper = {
            url : '/restaurants/wished/ids',
            collectionName : 'restaurants',
            create : create,
            getId : getId,
            getItem : getItem
        };

        return new Cache(helper);
    }]);


angular.module('services.config', [
    'services.config.ConfigProvider',
    'services.config.PARAMETERS'
]);

'use strict';

angular
    .module('services.config.ConfigProvider', ['services.config.PARAMETERS'])
    .provider('Config', ['PARAMETERS', function ConfigProviderFactory(PARAMETERS) {

        var ConfigProvider = this;

        ConfigProvider.PARAMETERS = PARAMETERS;

        ConfigProvider.apiUrl  = apiUrl;
        ConfigProvider.authUrl = authUrl;
        ConfigProvider.publicUrl = publicUrl;
        ConfigProvider.authTokenHeader = authTokenHeader;
        ConfigProvider.env = env;
        ConfigProvider.isDev = isDev;
        ConfigProvider.facebook = facebook;
        ConfigProvider.serverUrl = serverUrl;

        ConfigProvider.$get = function () {
            return {
                PARAMETERS : ConfigProvider.PARAMETERS,
                apiUrl  : apiUrl,
                publicUrl: publicUrl,
                authUrl : authUrl,
                authTokenHeader : authTokenHeader,
                env : env,
                isDev : isDev,
                facebook : facebook,
                serverUrl : serverUrl
            };
        };

        function facebook() {
            return PARAMETERS.FACEBOOK;
        }

        function serverUrl() {
            var url = PARAMETERS.SERVER_URL;

            if(arguments[0]) {
                return url + arguments[0];
            }

            return url;
        }

        function isDev() {
            return env() === 'dev';
        }

        function env() {
            return PARAMETERS.ENV;
        }

        function apiUrl() {
            var url = PARAMETERS.SERVER_URL + PARAMETERS.API_PREFIX;

            if(arguments[0]) {
                return url + arguments[0];
            }

            return url;
        }

        function authUrl() {
            return PARAMETERS.SERVER_URL + PARAMETERS.AUTH_PREFIX;
        }

        function publicUrl () {
            return PARAMETERS.SERVER_URL + PARAMETERS.PUBLIC_API_PREFIX;
        }

        function authTokenHeader() {
            return PARAMETERS.AUTH_TOKEN_HEADER;
        }

        return ConfigProvider;
    }]);

'use strict';

angular
    .module('services.config.PARAMETERS', [])
    .constant('PARAMETERS', window.PARAMETERS);

'use strict';

angular
    .module('services.contacts', [
        'services.storage'
    ]);

'use strict';

angular
    .module('services.contacts')
    .factory('ContactManager', ['$q', '$cordovaContacts', '$window', '$log', function ContactManagerFactory(
        $q,
        $cordovaContacts,
        $window,
        $log
    ) {

        return {
            findAll: findAll,
            findUniqueEmails: findUniqueEmails
        };

        function findAll() {
            $log.debug('[CONTACT_MANAGER] Find all');
            var promise;
            if (window.cordova) {
                promise = $cordovaContacts.find({filter: '', multiple: true});
                return promise.then(unwrapNestedEmails);
            }

            var deferred = $q.defer();
            var contacts = getFakeContacts();
            deferred.resolve(contacts);
            promise = deferred.promise;
            return promise.then(unwrapNestedEmails);
        }

        function unwrapNestedEmails(contacts) {
            $log.debug('[CONTACT_MANAGER] Unwrap nested emails');
            var emails = [];
            angular.forEach(contacts, function(c) {
                angular.forEach(c.emails, function(e) {
                    var item = {
                        name: c.name.formatted,
                        familyName: c.name.familyName,
                        email: e.value
                    };
                    emails.push(item);
                });
            });
            return emails;
        }

        function findUniqueEmails () {
            var deferred = $q.defer();
            findAll().then(function(contacts){
                var results = [];
                _.each(contacts, function(contact){
                    results.push(contact.email);
                });
                results = _.uniq(results);
                deferred.resolve(results);
            });
            return deferred.promise;
        }

        function getFakeContacts() {
            return [
                {name: {formatted: '', familyName: ''}, emails: [{value: 'n@n.com'}, {value: 'john@gmail.com'}]},
                {name: {formatted: 'Dragon Ball', familyName: 'Ball'}, emails: [{value: 'dragon1@ball.com'}, {value: 'jack@gmail.com'}]},
                {name: {formatted: 'Mr Smith', familyName: 'Smith'}},
                {name: {formatted: 'Mr Smith', familyName: 'Smith'}, emails: [{value: 'mrsmith@gmail.com'}]},
                {name: {formatted: 'User 1', familyName: 'Smith'}, emails: [{value: 'user@mail.com'}]},
                {name: {formatted: 'User 2', familyName: 'Smith'}, emails: [{value: 'user2@mail.com'}]},
                {name: {formatted: 'User 3', familyName: 'Smith'}, emails: [{value: 'user3@mail.com'}]},
                {name: {formatted: 'Jacopo', familyName: 'Ghidoni'}, emails: [{value: 'jacopo@tastdapp.com'}]},
                {name: {formatted: 'Duplicated', familyName: 'Jappo'}, emails: [{value: 'jacopo@tastdapp.com'}]},
                {name: {formatted: 'Matteo', familyName: 'Orioli'}, emails: [{value: 'oriodesign@gmail.com'}]},
                {name: {formatted: 'Hello world'}, emails: [{value: 'hello@world.com'}]},
                {name: {formatted: 'Hello world 2'}, emails: [{value: 'hello@world.com'}]},
                {name: {formatted: 'Est7'}, emails: [{value: 'est.zanon@gmail.com'}]},
                {name: {formatted: 'Pedro'}, emails: [{value: 'and.pedroni@gmail.com'}]}
            ];
        }

    }]);

'use strict';

angular.module('services.event', []);

'use strict';

angular
    .module('services.event')
    .factory('EventDispatcher', ['$rootScope', 'TastdEvent', function EventDispatcherFactory($rootScope, TastdEvent) {

        var EventDispatcher = {
            broadcast: broadcast,
            event: TastdEvent
        };

        function broadcast () {
            $rootScope.$broadcast.apply($rootScope, arguments);
        }

        return EventDispatcher;
    }]);

'use strict';

angular
    .module('services.event')
    .factory('EventListener', ['$rootScope', 'TastdEvent', function EventListenerFactory($rootScope, TastdEvent) {

        var EventListener = {
            on: on,
            event: TastdEvent
        };

        function on () {
            $rootScope.$on.apply($rootScope, arguments);
        }

        return EventListener;
    }]);

'use strict';

angular
    .module('services.event')
    .constant('TastdEvent', {
        // Restaurant
        'RESTAURANT_CREATE': 'restaurant:create',

        // User
        'USER_FOLLOW': 'user:follow',
        'USER_UNFOLLOW': 'user:unfollow',
        'USER_EDIT': 'user:edit',

        // Tutorial
        'TUTORIAL_COMPLETE': 'tutorial:complete',

        // On Boarding
        'ON_BOARDING_COMPLETE': 'on_boarding_complete',

        // Review
        'REVIEW_CREATE': 'review:create',
        'REVIEW_DELETE': 'review:delete',
        'REVIEW_EDIT': 'review:edit',

        // Wish
        'WISH_CREATE': 'wish:create',
        'WISH_EDIT': 'wish:edit',
        'WISH_DELETE': 'wish:delete',

        // Ranking
        'RANKING_REORDER': 'ranking:reorder'

    });

'use strict';

angular
    .module('services.facebook', [
        'services.config'
    ]);

'use strict';

(function (AppHelper, q, enabled) {
    function fbAsyncInitPromise() {
        var d = q.defer();

        if(!AppHelper.isWebApp() || enabled === false) {
            d.resolve();
        }else{
            // global function that is called when facebook sdk is loaded
            window.fbAsyncInit = function () { d.resolve(); };
        }
        return d.promise;
    }
    function loadFacebookSdk() {
        // Load the SDK asynchronously
        // only if we are into a web app context because into
        // cordova build context the sdk would be provided by
        // the facebookconnect cordova plugin (com.phonegap.plugins.facebookconnect)

        if(AppHelper.isWebApp() && enabled === true) {

            (function(d, s, id){
                var js, fjs = d.getElementsByTagName(s)[0];
                if (d.getElementById(id)) {return;}
                js = d.createElement(s);
                js.id = id;
                js.src = '//connect.facebook.net/en_US/all.js';
                fjs.parentNode.insertBefore(js, fjs);
            }(document, 'script', 'facebook-jssdk'));

        }
    }

    // attach loadFacebookSdk function to the
    // global app object for further use
    AppHelper.loadFacebookSdk = loadFacebookSdk;

    // adds fb async init promise
    AppHelper.beforeAngular(fbAsyncInitPromise);

})(window.AppHelper, window.Q, window.PARAMETERS.FACEBOOK.ENABLED);

'use strict';

angular
    .module('services.facebook')
    .provider('FacebookConnect', ['ConfigProvider', function FacebookConnectProvider(ConfigProvider) {

        var FACEBOOK = ConfigProvider.facebook(),
            providerOptions = {
                loginResponseTransformer : null
            };

        $get.$inject = ['$rootScope', '$q', '$log', '$injector', '$http', 'Config'];
        return {
                init: init,
                options: options,
                $get: $get
            };

        function init() {
            if(window.FB && !window.cordova && FACEBOOK.ENABLED) {
                window.facebookConnectPlugin.browserInit(FACEBOOK.APP_ID, FACEBOOK.API_VERSION);
            }else{
                if(!window.FB) {
                    window.console.warn('No facebook SDK!');
                }
            }
        }

        function options (options) {
            angular.extend(providerOptions, options);
        }

        function $get(
            $rootScope,
            $q,
            $log,
            $injector,
            $http,
            Config
        ) {
            var FacebookConnect = {
                isEnabled: isEnabled,
                login: login,
                ensureHasCredential: ensureHasCredential,
                getLoginStatus: getLoginStatus,
                persistCredential: persistCredential,
                api: api,
                updateMyFacebookCredential: updateMyFacebookCredential,
                loginWithPersistCredential: loginWithPersistCredential,
                loginWithUpdateCredential: loginWithUpdateCredential,
                getMyFacebookCredential: getMyFacebookCredential,
                exchangeLongLivedToken: exchangeLongLivedToken
            };

            function isEnabled() {
                return FACEBOOK.ENABLED;
            }

            /**
             * Do login and update/persist user credential
             * @param me
             * @returns {*}
             */
            function loginWithUpdateCredential(me) {
                return FacebookConnect.login().then(function(credential){
                    return FacebookConnect.updateMyFacebookCredential(me, credential);
                });
            }

            /**
             * Do login and persist for the first time the credential server side
             * @returns {*}
             */
            function loginWithPersistCredential(me) {
                $log.debug('[FACEBOOK_CONNECT] Login with persist credential');
                return FacebookConnect.login().then(function(credential) {
                    $log.debug('[FACEBOOK_CONNECT] Login with persist after');
                    return persistCredential(me, credential);
                });
            }

            /**
             *
             * @param perm
             * @returns {*|promise}
             */
            function login(perm) {
                $log.debug('[FACEBOOK_CONNECT] Login');
                var deferred = $q.defer();
                window
                    .facebookConnectPlugin
                    .login(perm || FACEBOOK.APP_PERMISSIONS.LOGIN,
                    function(response){
                        onFacebookLogin(response, deferred);
                    }, function () {
                        onFacebookLoginError(deferred);
                    });

                return deferred.promise;
            }


            /**
             * Ensure that there is a facebook credential
             * It doesn't mean that the credential is valid
             * @param me
             * @returns {promise}
             */
            function ensureHasCredential(me) {
                $log.debug('[FACEBOOK_CONNECT] Ensure has credential');
                var deferred = $q.defer();
                var fbCredential = getMyFacebookCredential(me);

                if (fbCredential) {
                    $log.debug('[FACEBOOK_CONNECT] Has already a credential');
                    deferred.resolve();
                } else {
                    FacebookConnect.loginWithPersistCredential(me)
                        .then(function(){
                            $log.debug('[FACEBOOK_CONNECT] Login with persist success');
                            deferred.resolve();
                        },function(){
                            $log.debug('[FACEBOOK_CONNECT] Login with persist error');
                            deferred.reject();
                        });
                }

                return deferred.promise;
            }


            /**
             * Persist on server the credential
             * @param me
             * @param credential
             * @returns {*}
             */
            function persistCredential(me, credential) {
                return me.credentials
                    .$build(credential)
                    .$save()
                    .$asPromise();
            }

            /**
             * Update Existing (or persist if it doesn't exist) facebook credential
             * @param newCredential
             * @returns {*}
             */
            function updateMyFacebookCredential(me, newCredential)
            {
                var credential = getMyFacebookCredential(me);

                if (!credential) {
                    return FacebookConnect.persistCredential(me, newCredential);
                }

                credential.token = newCredential.token;
                credential.permissions = newCredential.permissions;
                credential.externalId = newCredential.externalId;
                return credential.$save().$asPromise();
            }

            /**
             * Exchange a short lived token with a long lived
             * @param credential
             */
            function exchangeLongLivedToken(credential) {
                var payload = {
                    token: credential.token
                };
                return $http.post(Config.authUrl()+'/facebook/long-lived-token', payload).then(function(response){
                    credential.token = response.data.token;

                    return credential;
                });
            }

            /**
             * Get facebook credential by provider
             * @param me
             * @returns {*}
             */
            function getMyFacebookCredential(me)
            {
                return _.find(me.credentials, function(x) {
                    return x.provider === 'FACEBOOK';
                });
            }

            function getLoginStatus()
            {
                var deferred = $q.defer();
                window
                    .facebookConnectPlugin
                    .getLoginStatus(function () {
                        deferred
                            .resolve
                            .apply(deferred, arguments);
                    }, function () {
                        deferred
                            .reject
                            .apply(deferred, arguments);
                    });

                return deferred.promise;
            }

            function api(graphPath, permissions) {
                // JS API does not take additional permissions
                var deferred = $q.defer();
                window
                    .facebookConnectPlugin
                    .api(graphPath, permissions, function () {
                        deferred
                            .resolve
                            .apply(deferred, arguments);
                    }, function () {
                        deferred
                            .reject
                            .apply(deferred, arguments);
                    });

                return deferred.promise;
            }


            function onFacebookLogin(response, deferred) {
                $log.debug('[FACEBOOK_CONNECT] On facebook login');
                FacebookConnect
                    .api('/me')
                    .then(function (me) {
                        onFacebookMe(me, response, deferred);
                    }, function (error) {
                        deferred
                            .reject
                            .apply(deferred, [error]);
                    });
            }

            function onFacebookLoginError(deferred) {
                $log.debug('[FACEBOOK_CONNECT] On Facebook login error');
                if(arguments.length) {
                    deferred
                        .reject
                        .apply(deferred, [{message:'The login dialog was dismissed or there was an unknown error'}]);
                }else{
                    $log.error('facebook login results in a error', arguments);
                    deferred
                        .reject
                        .apply(deferred, arguments);
                }
            }

            function onFacebookMe(me, response, deferred) {
                $log.debug('On facebook me', me);
                response.me = me;
                if(providerOptions.loginResponseTransformer) {
                    response = $injector.invoke(providerOptions.loginResponseTransformer, FacebookConnect, {
                        response : response
                    });
                }
                deferred
                    .resolve
                    .apply(deferred, [response]);
            }

            return FacebookConnect;
        }
    }])
    .config(['FacebookConnectProvider', function (FacebookConnectProvider) {
        FacebookConnectProvider.init();
    }]);

'use strict';

angular
    .module('services.flag', [
        'services.google'
    ]);


'use strict';

angular
    .module('services.flag')
    .factory('FlagMarkerOverlay', ['Google', 'AsGoogleOverlay', function FlagMarkerOverlayFactory(
        Google,
        AsGoogleOverlay
    ) {

        var FLAG_MARKER_TEMPLATE = '<div class="google-marker-wrap">' +
            '<div class="google-marker-overlay" ng-class="{\'icon icon-bookmark\' : !flag.position}"><span class="number">{{flag.position}}</span></div>' +
            '<i class="icon icon-marker" ng-style="::{\'color\': \'#\'+flag.color, \'-webkit-text-stroke-color\': \'#\'+borderColor}"></i>' +
            '</div>';

        function getModifiedComponent(color, modifier, elemNum){
            // extracts the elmentNum-th color component from an hex notation
            // computes the new color component applying the brightness modifier
            // and returns the corresponding hex string
            var component = parseInt(color.substr(elemNum*2, 2), 16);
            component = Math.min(Math.max((Math.round(component + (component*modifier))), 0), 255);
            var computed = component.toString(16);
            return (computed.length === 2)? computed : '0' + computed;
        }

        /**
         * computes a color with a increased or decreased brightness
         * does not work with black color ( #000000 )
         *
         * @param  {String} color hex color ('#' followed by 6 digits)
         * @param  {Number} modifier should be -1 <= modifier <= 1.
         *                           a negative modifier darken the color.
         * @return {String} computed hex color
         */
        function changeBrightness(color, modifier){
            var r = getModifiedComponent(color, modifier, 0),
                g = getModifiedComponent(color, modifier, 1),
                b = getModifiedComponent(color, modifier, 2);

            return r + g + b;
        }

        function FlagMarkerOverlay(flag, map) {

            this.$$flag = flag;

            AsGoogleOverlay.$constructor.call(this, {
                map : map,
                zIndex : (91 - parseFloat(flag.lat)) * 1000000,  // higher latitude stay under lower one
                offsetX: -13, // Marker width / 2
                offsetY: -30, // Marker height
                template : FLAG_MARKER_TEMPLATE,
                position : new Google.maps.LatLng(flag.lat, flag.lng),
                resolve  :  {
                    flag : flag,
                    borderColor : changeBrightness(flag.color, -0.2)
                }
            });
        }

        FlagMarkerOverlay.prototype = new Google.maps.OverlayView();
        AsGoogleOverlay.call(FlagMarkerOverlay.prototype);

        return FlagMarkerOverlay;
    }]);

'use strict';

angular
    .module('services.flag')
    .factory('InfoboxOverlay', ['Google', 'AsGoogleOverlay', function InfoboxOverlayFactory(Google, AsGoogleOverlay) {

        var INFOBOX_TEMPLATE = ['<div class="infobox-resto clearfix">',
                               '<img ng-src="{{flag.picture}}" class="infobox-picture"/>',
                               '<div class="infobox-text">',
                               '<div class="infobox-name">{{flag.name | limitTo: 15}}{{flag.name.length > 20 ? \'..\' : \'\'}}</div>',
                               '<div class="infobox-cuisine" ng-style="{color:\'#\'+ flag.color}">{{flag.cuisineName}}</div>',
                               '</div>',
                               '</div>'].join('');

        function InfoboxOverlay(flag, map) {

            this.$$flag = flag;

            AsGoogleOverlay.$constructor.call(this, {
                zIndex: '100000000',
                map : map,
                offsetX: -46, // marker width / 2 + infoboxImage width
                offsetY: -78, // marker height (30) + infobox height
                template : INFOBOX_TEMPLATE,
                position : new Google.maps.LatLng(flag.lat, flag.lng),
                resolve  :  {
                    flag : flag
                }
            });
        }

        InfoboxOverlay.prototype = new Google.maps.OverlayView();
        AsGoogleOverlay.call(InfoboxOverlay.prototype);

        InfoboxOverlay.prototype.onClick = function (/* event */) {
        };

        return InfoboxOverlay;
    }]);

'use strict';

angular
    .module('services.flag')
    .factory('MeOverlay', ['Google', 'AsGoogleOverlay', function MeOverlayFactory(Google, AsGoogleOverlay) {

        var ME_MARKER_TEMPLATE = '<div class="google-marker-wrap"><div class="google-marker-overlay" ' +
            					 'ng-bind="flag.position"></div>' +
            '<svg class="marker-svg" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="30px" height="30px" xml:space="preserve">' +
					             '<circle cx="13" cy="13" r="10" stroke="white" stroke-width="3px" fill="#4285F4" />' +
					             '</svg>' +
					             '</div>';

        function MeMarkerOverlay(coords, map) {

            AsGoogleOverlay.$constructor.call(this, {
                map : map,
                offsetX: -26,
                offsetY: -26,
                template : ME_MARKER_TEMPLATE,
                position : new Google.maps.LatLng(coords.lat, coords.lng),
                resolve  :  {
                    coords: coords
                }
            });
        }

        MeMarkerOverlay.prototype = new Google.maps.OverlayView();
        AsGoogleOverlay.call(MeMarkerOverlay.prototype);

        return MeMarkerOverlay;
    }]);


'use strict';

angular
    .module('services.flag')
    .factory('FlagParametersBagFactory', ['$translate', 'PriceManager', 'Security', 'SimpleLocalStorage', 'UserGeolocation', '$q', function FlagParametersBagFactoryFactory (
        $translate,
        PriceManager,
        Security,
        SimpleLocalStorage,
        UserGeolocation,
        $q
    ) {

        var MIN_COST = 0;
        var MAX_COST = 200;

        var FlagParametersBagFactory = {
            create: create,
            createFromUserAndGeoname: createFromUserAndGeoname,
            createWithLastGeoname: createWithLastGeoname
        };

        return FlagParametersBagFactory;

        function createWithLastGeoname () {
            var flagParametersBag = FlagParametersBagFactory.create();
            var deferred = $q.defer();

            var lastGeoname = SimpleLocalStorage.getObject('lastGeoname');
            if (lastGeoname) {
                lastGeoname.lat = parseFloat(lastGeoname.lat);
                lastGeoname.lng = parseFloat(lastGeoname.lng);
                flagParametersBag.geoname = lastGeoname;
                deferred.resolve(lastGeoname);
                flagParametersBag.geonamePromise = deferred.promise;
            } else {
                flagParametersBag.geonamePromise = UserGeolocation.getCurrentGeoname();
                flagParametersBag.geonamePromise.then(function(geoname){
                    flagParametersBag.geoname = geoname;
                });
            }

            return flagParametersBag;
        }

        function createFromUserAndGeoname (user, geoname) {
            var deferred = $q.defer();
            deferred.resolve(geoname);
            var flagParametersBag = FlagParametersBagFactory.create();
            flagParametersBag.geoname = geoname;
            flagParametersBag.users = [user];
            flagParametersBag.geonamePromise = deferred.promise;

            if (parseInt(Security.user.id) === parseInt(user.id)) {
                flagParametersBag.withWish = true;
            }

            return flagParametersBag;
        }

        function create () {
            var FlagParametersBag = {
                users: [],
                tags: [],
                cuisines: [],
                geoname: null,
                geonamePromise: null,
                minLat: null,
                maxLat: null,
                minLng: null,
                maxLng: null,
                leadersOf: null,
                minCost: null,
                maxCost: null,
                wishedBy: null,
                reviewedBy: null,
                wish: false,
                withWish: false,
                orderBy: 'cuisine',
                isDirty: isDirty,
                getGeoGuruLabel: getGeoGuruLabel,
                getFiltersLabel: getFiltersLabel,
                getQueryParameters: getQueryParameters,
                getGeonameTitle: getGeonameTitle,
                getGuruTitle: getGuruTitle,
                updateWithGeoGuruResponse: updateWithGeoGuruResponse,
                updateWithBoundsResponse: updateWithBoundsResponse,
                updateWithFiltersResponse: updateWithFiltersResponse,
                resetBounds: resetBounds
            };

            return FlagParametersBag;

            function getQueryParameters () {
                var queryParameters = {};

                _.each(['leadersOf', 'wishedBy', 'reviewedBy', 'minLat',
                    'maxLat', 'minLng', 'maxLng', 'withWish', 'orderBy'], function (property) {
                    updateProperty(queryParameters, property);
                });

                _.each(['cuisines', 'users', 'tags'], function (property) {
                    updateArrayProperty(queryParameters, property);
                });

                // Geoname
                queryParameters.geoname = (FlagParametersBag.geoname || {id: 5128581}).id;

                // MinCost
                if (FlagParametersBag.minCost && FlagParametersBag.minCost !== MIN_COST) {
                    queryParameters.minCost = FlagParametersBag.minCost;
                }

                // MaxCost
                if (FlagParametersBag.maxCost && FlagParametersBag.maxCost !== MAX_COST) {
                        queryParameters.maxCost = FlagParametersBag.maxCost;
                }

                return queryParameters;
            }

            function getGeoGuruLabel () {
                if (!FlagParametersBag.geoname) {
                    return '';
                }

                if (FlagParametersBag.users.length === 0) {
                    return FlagParametersBag.geoname.asciiName + ', '
                        + $translate.instant('user.all_gurus');
                }

                return FlagParametersBag.geoname.asciiName + ', '
                    + FlagParametersBag.users[0].fullName;
            }

            function getFiltersLabel () {
                var filterLabels = [];

                // CUISINES
                _.each(FlagParametersBag.cuisines, function (cuisine) {
                    filterLabels.push(cuisine.name);
                });

                // MIN COST
                if (FlagParametersBag.minCost && FlagParametersBag.minCost !== MIN_COST) {
                    filterLabels.push(
                        '<' + PriceManager.getSliderLabel(
                            FlagParametersBag.minCost,
                            FlagParametersBag.geoname)
                    );
                }

                // MAX COST
                if (FlagParametersBag.maxCost && FlagParametersBag.maxCost !== MAX_COST) {
                    filterLabels.push(
                        '<' + PriceManager.getSliderLabel(
                            FlagParametersBag.maxCost,
                            FlagParametersBag.geoname)
                    );
                }

                // TAGS
                _.each(FlagParametersBag.tags, function (tag) {
                    filterLabels.push(tag.name);
                });

                return filterLabels.join(', ');
            }

            function isDirty () {
                if (FlagParametersBag.cuisines.length > 0 || FlagParametersBag.tags.length > 0) {
                    return true;
                }
                if (FlagParametersBag.minCost && FlagParametersBag.minCost !== MIN_COST) {
                    return true;
                }
                return FlagParametersBag.maxCost && FlagParametersBag.maxCost !== MAX_COST;
            }

            function getGuruTitle () {
                var usersParameter = _.map(FlagParametersBag.users, function (user) {
                    return user.firstName;
                });
                return usersParameter.join(',');
            }

            function getGeonameTitle () {
                if (!FlagParametersBag.geoname) {
                    return '';
                }

                return FlagParametersBag.geoname.asciiName;
            }

            function updateWithGeoGuruResponse (response) {
                FlagParametersBag.geoname = response.geoname;
                if (response.guru) {
                    FlagParametersBag.users = [response.guru];
                    FlagParametersBag.leadersOf = null;
                } else {
                    FlagParametersBag.leadersOf = Security.user.id;
                    FlagParametersBag.users = [];
                }
            }

            function updateWithBoundsResponse (bounds) {
                FlagParametersBag.minLat = bounds.minLat;
                FlagParametersBag.maxLat = bounds.maxLat;
                FlagParametersBag.minLng = bounds.minLng;
                FlagParametersBag.maxLng = bounds.maxLng;
            }

            function resetBounds () {
                FlagParametersBag.minLat = null;
                FlagParametersBag.maxLat = null;
                FlagParametersBag.minLng = null;
                FlagParametersBag.maxLng = null;
            }

            function updateWithFiltersResponse (response) {
                FlagParametersBag.cuisines = response.cuisines;
                FlagParametersBag.tags = response.tags;
                FlagParametersBag.maxCost = response.maxCost;
                FlagParametersBag.minCost = response.minCost;
            }

            function updateProperty (queryParameters, param) {
                if (FlagParametersBag[param]) {
                    queryParameters[param] = FlagParametersBag[param];
                }
            }

            function updateArrayProperty (queryParameters, param) {
                if (FlagParametersBag[param].length > 0) {
                    var arrayParameter = _.map(FlagParametersBag[param], function (object) {
                        return object.id;
                    });
                    queryParameters[param] = arrayParameter.join(',');
                }
            }

        }

    }]);

'use strict';

angular
    .module('services.flashMessage',[

    ]);

'use strict';

angular
    .module('services.flashMessage',[])
    .factory('FlashMessageManager', ['$timeout', '$translate', '$log', function FlashMessageManagerFactory (
        $timeout,
        $translate,
        $log
    ) {

        var DURATION = 5000;
        var FlashMessageManager = {
            push: push,
            reset: reset,
            messages: [],
            active: false,
            timeoutPromise: null
        };

        return FlashMessageManager;

        function push (content, category) {
            $log.debug('[FLASH_MESSAGE] Push new message');
            startTimer();
            var message = {
                content: $translate.instant(content),
                category: category || 'info'
            };
            FlashMessageManager.messages.unshift(message);
            FlashMessageManager.active = true;
        }

        function startTimer () {
            $log.debug('[FLASH_MESSAGE] Start timer');
            if (FlashMessageManager.timeoutPromise) {
                $timeout.cancel(FlashMessageManager.timeoutPromise);
            }
            FlashMessageManager.timeoutPromise = $timeout(reset, DURATION);
        }

        function reset() {
            $log.debug('[FLASH_MESSAGE] Reset');
            FlashMessageManager.messages = [];
            FlashMessageManager.active = false;
        }

    }]);

'use strict';

angular.module('services.geocode', [
    'services.http',
    'entities.address'
]);

'use strict';

angular
    .module('services.geocode')
    .factory('HttpGeocodeApi', ['HttpApiFactory', 'Config', 'HttpGeocodeConfig', 'AddressManager', function HttpGeocodeApiFactory(
        HttpApiFactory,
        Config,
        HttpGeocodeConfig,
        AddressManager
    ) {
        var HttpGeocodeApi = new HttpApiFactory(angular.extend({}, {
                baseUrl : Config.apiUrl('/geocode')
            }, HttpGeocodeConfig
        ));

        HttpGeocodeApi.searchAddress = function (q) {

            var params = {
                query : q,
                precision : 'STREET_NAME'
            };

            return AddressManager.findAll(params).then(function (addresses) {
                return addresses;
            });
        };

        HttpGeocodeApi.searchCityAddress = function (q) {

            var params = {
                query : q,
                precision : 'CITY'
            };

            return AddressManager.findAll(params).then(function (addresses) {
                return addresses;
            });
        };

        return HttpGeocodeApi;
    }]);

'use strict';

angular
    .module('services.geocode')
    .constant('HttpGeocodeConfig', {
        transformResponse : function (response) {
            if(response.data) {
                if(response.data.addresses) {
                    return response.data.addresses;
                }
                if(angular.isDefined(response.data.address)) {
                    return response.data.address;
                }
            }
            return response;
        }
    });

'use strict';

angular
    .module('services.geocode')
    .factory('UserGeolocation', ['$cordovaGeolocation', 'GeonameManager', 'AlertPopup', '$q', 'SimpleLocalStorage', '$log', function UserGeolocationFactory(
        $cordovaGeolocation,
        GeonameManager,
        AlertPopup,
        $q,
        SimpleLocalStorage,
        $log
    ) {
        var UserGeolocation = {
            address: null,
            getCurrentGeoname: getCurrentGeoname,
            getCurrentPosition: getCurrentPosition
        };

        return UserGeolocation;

        function getCurrentGeoname () {
            $log.debug('[GEOLOCATION] Get Current Geoname');
            var deferred = $q.defer();
            var lastGeoname = SimpleLocalStorage.getObject('lastGeoname');
            if (lastGeoname && lastGeoname.lat) {
                $log.debug('[GEOLOCATION] Resolve with lastGeoname');
                deferred.resolve(lastGeoname);
            } else {
                var userGeolocationPromise = UserGeolocation.getCurrentPosition();
                var geonameManagerPromise = userGeolocationPromise.then(function (coordinates) {
                    var q = angular.extend({}, coordinates, {
                        orderBy: 'distance'
                    });

                    return GeonameManager.findAll(q);
                });
                geonameManagerPromise.then(function(geonames) {
                    $log.debug('[GEOLOCATION] On Geoname manager success');
                    if (geonames.length > 0) {
                        deferred.resolve(geonames[0]);
                    } else {
                        deferred.reject();
                    }
                });
            }

            return deferred.promise;
        }

        function getCurrentPosition() {
            $log.debug('[GEOLOCATION] Get Current position');
            var deferred = $q.defer();
            var posOptions = {
                timeout: 10000,
                enableHighAccuracy: true
            };
            var currentPositionPromise = $cordovaGeolocation.getCurrentPosition(posOptions);
            currentPositionPromise.then(function (position) {
                    $log.debug('[GEOLOCATION] Success with lat: ' +
                        position.coords.latitude +
                        ' and lng: ' +
                        position.coords.longitude
                    );
                    deferred.resolve({
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    });
                }, function() {
                    $log.debug('[GEOLOCATION] Failure');
                    AlertPopup.create('popup.geolocation_not_available.title','popup.geolocation_not_available.text');
                    deferred.resolve({
                        lat: 40.7670374,
                        lng: -73.9711997
                    });
                });

            return deferred.promise;
        }


    }]);

'use strict';

angular
    .module('services.google', [
    ]);

'use strict';

angular
    .module('services.google')
    .factory('GoogleGeocoder', ['Google', '$log', '$q', function GoogleGeocoderFactory(
        Google,
        $log,
        $q
    ) {
        var deferred = null;
        var GoogleGeocoder = {
            geocode: geocode,
            reverseGeocode: reverseGeocode
        };

        return GoogleGeocoder;

        function geocode(address) {
            deferred = $q.defer();
            var geocoder = new Google.maps.Geocoder();
            $log.debug('[GOOGLE_GEOCODER] Geocode');
            geocoder.geocode({'address': address}, function(results, status) {
                if (status === Google.maps.GeocoderStatus.OK) {
                    $log.debug('[GOOGLE_GEOCODER] Status raw result', results);
                    geocodeResultToAddresses(results);
                } else {
                    $log.debug('[GOOGLE_GEOCODER] Failure', status);
                    deferred.resolve([]);
                }
            });
            return deferred.promise;
        }

        function geocodeResultToAddresses (results) {
            var addresses = [];
            _.each(results, function (result) {
                var address = {};
                if (!result.geometry || !result.geometry.location) {
                    return;
                }
                address.lat = result.geometry.location.lat();
                address.lng = result.geometry.location.lng();
                address.route = getComponent(result.address_components, 'route');
                address.streetAddress = getComponent(result.address_components, 'street_address');
                address.intersection = getComponent(result.address_components, 'intersection');
                address.country = getComponent(result.address_components, 'country');
                address.postalCode = getComponent(result.address_components, 'postalCode');
                address.premise = getComponent(result.address_components, 'premise'); // Group of building
                address.subPremise = getComponent(result.address_components, 'subpremise'); // Single building
                address.neighborhood = getComponent(result.address_components, 'neighborhood');
                address.locality = getComponent(result.address_components, 'locality');
                address.subLocality = getComponent(result.address_components, 'sublocality');

                address.subLocalityLevel1 = getComponent(result.address_components, 'sublocality_level_1');
                address.subLocalityLevel2 = getComponent(result.address_components, 'sublocality_level_2');
                address.subLocalityLevel3 = getComponent(result.address_components, 'sublocality_level_3');
                address.subLocalityLevel4 = getComponent(result.address_components, 'sublocality_level_4');
                address.subLocalityLevel5 = getComponent(result.address_components, 'sublocality_level_5');

                address.administrativeAreaLevel1 = getComponent(result.address_components, 'administrative_area_level_1');
                address.administrativeAreaLevel2 = getComponent(result.address_components, 'administrative_area_level_2');
                address.administrativeAreaLevel3 = getComponent(result.address_components, 'administrative_area_level_3');
                address.administrativeAreaLevel4 = getComponent(result.address_components, 'administrative_area_level_4');
                address.administrativeAreaLevel5 = getComponent(result.address_components, 'administrative_area_level_5');
                address.streetNumber = getComponent(result.address_components, 'street_number');
                address.formattedAddress = result.formatted_address;

                var shortAddressComponents = getComponentsForShortAddress(address);

                if (shortAddressComponents.length === 0) {
                    return;
                }

                if (address.streetNumber) {
                    address.shortAddress = address.streetNumber + ', ' + shortAddressComponents.join(' ');
                } else {
                    address.shortAddress = shortAddressComponents.join(' ');
                }

                addresses.push(address);
            });

            $log.debug('[GOOGLE_GEOCODER] Addresses Results', addresses);
            deferred.resolve(addresses);
        }

        function getComponentsForShortAddress (address) {
            var components = [];
            _.each([
                'streetAddress',
                'route',
                'intersection',
                'premise',
                'subPremise',
                'neighborhood',
                'subLocalityLevel1',
                'subLocalityLevel2',
                'subLocalityLevel3',
                'subLocalityLevel4',
                'subLocalityLevel5'], function(c){
                if (address[c]) {
                    components.push(address[c]);
                }
            });

            return components;
        }

        function getComponent(addressComponents, name) {
            var component = _.find(addressComponents, function (component) {
                return _.contains(component.types, name);
            });
            if (component && component.long_name) {
                return component.long_name;
            } else if (component) {
                return component;
            }

            return undefined;
        }

        function reverseGeocode (lat, lng) {
            deferred = $q.defer();
            var coordinates = {
                lat: parseFloat(lat),
                lng: parseFloat(lng)
            };
            var geocoder = new Google.maps.Geocoder;
            geocoder.geocode({'location': coordinates}, function(results, status) {
                if (status === Google.maps.GeocoderStatus.OK) {
                    geocodeResultToAddresses(results);
                } else {
                    deferred.resolve([]);
                }
            });

            return deferred.promise;
        }

    }]);

'use strict';

angular
    .module('services.google')
    .factory('AsGoogleOverlay', ['Google', '$rootScope', '$compile', function AsGoogleOverlayFactory(
        Google,
        $rootScope,
        $compile
    ) {

        var AsGoogleOverlay = function () {

            this.draw = function() {
                var self = this;
                var div = this.div_;
                var point;
                var panes;
                var compiled;

                // Check if the div has been already created.
                if (!div) {

                    // Create a overlay text DIV
                    div = this.div_ = document.createElement('DIV');

                    // Create the DIV representing our CustomMarker
                    div.style.border = 'none';
                    div.style.position = 'absolute';
                    div.style.paddingLeft = '0px';
                    div.style.cursor = 'pointer';
                    div.style.zIndex = this.$$options.zIndex || 1;

                    compiled = $compile(this.$$options.template)(this.$$options.$scope);
                    if(!this.$$options.$scope.$$phase && !$rootScope.$$phase) {
                        this.$$options.$scope.$apply();
                    }
                    div.appendChild(compiled[0]);

                    Google.maps.event.addDomListener(div, 'click', function(evt) {
                        Google.maps.event.trigger(self, 'click', evt);
                    });

                    // Then add the overlay to the DOM
                    panes = this.getPanes();
                    panes.overlayImage.appendChild(div);
                }

                // Position the overlay
                point = this.getProjection().fromLatLngToDivPixel(this.latlng_);

                var offsetX = this.$$options.offsetX || 0;
                var offsetY = this.$$options.offsetY || 0;

                if (point) {
                    div.style.left = (offsetX + point.x) + 'px';
                    div.style.top = (offsetY + point.y) + 'px';
                }
            };

            this.remove = function() {
                // Check if the overlay was on the map and needs to be removed.
                if (this.div_) {
                    this.div_.parentNode.removeChild(this.div_);
                    this.div_ = null;
                }

                if(this.$$options && this.$$options.$scope) {
                    this.$$options.$scope.$destroy();
                }
            };

            this.getPosition = function() {
                return this.latlng_;
            };

            this.panTo = function () {
                this.getMap().panTo(this.getPosition());
            };

            return this;
        };




        AsGoogleOverlay.$constructor = function (markerOptions) {

            markerOptions = markerOptions || {};

            this.$$options = angular.extend({
                position: new Google.maps.LatLng(0, 0),
                map: null,
                title : null,
                $scope : markerOptions.$scope || $rootScope.$new(true),
                resolve : {},
                template : '<span class="google-marker-overlay">{{Â title }}</span>'
            }, markerOptions);


            // set title to scope
            this.$$options.$scope.$title = this.$$options.title;

            // extend scope with resolve object
            angular.extend(this.$$options.$scope, this.$$options.resolve);

            // crucial
            this.latlng_ = this.$$options.position;

            // Once the LatLng and text are set, add the overlay to the map.  This will
            // trigger a call to panes_changed which should in turn call draw.
            this.setMap(this.$$options.map);
        };

        return AsGoogleOverlay;
    }]);


'use strict';

angular
    .module('services.google')
    .constant('Google', window.google);

'use strict';

angular
    .module('services.google')
    .factory('GoogleOverlay', ['Google', '$rootScope', 'AsGoogleOverlay', function GoogleOverlayFactory(
        Google,
        $rootScope,
        AsGoogleOverlay
    ) {

        /**
         * @see http://gmaps-samples-v3.googlecode.com/svn/trunk/overlayview/custommarker.html
         * @see http://nickjohnson.com/b/google-maps-v3-how-to-quickly-add-many-markers
         *
         * @name GoogleOverlay
         * @params markerOptions
         * @constructor
         */
        function GoogleOverlay(markerOptions) {
            AsGoogleOverlay.$constructor.call(this, markerOptions);
        }

        GoogleOverlay.prototype = new Google.maps.OverlayView();
        AsGoogleOverlay.call(GoogleOverlay.prototype);


        return GoogleOverlay;

    }]);


'use strict';

angular
    .module('services.http', [
        'services.config'
    ])
    .config(['$httpProvider', function ($httpProvider) {
        /*jshint sub:true*/
        $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
        $httpProvider.defaults.headers.common['Content-Type'] = 'application/json';
        $httpProvider.defaults.headers.common['Accept'] = 'application/json';
        $httpProvider.defaults.headers.common['X-Tastd-AppVersion'] = window.PARAMETERS.APP.VERSION;
    }]);

'use strict';

angular
    .module('services.http')

    .provider('HttpApiFactory', function HttpApiFactoryProvider() {

        var provider = this,
            providerConfig = {
                baseUrl : ''
            };

        provider.config = function (options) {
            if(angular.isObject(options)) {
                providerConfig = angular.extend({}, providerConfig, options);
                return this;
            }else{
                return providerConfig;
            }
        };

        function appendTransform(defaults, transform) {
            // We can't guarantee that the default transformation is an array
            defaults = angular.isArray(defaults) ? defaults : [defaults];
            // Append the new transformation to the defaults
            return defaults.concat(transform);
        }

        this.$get = ['$q', '$http', function ($q, $http) {

            function httpConfiguration(httpApi, method, url, config, data, canceler) {

                var configuration = angular.extend({}, {
                    method: method,
                    url: httpApi.config.baseUrl + url,
                    transformResponse: appendTransform($http.defaults.transformResponse, function (response) {
                        if(httpApi.config.httpTransformResponse) {
                            return httpApi.config.httpTransformResponse(response, configuration);
                        }
                        return response;
                    })
                }, config || {});

                if(data) { configuration.data = data; }

                if(canceler && !configuration.timeout) {
                    configuration.timeout = canceler.promise;
                }

                return configuration;
            }

            function successCallback(httpApi, configuration) {
                var promise = function (response) {
                    if(httpApi.config.transformResponse) {
                        return httpApi.config.transformResponse(response, configuration);
                    }
                    return response;
                };

                return promise;
            }

            function createShortMethods(httpApi, httpMethods) {
                angular.forEach(httpMethods, function(httpMethod) {
                    httpApi[httpMethod] = httpApi['$' + httpMethod] = function(url, config) {
                        var canceler = $q.defer();
                        var configuration = httpConfiguration(httpApi, httpMethod, url, config, null, canceler);
                        var promise = $http(configuration);
                        return promise.then(successCallback(httpApi, configuration));
                    };
                });
            }

            function createShortMethodsWithData(httpApi, httpMethods) {
                angular.forEach(httpMethods, function(httpMethod) {
                    httpApi[httpMethod] = httpApi['$' + httpMethod] = function(url, data, config) {
                        var canceler = $q.defer();
                        var configuration = httpConfiguration(httpApi, httpMethod, url, config, data, canceler);
                        var promise = $http(configuration);
                        return promise.then(successCallback(httpApi, configuration));
                    };
                });
            }


            function httpApiFactory(config) {

                var httpApi = {
                    config : angular.extend({}, provider.config(), config || {})
                };

                createShortMethods(httpApi,['get', 'delete', 'head', 'jsonp']);
                createShortMethodsWithData(httpApi, ['post', 'put']);

                return httpApi;
            }

            return httpApiFactory;
        }];



        return provider;
    });

'use strict';

angular
    .module('services.http')
    .factory('HttpAuthApi', ['HttpApiFactory', 'Config', function HttpAuthApiFactory(HttpApiFactory, Config) {
        return new HttpApiFactory({
            baseUrl : Config.authUrl()
        });
    }]);

'use strict';

angular
    .module('services.http')
    .config(['$httpProvider', function($httpProvider) {
        var interceptor = function($q, $timeout, $injector) {
            return {
                responseError: function(response) {
                    if (response.status === 0 && !response.config.noIntercept) {
                        var $http = $injector.get('$http');
                        var DisconnectedPopup = $injector.get('DisconnectedPopup');

                        return DisconnectedPopup.create().then(function(res) {
                            if(res){
                                return $http(response.config);
                            }
                            else{
                                return $q.reject(response);
                            }
                        });
                    }
                    return $q.reject(response);
                }
            };
        };
        interceptor.$inject = ['$q', '$timeout', '$injector'];

        $httpProvider.interceptors.push(interceptor);
    }]);

'use strict';
angular
    .module('services.http')
    .config(['$httpProvider', 'PARAMETERS', function($httpProvider, PARAMETERS) {
        var interceptor = function() {
            return {
                request: function(config) {
                    config.timeout = PARAMETERS.HTTP_TIMEOUT;
                    return config;
                }
            };
        };

        $httpProvider.interceptors.push(interceptor);
    }]);

'use strict';

angular
    .module('services.layout', []);

'use strict';

angular
    .module('services.layout')
    .factory('LayoutConfig', function LayoutConfigFactory (){
        var emptyLayoutConfig = {
            'navbar-back-button': false,
            'navbar-share-button': false,
            'navbar-done-button': false,
            'navbar-edit-button': false,
            'navbar-notification-button': false,
            'navbar-settings-button': false,
            'navbar-ranking-title': false,
            'main-menu': true,
            'main-menu-news': false,
            'main-menu-restaurants': false,
            'main-menu-add': false,
            'main-menu-gurus': false,
            'main-menu-profile': false,
            'navbar-geo-guru': false,
            'navbar-page-title': true,
            'navbar-map-button': false
        };

        var LayoutConfig = {
            emptyLayoutConfig: emptyLayoutConfig
        };

        return LayoutConfig;
    });

'use strict';

angular
    .module('services.layout')
    .factory('LayoutManager', ['LayoutConfig', '$translate', '$log', function LayoutManagerFactory (
        LayoutConfig,
        $translate,
        $log
    ) {

        var LayoutManager = {
            configureLayout: configureLayout,
            configureEmptyLayout: configureEmptyLayout,
            setTitle: setTitle,
            getTitle: getTitle,
            setTranslatedTitle: setTranslatedTitle,
            title: ''
        };

        return LayoutManager;

        function setTitle (title) {
            LayoutManager.title = title;
        }

        function getTitle () {
            return LayoutManager.title;
        }

        function setTranslatedTitle (title) {
            LayoutManager.title = $translate.instant(title);
        }

        function configureEmptyLayout () {
            configureLayout(LayoutConfig.emptyLayoutConfig);
        }

        function extendConfig(config) {
            return _.extend({}, LayoutConfig.emptyLayoutConfig, config);
        }

        function configureLayout (config) {
            // Check header-bar is fully rendered
            if (document.getElementsByClassName('navbar-page-title').length === 0) {
                return setTimeout(function(){
                    configureLayout(config)
                }, 100);
            }

            config = extendConfig(config);
            var domElement;
            for(var element in config) {
                if (config[element] === 'inherit') {
                    continue;
                }
                domElement = angular.element(document.getElementsByClassName(element));
                config[element] ? domElement.addClass('active') : domElement.removeClass('active');
            }
        }

    }]);

'use strict';

angular
    .module(AppHelper.APP_NAME)
    .factory('Loader', ['$injector', '$log', '$timeout', function LoaderFactory(
        $injector,
        $log,
        $timeout
    ) {

        var LOADING_TIMEOUT = 20*1000;
        var $ionicLoading              = $injector.get('$ionicLoading'),
            ValidatorViolatedContext   = $injector.get('ValidatorViolatedContext'),
            IonicValidateOnSubmitPopup = $injector.get('IonicValidateOnSubmitPopup'),
            $ionicNavBarDelegate       = $injector.get('$ionicNavBarDelegate');
        var trackingQueue = [];

        var Loader = {
            $loading : {
                show : function(opt){
                    return $ionicLoading.show(angular.extend({}, {
                        template : '<img src="img/loader.png">'
                    }, opt));
                },
                hide : $ionicLoading.hide
            },
            tracking : false,
            timeoutPromise: null,
            isTracking : function(){
                return Loader.tracking;
            },
            trackingQueue: [],
            track : track,
            loadingTimeout: LOADING_TIMEOUT
        };

        function track (promise) {
            $log.debug('[LOADER] Track');
            var trackId = Math.random();
            trackingQueue.push(trackId);
            Loader.tracking = true;
            showLoading();
            promise
                .then(onSuccess, onError)
                .finally(function () {
                    onFinally(trackId);
                });

            return promise;
        }

        function onFinally (trackId) {
            $log.debug('[LOADER] finally');
            trackingQueue = _.without(trackingQueue, trackId);
            if (trackingQueue.length === 0) {
                terminateTracking();
            }
        }

        function onSuccess () {
            $log.debug('[LOADER] on Success');
        }

        function onError (response) {
            $log.debug('[LOADER] On error');
            if (!response) {
                return;
            }
            $log.error(response);
            var context = ValidatorViolatedContext
                .getContextByRestResponse(response);
            new IonicValidateOnSubmitPopup(context).alert();
            return response;
        }

        function showLoading () {
            $log.debug('[LOADER] Show loader');
            Loader.$loading.show();
            startTimer();
        }

        function terminateTracking (){
            $log.debug('[LOADER] Terminate tracking');
            Loader.tracking = false;
            trackingQueue.length = 0;
            endTimer();
            Loader.$loading.hide();
        }

        function startTimer () {
            $log.debug('[LOADER] Start timer');
            if (null !== Loader.timeoutPromise) {
                return;
            }
            Loader.timeoutPromise = $timeout(function(){
                terminateTracking();
            }, Loader.loadingTimeout);
        }

        function endTimer () {
            $log.debug('[LOADER] End timer');
            $timeout.cancel(Loader.timeoutPromise);
            Loader.timeoutPromise = null;
        }

        return Loader;
    }]);

'use strict';

angular
    .module('services.log', []);

'use strict';

// http://blog.gospodarets.com/track_javascript_angularjs_and_jquery_errors_with_google_analytics
// http://www.bennadel.com/blog/2542-logging-client-side-errors-with-angularjs-and-stacktrace-js.htm

// using a provider+factory pattern so that we can use the Message factory
// in the error handler

angular
    .module(AppHelper.APP_NAME)
    .provider('$exceptionHandler', {
        $get: ['LogHandler', function(LogHandler) {
            return LogHandler;
        }]
    });
'use strict';

angular
    .module('services.log')
    .config(['$provide', function LogConfig($provide) {

        $provide.decorator('$log', ['$delegate', '$window', 'LogStack', function($delegate, $window, LogStack) {
            var debugFn = $delegate.debug;

            $delegate.debug = function( )
            {
                var args    = [].slice.call(arguments);
                LogStack.push(args);
                debugFn.apply(null, args)
            };

            return $delegate;
        }]);
    }]);

'use strict';

angular
    .module('services.log')
    .factory('LogStack', function LogStackFactory(){

        var MAX_LENGTH = 1000;
        var LogStack = {
            push: push,
            getFullStack: getFullStack,
            stack: []
        };

        return LogStack;

        function getFullStack () {
            var result = '';
            _.each(LogStack.stack, function(s){
                result += s + '\n';
            });
            return result;
        }

        function push (args) {
            var logArgs = _.clone(args);
            if (LogStack.stack.length > MAX_LENGTH) {
                LogStack.stack.shift();
            }
            var logEntry = getLogDate() + logArgs[0];
            logArgs.shift();
            if (logArgs.length > 0) {
                logEntry += (' ' + getObjectString(logArgs));
            }
            LogStack.stack.push(logEntry);
        }

        function getObjectString (objs) {
            var res = '{';
            _.each (objs, function(obj){

                if (isScalar(obj)) {
                    res += ' ' + obj + ' ';
                } else {
                    for (var name in obj) {
                        if (obj.hasOwnProperty(name)) {
                            if (isScalar(obj[name])) {
                                res += ( name + ':' + obj[name] + ', ');
                            }
                        }
                    }
                }
            });
            res += '}';
            return res;
        }

        function isScalar(obj){
            return (/string|number|boolean/).test(typeof obj);
        }

        function getLogDate() {
            var date = new Date ();
            var formattedDate = date.getHours() + ':' + date.getMinutes() + ':' +
                date.getSeconds() + '.' + date.getMilliseconds();

            return '[' + formattedDate + ']';
        }

    });


'use strict';

angular
    .module('services.log')
    .factory('LogHandler', ['$log', function($log) {
        return function() {
            $log.error.apply($log, arguments);
        };
    }]);

'use strict';

angular.module('services.map', [
    'services.geocode',
    'directives.tag',
    'entities.tag',
    'entities.geoname',
    'services.security',
    'services.event',
    'entities.flag'
]);

'use strict';

angular
    .module('services.map')
    .factory('MapService', ['$compile', '$log', '$state', 'Security', 'FlagManager', 'FlagMarkerOverlay', 'InfoboxOverlay', 'EventDispatcher', 'MeOverlay', 'Loader', 'UserGeolocation', function MapServiceFactory(
        $compile,
        $log,
        $state,
        Security,
        FlagManager,
        FlagMarkerOverlay,
        InfoboxOverlay,
        EventDispatcher,
        MeOverlay,
        Loader,
        UserGeolocation
    ) {
        var Google = window.google;
        var bounds = {};

        var removePointOfInterests = [
            {
              'featureType': 'poi',
              'elementType': 'labels',
              'stylers': [
                { 'visibility': 'off' }
              ]
            }
          ];

        var mapOptions = {
            zoom: 12, // default 12
            mapTypeId: Google.maps.MapTypeId.ROADMAP,
            streetViewControl: false,
            mapTypeControl: false,
            zoomControl: false,
            disableDefaultUI: true,
            disableDoubleClickZoom: false,
            styles: removePointOfInterests
        };

        var MapService = {
            map  : null,
            flags : [],
            myMarker : null,
            openInfobox : null,
            markers : [],
            coordinates : {
                lat: 0,
                lng: 0
            },
            currentZoom : mapOptions.zoom,
            clickOnMarker: false,
            createMap: createMap,
            createLatLng: createLatLng,
            panTo: panTo,
            setZoom: setZoom,
            setMarkersMap: setMarkersMap,
            deleteMarkers: deleteMarkers,
            closeInfoBox: closeInfoBox,
            addFlagMarker: addFlagMarker,
            centerOnGeoname: centerOnGeoname,
            setMyCoordinates: setMyCoordinates,
            searchAndReplaceFlags: searchAndReplaceFlags,
            setFlags: setFlags,
            refreshRendering: refreshRendering
        };

        return MapService;


        function createMap(coordinates) {
            if (MapService.map) {
                $log.debug('[MAP_SERVICE] Try to create map, but it exists so panTo and zoom', coordinates);
                delayedSetCenter(coordinates);

                return MapService.map;
            }

            var options = angular.extend({}, mapOptions, {
                center: coordinates,
                zoom : MapService.currentZoom
            });
            $log.debug('[MAP_SERVICE] Create map', options);
            MapService.map = new Google.maps.Map(document.getElementById('map'),options);

            Google.maps.event.addListener(MapService.map, 'zoom_changed', function() {
                MapService.currentZoom = MapService.map.getZoom();
            });

            Google.maps.event.addListener(MapService.map, 'bounds_changed', _.debounce(function(){
                MapService.map.getBounds();
                var ne = MapService.map.getBounds().getNorthEast(),
                    sw = MapService.map.getBounds().getSouthWest();
                bounds = {
                    minLat : sw.lat(),
                    minLng : sw.lng(),
                    maxLat : ne.lat(),
                    maxLng : ne.lng()
                };
                EventDispatcher.broadcast('map.bounds', bounds);
            }, 800));

            Google.maps.event.addListener(MapService.map, 'click', function() {
                if (!MapService.clickOnMarker) {
                    MapService.closeInfoBox();
                }
            });

            return MapService.map;
        }

        function createLatLng(lat, lng) {
            return new Google.maps.LatLng(lat,lng);
        }

        function panTo(coordinates) {
            $log.debug('[MAP_SERVICE] Pan to lat lng', coordinates );
            if (MapService.map) {
                MapService.map.panTo(coordinates);
            }
        }

        function setZoom(zoom) {
            $log.debug('[MAP_SERVICE] set zoom');
            MapService.map.setZoom(zoom || mapOptions.zoom);
        }

        function setMarkersMap(map) {
            for (var i = 0; i < MapService.markers.length; i++) {
                MapService.markers[i].setMap(map);
            }
        }

        function deleteMarkers() {
            MapService.setMarkersMap(null);
            MapService.markers = [];
            return MapService;
        }

        function closeInfoBox() {
            $log.debug('[MAP_SERVICE] Close infobox');
            return MapService.openInfobox && MapService.openInfobox.setMap(null);
        }

        function addFlagMarker(flag) {
            $log.debug('[MAP_SERVICE] Add flag marker');
            var marker = new FlagMarkerOverlay(flag, MapService.map);

            // attach click events to markers and infoboxes
            Google.maps.event.addListener(marker, 'click', function() {
                // Disable the closeInfobox event on the map
                // This is a workaround because evt.stopPropagation doesn't work
                MapService.clickOnMarker = true;
                setTimeout(function(){
                    MapService.clickOnMarker = false;
                },300);
                MapService.closeInfoBox();
                MapService.openInfobox = new InfoboxOverlay(flag, MapService.map);
                Google.maps.event.addListener(MapService.openInfobox, 'click', function() {
                    var params = {
                        restaurantId: flag.restaurantId
                    };
                    $state.go('restaurantView', params);
                });
            });

            MapService.markers.push(marker);
            return MapService;
        }

        function centerOnGeoname(geoname) {
            $log.debug('[MAP_SERVICE] Center on geoname => Pan to');
            MapService.coordinates =  new Google.maps.LatLng(
                parseFloat(geoname.lat), parseFloat(geoname.lng)
            );
            panTo(MapService.coordinates);
        }

        function searchAndReplaceFlags() {
            $log.debug('[MAP_SERVICE] Search and replace flags');
            deleteMarkers();
            angular.forEach(MapService.flags, function (flag) {
                addFlagMarker(flag);
            });
        }

        function setFlags(flags) {
            $log.debug('[MAP_SERVICE] Set flags');
            MapService.flags = flags;
            searchAndReplaceFlags();
        }

        function setMyCoordinates(coordinates) {
            MapService.coordinates =  MapService.createLatLng(coordinates.lat, coordinates.lng);

            if(MapService.myMarker) {
                MapService.myMarker.setMap(null);
            }

            MapService.myMarker = new MeOverlay(coordinates, MapService.map);
            setZoom(14);
            panTo(coordinates);
        }

        function refreshRendering () {
            $log.debug('[MAP_SERVICE] Refresh rendering');
            Google.maps.event.trigger(MapService.map, 'resize');
            MapService.map.setZoom( MapService.map.getZoom() );
        }

        function delayedSetCenter (coordinates) {
            setTimeout(function(){
                $log.debug('[MAP_SERVICE] Delayed set center');
                MapService.map.panTo(new Google.maps.LatLng(coordinates.lat,coordinates.lng));
                setZoom(12);
            },100);
        }

    }]);

'use strict';

angular
    .module('services.map')
    .factory('GeocodeMap', ['$log', '$timeout', 'Google', 'GoogleGeocoder', 'EventDispatcher', function GeocodeMapFactory(
        $log,
        $timeout,
        Google,
        GoogleGeocoder,
        EventDispatcher
    ) {
        var LONG_PRESS_DURATION = 1000;
        var MARKER_URL = 'http://d3e9bp48wqwk17.cloudfront.net/markers/marker-big.png';
        var GeocodeMap = {
            create: create,
            centerMapTo: centerMapTo,
            map: null,
            longPressCoordinates: null,
            clickTimer: null,
            marker: null
        };

        return GeocodeMap;

        function create (lat, lng) {
            $log.debug('[GEOCODE_MAP] Create');
            var latLng = {
                lat: parseFloat(lat),
                lng: parseFloat(lng)
            };
            GeocodeMap.map = new Google.maps.Map(document.getElementById('modal-address-map'), {
                center: latLng,
                scrollwheel: false,
                disableDefaultUI: true,
                zoom: 15
            });
            Google.maps.event.addListener(GeocodeMap.map, 'mouseup', onMouseUp);
            Google.maps.event.addListener(GeocodeMap.map, 'drag', onDrag);
            Google.maps.event.addListener(GeocodeMap.map, 'mousedown', onMouseDown);
        }

        function onDrag () {
            $log.debug('[GEOCODE_MAP] on drag');
            deactivateMapPanLoading();
            $timeout.cancel(GeocodeMap.clickTimer);
        }

        function onMouseUp () {
            $log.debug('[GEOCODE_MAP] on mouse up');
            deactivateMapPanLoading();
            $timeout.cancel(GeocodeMap.clickTimer);
        }

        function onMouseDown (e) {
            $log.debug('[GEOCODE_MAP] on mouse down', e);
            activateMapPanLoading();
            GeocodeMap.longPressCoordinates = {
                lat: e.latLng.lat(),
                lng: e.latLng.lng()
            };
            GeocodeMap.clickTimer = $timeout(function() {
                deactivateMapPanLoading();
                centerMapTo(GeocodeMap.longPressCoordinates.lat, GeocodeMap.longPressCoordinates.lng);
                GoogleGeocoder.reverseGeocode(GeocodeMap.longPressCoordinates.lat, GeocodeMap.longPressCoordinates.lng)
                    .then(function (addresses) {
                        if (addresses[0]) {
                            EventDispatcher.broadcast('geocodeMap.address', addresses[0]);
                        }
                    });
            }, LONG_PRESS_DURATION);
        }

        function addMarker (latLng) {
            var h = 100;
            var w = 80;
            var scale = 0.4;

            var image = {
                url: MARKER_URL,
                size: new Google.maps.Size(w, h),
                scaledSize: new Google.maps.Size(w * scale, h * scale),
                origin: new Google.maps.Point(0, 0),
                anchor: new Google.maps.Point(w * scale / 2, h * scale)
            };
            if (GeocodeMap.marker) {
                GeocodeMap.marker.setMap(null);
            }
            GeocodeMap.marker = new Google.maps.Marker({
                position: latLng,
                map: GeocodeMap.map,
                icon: image
            });
        }

        function centerMapTo (lat, lng) {
            GeocodeMap.map.panTo(new Google.maps.LatLng(lat, lng));
            addMarker({
                lat: lat,
                lng: lng
            });
        }

        function activateMapPanLoading () {
            angular.element(document.getElementsByClassName('map-pan-loading')).addClass('active');
        }

        function deactivateMapPanLoading () {
            angular.element(document.getElementsByClassName('map-pan-loading')).removeClass('active');
        }

    }]);

'use strict';

angular.module('services.notification', []);

'use strict';

angular
    .module('services.notification')
    .factory('NotificationBadge', function NotificationBadgeFactory() {
        return {
            counter: 0
        };

    });

'use strict';

angular
    .module('services.photo', [])

    .factory('PhotoUpload', ['$ionicActionSheet', '$cordovaCamera', '$translate', function PhotoFactory(
        $ionicActionSheet,
        $cordovaCamera,
        $translate
    ) {

        function uploadPhotoFactory(callback) {
            return function () {
                var options = {
                    quality : 75,
                    destinationType : 0, //Camera.DestinationType.DATA_URL,
                    // targetWidth : 800,
                    // targetHeight : 600,
                    allowEdit : true
                };

                var hideSheet = $ionicActionSheet.show({
                    buttons : [
                        {
                            text : 'Choose from library'
                        },
                        {
                            text : 'Take photo'
                        }
                    ],
                    titleText : $translate.instant('user.choose_picture'),
                    cancelText : $translate.instant('button.cancel'),
                    cancel : function () {
                        // add cancel code..
                    },
                    buttonClicked : function (index) {
                        options.sourceType = (index === 0) ? 0 : 1;
                        hideSheet();

                        if (!window.cordova) {
                            window.alert('No cordova camera plugin');
                            return null;
                        }

                        $cordovaCamera.getPicture(options).then(function (imageData) {
                            callback(imageData);
                        });
                    }
                });
            };
        }


        return {
            uploadPhotoFactory : uploadPhotoFactory
        };
    }]);

'use strict';

angular
    .module('services.price', []);

'use strict';

angular
    .module('services.price')
    .factory('PriceManager', ['ForeignExchange', function PriceManagerFactory(ForeignExchange) {
        var PriceManager = {
            convertAndRound: convertAndRound,
            convert: convert,
            getRangeLabel: getRangeLabel,
            getSliderLabel: getSliderLabel,
            maxPrice: 200,
            maxPriceNumber: 3
        };

        return PriceManager;

        function getSliderLabel (value, geoname) {
            var plus = value >= PriceManager.maxPrice ? ' +' : '';
            return convertAndRound(value, geoname) + getSymbolByGeoname(geoname) + plus;
        }

        function convert (value, geoname) {
            var rate = getRateByGeoname(geoname);
            return value * rate;
        }

        function convertAndRound(value, geoname) {
            return roundNumber(convert(value, geoname), geoname);
        }

        function roundNumber (value, geoname) {
            var exp = decimalToRound(geoname);
            var n = Math.pow(10, exp);
            return Math.round(value/n) * n;
        }

        function getRateByGeoname (geoname) {
            var currency = geoname.currencyCode ? geoname.currencyCode : 'USD';
            var rate = ForeignExchange.rates[currency];
            return rate ? rate : 1;
        }

        function getSymbolByGeoname (geoname) {
            return geoname.currencySymbol ? geoname.currencySymbol : '$';
        }

        function getRangeLabel (restaurant) {
            if (restaurant.averageCost) {
                var min = convertAndRound(restaurant.averageCost, restaurant.geoname);
                var interval = convertAndRound(10, restaurant.geoname);
                interval = interval < 10 ? 10 : interval;
                var max = min + interval;
                return min + '-' + max + getSymbolByGeoname(restaurant.geoname);
            }

            return 'N/A'
        }

        function decimalToRound(geoname) {
            var rate = getRateByGeoname(geoname);
            if (rate < PriceManager.maxPriceNumber) {
                return 1;
            } else if (rate < (PriceManager.maxPriceNumber * 10)) {
                return 2;
            } else if (rate < (PriceManager.maxPriceNumber * 100)) {
                return 3;
            } else if (rate < (PriceManager.maxPriceNumber * 1000)) {
                return 4;
            }

            return 5;
        }


    }]);


'use strict';

angular
    .module('services.price')
    .factory('ForeignExchange', function ForeignExchangeFactory() {

        return {
            'utctime' : '2015-04-11T23:40:01+02:00',
            'base' : 'USD',
            'rates' : {
                'AED' : '3.67315000',
                'AFN' : '57.90000200',
                'ALL' : '132.38450600',
                'AMD' : '475.54998800',
                'ANG' : '1.79000000',
                'AOA' : '108.69999700',
                'ARS' : '8.84470000',
                'AUD' : '1.30237200',
                'AWG' : '1.79000000',
                'AZN' : '1.05350000',
                'BAM' : '1.84405000',
                'BBD' : '2.00000000',
                'BDT' : '77.88645200',
                'BGN' : '1.84350000',
                'BHD' : '0.37695000',
                'BIF' : '1561.00000000',
                'BMD' : '1.00000000',
                'BND' : '1.36815000',
                'BOB' : '6.91000000',
                'BRL' : '3.07360000',
                'BSD' : '1.00000000',
                'BTN' : '62.29999900',
                'BWP' : '9.93560000',
                'BYR' : '14300.00000000',
                'BZD' : '1.99500000',
                'CAD' : '1.25695000',
                'CDF' : '927.50000000',
                'CHF' : '0.98150000',
                'CLF' : '0.02460000',
                'CLP' : '619.49499500',
                'CNH' : '6.21675000',
                'CNY' : '6.20660000',
                'COP' : '2516.50000000',
                'CRC' : '533.95001200',
                'CUP' : '1.00000000',
                'CVE' : '102.77449800',
                'CYP' : '0.55180000',
                'CZK' : '25.78700100',
                'DEM' : '1.84405000',
                'DJF' : '177.61999500',
                'DKK' : '7.04785000',
                'DOP' : '44.73500100',
                'DZD' : '98.77999900',
                'ECS' : '25000.00000000',
                'EGP' : '7.62750000',
                'ERN' : '15.27900000',
                'ETB' : '20.45700100',
                'EUR' : '0.94466600',
                'FJD' : '2.05055000',
                'FKP' : '0.64700000',
                'FRF' : '6.18475000',
                'GBP' : '0.68345700',
                'GEL' : '2.24105000',
                'GHS' : '3.82500000',
                'GIP' : '0.67960000',
                'GMD' : '42.93000000',
                'GNF' : '7300.00000000',
                'GTQ' : '7.65650000',
                'GYD' : '207.21000700',
                'HKD' : '7.74995000',
                'HNL' : '21.28000100',
                'HRK' : '7.14360000',
                'HTG' : '47.24269900',
                'HUF' : '280.07501200',
                'IDR' : '12913.00000000',
                'IEP' : '0.74258300',
                'ILS' : '3.99270000',
                'INR' : '62.27195000',
                'IQD' : '1162.44995100',
                'IRR' : '28180.00000000',
                'ISK' : '138.20500200',
                'ITL' : '1825.63647500',
                'JMD' : '114.57499700',
                'JOD' : '0.70840000',
                'JPY' : '120.17500300',
                'KES' : '93.07700300',
                'KGS' : '63.90000200',
                'KHR' : '4022.94995100',
                'KMF' : '463.85794100',
                'KPW' : '900.00000000',
                'KRW' : '1093.84497100',
                'KWD' : '0.30206000',
                'KYD' : '0.82000000',
                'KZT' : '185.80499300',
                'LAK' : '8114.95019500',
                'LBP' : '1507.50000000',
                'LKR' : '133.13000500',
                'LRD' : '84.66000400',
                'LSL' : '11.99725000',
                'LTL' : '2.93400000',
                'LVL' : '0.66265000',
                'LYD' : '1.37995000',
                'MAD' : '10.06115000',
                'MDL' : '17.82500100',
                'MGA' : '3062.89990200',
                'MKD' : '57.63000100',
                'MMK' : '1074.50000000',
                'MNT' : '1983.00000000',
                'MOP' : '7.98255000',
                'MRO' : '315.00000000',
                'MUR' : '36.31000100',
                'MVR' : '15.39000000',
                'MWK' : '441.80499300',
                'MXN' : '15.22685000',
                'MXV' : '2.81000000',
                'MYR' : '3.66440000',
                'MZN' : '35.85500000',
                'NAD' : '11.99725000',
                'NGN' : '199.05000300',
                'NIO' : '26.95630100',
                'NOK' : '8.10240000',
                'NPR' : '99.68000000',
                'NZD' : '1.32736900',
                'OMR' : '0.38495000',
                'PAB' : '1.00000000',
                'PEN' : '3.11950000',
                'PGK' : '2.68565000',
                'PHP' : '44.60800200',
                'PKR' : '101.82499700',
                'PLN' : '3.79395000',
                'PYG' : '4957.21484400',
                'QAR' : '3.64015000',
                'RON' : '4.15685000',
                'RSD' : '112.51000200',
                'RUB' : '53.57849900',
                'RWF' : '690.00000000',
                'SAR' : '3.75115000',
                'SBD' : '7.82520500',
                'SCR' : '13.74395000',
                'SDG' : '5.97000000',
                'SEK' : '8.83105000',
                'SGD' : '1.36815000',
                'SHP' : '0.67960000',
                'SIT' : '225.94760100',
                'SLL' : '4390.00000000',
                'SOS' : '689.95001200',
                'SRD' : '3.30000000',
                'STD' : '23077.50000000',
                'SVC' : '8.74500000',
                'SYP' : '188.92900100',
                'SZL' : '11.99725000',
                'THB' : '32.56600200',
                'TJS' : '5.98840000',
                'TMT' : '3.50000000',
                'TND' : '1.97735000',
                'TOP' : '1.98608000',
                'TRY' : '2.62850000',
                'TTD' : '6.35770000',
                'TWD' : '31.24200100',
                'TZS' : '1854.09997600',
                'UAH' : '23.40000000',
                'UGX' : '2975.00000000',
                'USD' : '1.00000000',
                'UYU' : '26.12500000',
                'UZS' : '2496.15991200',
                'VEF' : '6.35000000',
                'VND' : '21605.00000000',
                'VUV' : '108.91500100',
                'WST' : '2.47455100',
                'XAF' : '618.47729500',
                'XAG' : '0.06108700',
                'XAU' : '0.00082800',
                'XBT' : '0.00424821',
                'XCD' : '2.70000000',
                'XCP' : '0.36357000',
                'XDR' : '0.72900000',
                'XOF' : '618.47729500',
                'XPD' : '0.00128900',
                'XPF' : '112.51339700',
                'XPT' : '0.00085500',
                'YER' : '215.08500700',
                'ZAR' : '11.99325000',
                'ZMW' : '7.21000000',
                'ZWL' : '322.35501100'
            }
        };

    });


'use strict';

angular
    .module('services.prototype', [])
    .run(['$window', function ($window) {
        // Douglas Crockford's Supplant
        if(!$window.String.prototype.supplant){
            $window.String.prototype.supplant = function(o){
                return this.replace(/\{([^{}]*)\}/g, function(a, b){
                    var r = o[b];
                    return typeof r === 'string' || typeof r === 'number' ? r : a;
                });
            };
        }
    }]);

'use strict';

angular
    .module('services.ranking', ['entities.review']);


'use strict';

angular
    .module('services.ranking')
    .factory('RankingStateHelper', ['Review', '$http', 'Config', '$q', 'Cuisine', 'CuisineManager', 'GeonameManager', function RankingStateHelperFactory(
            Review,
            $http,
            Config,
            $q,
            Cuisine,
            CuisineManager,
            GeonameManager
        ) {

        var RankingStateHelper = {
            ranking: Review.$collection(),
            loadRanking: loadRanking,
            loadMoreRanking: loadMoreRanking,
            unsavedReview: null,
            pushUnsavedReview: pushUnsavedReview,
            popUnsavedReview: popUnsavedReview,
            loadRankingForMapList: loadRankingForMapList,
            fetchMoreRankingForMapList: fetchMoreRankingForMapList
        };

        return RankingStateHelper;

        function getCriteria($stateParams){
            return {
                user: $stateParams.userId,
                geoname: $stateParams.cityId,
                orderBy: $stateParams.orderBy,
                cuisine: $stateParams.cuisineId
            };
        }

        function loadRanking(criteria) {
            return RankingStateHelper.ranking
                .$refresh(criteria)
                .$then(function(ranking) {
                    // is it a new (i.e. empty ranking)? Note the corresponding
                    // code in the controller
                    if (!ranking) {
                        ranking = [];
                    }
                    var promCuisine = CuisineManager.findOneById(criteria.cuisine)
                        .then(function(cuisine) {
                            ranking.cuisine = cuisine;
                        });
                    var promGeoname = GeonameManager.findRestmodResource(criteria.geoname)
                        .$asPromise().then(function(g) {
                        ranking.geoname = g;
                    });
                    ranking.sort(function(a,b) {return a.position - b.position;});
                    ranking.userId = criteria.user;

                    return $q.all([promCuisine, promGeoname]).then(function(){
                        return ranking;
                    });
                }).$asPromise();
        }

        function loadMoreRanking(parameters){
            return RankingStateHelper.ranking.$fetchMore(parameters).$asPromise();
        }

        function pushUnsavedReview(r) {
            RankingStateHelper.unsavedReview = r;
        }

        function popUnsavedReview() {
            var defer = $q.defer();
            defer.resolve(angular.copy(RankingStateHelper.unsavedReview));
            return defer.promise.then(function(r) {
                RankingStateHelper.unsavedReview = null;
                return r;
            });
        }

        function buildForMapList(reviews){
            _.forEach(reviews, function(item) {
                    item.restaurantId = item.restaurant.id;
                    item.name = item.restaurant.name;
                    item.picture = item.restaurant.picture;
                    item.color = item.cuisine.color;
                    item.cuisineName = item.cuisine.name;
                    item.cuisineId = item.cuisine.id;
                });
            return reviews;
        }

        function extractParams($stateParams){
            return angular.extend({}, $stateParams, {
                orderBy : 'cuisine'
            });
        }

        function loadRankingForMapList($stateParams) {
            return RankingStateHelper.loadRanking(extractParams($stateParams))
                .then(function(reviews){
                    // mapping for maplist
                    buildForMapList(reviews);
                    return reviews;
                });
        }

        function fetchMoreRankingForMapList(list, $stateParams) {
            return list.$fetchMore(extractParams({
                    user: $stateParams.userId,
                    geoname: $stateParams.cityId
                }))
                .$asPromise().then(function(items) {
                    buildForMapList(items);
                    return items;
                });
        }
    }]);

'use strict';

angular
    .module('services.review', [
        'pascalprecht.translate'
    ])
    .factory('ReviewExtraFields', ['$translate', '$log', 'TagManager', function ReviewExtraFieldsFactory(
        $translate,
        $log,
        TagManager
    ){

        var ReviewExtraFields = {
            activate: activate,
            getByKey: getByKey,
            categories: [
                {
                    name: 'required',
                    required: true,
                    fields: [
                        {
                            key: 'best_for',
                            propertyName: 'bestFor',
                            title: 'modal.review.best_for.title',
                            description: 'modal.review.best_for.description',
                            modal: 'TAGS',
                            groupId: 0
                        }
                    ]
                },
                {
                    name: 'modal.review.category.food',
                    required: false,
                    fields: [
                        {
                            key: 'must_have',
                            propertyName: 'mustHave',
                            title: 'modal.review.must_have.title',
                            description: 'modal.review.must_have.description',
                            modal: 'INPUT_TEXT'
                        },
                        {
                            key: 'drinks',
                            propertyName: 'drinks',
                            title: 'modal.review.drinks.title',
                            description: 'modal.review.drinks.description',
                            modal: 'TAGS',
                            groupId: TagManager.DRINKS
                        },
                        {
                            key: 'dishes',
                            propertyName: 'dishes',
                            title: 'modal.review.dishes.title',
                            description: 'modal.review.dishes.description',
                            modal: 'TEXTAREA'
                        }
                    ]
                },
                {
                    name: 'modal.review.category.atmosphere',
                    required: false,
                    fields: [
                        {
                            key: 'location',
                            propertyName: 'location',
                            title: 'modal.review.location.title',
                            description: 'modal.review.location.description',
                            modal: 'TAGS',
                            groupId: TagManager.LOCATION
                        },
                        {
                            key: 'vibe',
                            propertyName: 'vibe',
                            title: 'modal.review.vibe.title',
                            description: 'modal.review.vibe.description',
                            modal: 'TAGS',
                            groupId: TagManager.VIBE
                        },
                        {
                            key: 'entertainment',
                            propertyName: 'entertainment',
                            title: 'modal.review.entertainment.title',
                            description: 'modal.review.entertainment.description',
                            modal: 'TAGS',
                            groupId: TagManager.ENTERTAINMENT
                        },
                        {
                            key: 'place',
                            propertyName: 'place',
                            title: 'modal.review.place.title',
                            description: 'modal.review.place.description',
                            modal: 'INPUT_TEXT'
                        },
                        {
                            key: 'dress_code',
                            propertyName: 'dressCode',
                            title: 'modal.review.dress_code.title',
                            description: 'modal.review.dress_code.description',
                            modal: 'INPUT_TEXT'
                        }
                    ]
                },
                {
                    name: 'modal.review.category.other',
                    required: false,
                    fields: [
                        {
                            key: 'discovered_on',
                            propertyName: 'discoveredOn',
                            title: 'modal.review.discovered_on.title',
                            description: 'modal.review.discovered_on.description',
                            modal: 'INPUT_TEXT'
                        },
                        {
                            key: 'special_mention',
                            propertyName: 'specialMention',
                            title: 'modal.review.special_mention.title',
                            description: 'modal.review.special_mention.description',
                            modal: 'TAGS',
                            groupId: TagManager.SPECIAL_MENTION
                        },
                        {
                            key: 'other_tags',
                            propertyName: 'otherTags',
                            title: 'modal.review.other_tags.title',
                            description: 'modal.review.other_tags.description',
                            modal: 'TAGS',
                            groupId: TagManager.OTHER,
                            canCreateNewTags: true
                        },
                        {
                            key: 'comment',
                            propertyName: 'comment',
                            title: 'modal.review.comment.title',
                            description: 'modal.review.comment.description',
                            modal: 'TEXTAREA'
                        }
                    ]
                }
            ]
        };

        function activate(properties) {
            $log.debug('[REVIEW_EXTRA_FIELDS] Activate with properties', properties);
            _.each(ReviewExtraFields.categories, function (category){
                _.each(category.fields, function (field) {
                    field.active = _.contains(properties, field.propertyName);
                });
            });
        }

        function getByKey(key) {
            var result = null;
            _.each(ReviewExtraFields.categories, function (category){
                _.each(category.fields, function (field) {
                    if (field.key === key) {
                        result = field;
                    }
                });
            });
            return result;
        }

        _.each(ReviewExtraFields.categories, function (category){
            category.name = $translate.instant(category.name);
            _.each(category.fields, function (field) {
                field.title = $translate.instant(field.title);
                field.description = $translate.instant(field.description);
            });
        });

        return ReviewExtraFields;

    }]);

'use strict';

angular.module('services.share', []);

'use strict';

angular
    .module('services.share')
    .factory('ShareService', ['$cordovaSocialSharing', function ShareServiceFactory(
        $cordovaSocialSharing
    ) {
        var
            title,
            message,
            link;

        return {
            share: share,
            config: config
        };

        function config (config) {
            title = config.title;
            message = config.message;
            link = config.link;
        }

        function share () {
            if (!window.cordova) {
                return window.alert('Missing cordova.');
            }

            return $cordovaSocialSharing.share(message, title, null, link);
        }
    }]);

'use strict';

angular
    .module('services.security.authorization', [
        'services.security.authorization.SecurityAuthorizationVoterConstant',
        'services.security.authorization.IsGrantedDirective'
    ]);

'use strict';

angular
    .module('services.security.authorization.IsGrantedDirective', [
        'services.security.SecurityProvider'
    ])

    .directive('isGranted', ['Security', 'ngIfDirective', function IsGrantedDirective(Security, ngIfDirective /*, $timeout*/) {
        var ngIf = ngIfDirective[0];

        return {
            transclude: ngIf.transclude,
            priority: ngIf.priority,
            terminal: ngIf.terminal,
            restrict: ngIf.restrict,
            link: function($scope, $element, $attr) {
                $attr.ngIf = function() {
                    // called too many times?
                    return Security.isGranted($scope.$eval($attr.isGranted), $scope.$eval($attr.isGrantedOn));
                };

                ngIf.link.apply(ngIf, arguments);
            }
        };

    }]);



'use strict';

angular
    .module('services.security.authorization.SecurityAuthorizationVoterConstant', [])
    .constant('SecurityAuthorizationVoter', {
        ACCESS_DENIED  : -1,
        ACCESS_ABSTAIN : 0,
        ACCESS_GRANTED : 1,
        EDIT   : 'EDIT',
        VIEW   : 'VIEW',
        CREATE : 'CREATE',
        DELETE : 'DELETE'
    });

'use strict';

angular
    .module('services.security.credential', [
        'services.facebook',
        'directives.user',
        'entities.user',
        'services.http'
    ]);

'use strict';

angular
    .module('services.security.credential')
    .factory('CredentialAuthChecker', ['HttpAuthApi', '$q', 'User', '$log', function CredentialAuthCheckerFactory(
        HttpAuthApi,
        $q,
        User,
        $log
    ) {

        var CONFIG = {
            routes : {
                'login'  : '/login',
                // 'resetPassword'  : '/reset-password/request',   // temporally unused: when deep link will be added it will be restored
                'resetPassword'  : '/generate-password',
                'confirmResetPassword'  : '/reset-password',
                'me'     : '/me',
                'signup' : '/register',
                'logout' : '/logout',
                'refresh': '/refresh'
            },
            jsonRoot : 'user'
        },

        /*
        * returns a User model from the response of the /auth endpoint
        */
        buildUserFromResponse = function (response) {
            $log.debug('[SECURITY][CREDENTIAL_AUTH_CHECKER] Build User From response');
            if(!response.data[CONFIG.jsonRoot]  || !response.data[CONFIG.jsonRoot].id) {
                $log.debug(response);
                throw new Error('User json root not found in the response');
            }
            var userData = response.data[CONFIG.jsonRoot];
            // add the credentials in two steps to keep the relationship
            var u = User.$new(userData.id).$extend(_.omit(userData, 'credentials'));
            _.each(userData.credentials, function(c) {
                // also use $reveal() to show these items in the collection
                // otherwise restmod would treat them as "unsaved"
                u.credentials.$new(c.id).$extend(c).$reveal();
                // the following doesnt work because it doesnt bind the
                // credentials to the parent scope:
                // cant $create when parent scope is not bound
                // u.credentials.push(Credential.$new(c.id).$extend(c));
            });

            return u;
        };

        return {
            login : function (credential, httpConfig) {
                return HttpAuthApi
                    .post(CONFIG.routes.login, credential.getData(), httpConfig || {})
                    .then(buildUserFromResponse);
            },
            /**
             * sends a request to reset the user password
             * @param  {Object} data       it should include only the email field
             * @param  {Object} httpConfig optional
             * @return {Promise}
             */
            resetPassword : function (data, httpConfig) {
                return HttpAuthApi
                    .post(CONFIG.routes.resetPassword, data, httpConfig || {});
            },
            /**
             * sends the reset password confirmation request with the new user password
             * @param  {Object} data       it should include the email and the token fields
             * @param  {Object} httpConfig optional
             * @return {Promise}
             */
            confirmResetPassword: function (data, httpConfig) {
                return HttpAuthApi
                    .post(CONFIG.routes.confirmResetPassword, data, httpConfig || {});
            },
            me: function (httpConfig) {
                $log.debug('[SECURITY][CREDENTIAL_AUTH_CHECKER] Me');
                return HttpAuthApi
                    .get(CONFIG.routes.me, httpConfig)
                    .then(buildUserFromResponse);
            },
            signup: function (credential) {
                var payload = credential.getData();
                $log.debug('[SECURITY][CREDENTIAL_AUTH_CHECKER] Sign up', payload);
                return HttpAuthApi
                    .post(CONFIG.routes.signup, payload)
                    .then(buildUserFromResponse);
            },
            logout: function () {
                return HttpAuthApi.post(CONFIG.routes.logout);
            },
            refresh: function (token, httpConfig) {
                $log.debug('[SECURITY][CREDENTIAL_AUTH_CHECKER] Refresh');
                return HttpAuthApi
                    .post(CONFIG.routes.refresh, {},
                        angular.extend({
                            params: { 'refresh-token' : token.refreshToken }
                        }, httpConfig || {})
                    )
                    .then(buildUserFromResponse);
            }
        };
    }]);

'use strict';

angular
    .module('services.security.credential')
    .factory('TastdEmailSignUpCredential', ['$log', function TastdEmailSignUpCredentialFactory(
        $log
    ) {

        var EmailCredential = {
            email: null,
            password: null,
            firstName: null,
            lastName: null,
            geoname: null,
            provider: 'EMAIL',
            init: init,
            getData: getData
        };

        return EmailCredential;

        function init (email, password) {
            $log.debug('[TASTD_EMAIL_SIGNUP_CREDENTIAL] Init', email, password);
            EmailCredential.email = email;
            EmailCredential.password = password;
        }

        function getData () {
            var data = {
                provider: 'EMAIL',
                email: EmailCredential.email,
                password: EmailCredential.password,
                firstName: EmailCredential.firstName,
                lastName: EmailCredential.lastName,
                geoname: EmailCredential.geoname
            };
            $log.debug('[TASTD_EMAIL_SIGNUP_CREDENTIAL] Get data', data);

            return data;
        }



    }]);

'use strict';

angular
    .module('services.security.credential')
    .config(['FacebookConnectProvider', function (FacebookConnectProvider) {
            FacebookConnectProvider.options({
            loginResponseTransformer : ['TastdFacebookCredential', '$log', 'response', function (TastdFacebookCredential, $log, response) {

                if(response.authResponse && response.authResponse.accessToken) {
                    $log.debug('[SECURITY] facebook response', response);
                    $log.debug('[SECURITY] facebook access token', response.authResponse.accessToken);
                }else{
                    $log.error('[SECURITY] Invalid response while facebook login', response);
                    return response;
                }

                return TastdFacebookCredential.init(response.authResponse.accessToken, response.me);
            }]
        });
    }])
    .factory('TastdFacebookCredential', ['$log', function (
        $log
    ) {

        var TastdFacebookCredential = {
            token: null,
            me: null,
            email: null,
            password: null,
            firstName: null,
            lastName: null,
            geoname: null,
            provider: 'FACEBOOK',
            init: init,
            getData: getData
        };

        return TastdFacebookCredential;

        function getData () {
            var data = {
                token : TastdFacebookCredential.token,
                geoname: TastdFacebookCredential.geoname,
                externalId : TastdFacebookCredential.externalId,
                provider: 'FACEBOOK',
                email: TastdFacebookCredential.email,
                firstName: TastdFacebookCredential.firstName,
                lastName: TastdFacebookCredential.lastName
            };
            $log.debug('[TASTD_FACEBOOK_CREDENTIAL] get data', data);

            return data;
        }

        function init (token, me) {
            $log.debug('[TASTD_FACEBOOK_CREDENTIAL] init', token, me);
            TastdFacebookCredential.provider = 'FACEBOOK';
            TastdFacebookCredential.token = token;
            TastdFacebookCredential.me = me;
            TastdFacebookCredential.firstName = me.first_name;
            TastdFacebookCredential.lastName = me.last_name;
            TastdFacebookCredential.email = me.email;
            TastdFacebookCredential.externalId = me.id;

            return TastdFacebookCredential;
        }

    }]);

'use strict';

angular
    .module('services.security.firewall.FirewallConfig', [
        'services.security.firewall.HttpFirewallBufferFactory',
        'services.security.SecurityEventsConstant'
    ])
    /**
     * $http interceptor.
     * On 401 response (without 'ignoreAuthModule' option) stores the request
     * and broadcasts 'event:auth-loginRequired'.
     * On 403 response (without 'ignoreAuthModule' option) discards the request
     * and broadcasts 'event:auth-forbidden'.
     */
    .config(['$httpProvider', function FirewallConfig($httpProvider) {
        $httpProvider.interceptors.push(['$rootScope', '$q', 'HttpFirewallBuffer', 'SecurityEvents', function($rootScope, $q, HttpFirewallBuffer, SecurityEvents) {
            return {
                responseError: function(rejection) {
                    if (!rejection.config || !rejection.config.ignoreHttpFirewall) { // configurable
                        switch (rejection.status) {
                            case 401:
                                var deferred = $q.defer();

                                if(HttpFirewallBuffer.isEmpty()) {
                                    $rootScope.$broadcast(SecurityEvents.LOGIN_REQUIRED, rejection);
                                }

                                HttpFirewallBuffer.append(rejection.config, deferred);

                                return deferred.promise;
                            case 403:
                                $rootScope.$broadcast(SecurityEvents.FORBIDDEN, rejection);
                                break;
                        }
                    }
                    // otherwise, default behaviour
                    return $q.reject(rejection);
                }
            };
        }]);
    }]);

'use strict';

angular
    .module('services.security.firewall', [
        'services.security.firewall.FirewallConfig',
        'services.security.firewall.HttpFirewallBufferFactory',
        'services.security.firewall.StateFirewallProvider',
        'services.security.firewall.HttpFirewallFactory'
    ]);

'use strict';

angular
    .module('services.security.firewall.HttpFirewallBufferFactory', [])

    .factory('HttpFirewallBuffer', ['$injector', function HttpFirewallBufferFactory ($injector) {
        /** Holds all the requests, so they can be re-requested in future. */
        var buffer = [];

        /** Service initialized later because of circular dependency problem. */
        var $http;

        function retryHttpRequest(config, deferred) {
            function successCallback(response) {
                deferred.resolve(response);
            }
            function errorCallback(response) {
                deferred.reject(response);
            }
            $http = $http || $injector.get('$http');
            $http(config).then(successCallback, errorCallback);
        }

        return {
            isEmpty : function () {
                return buffer.length === 0;
            },
            /**
             * Appends HTTP request configuration object with deferred response attached to buffer.
             */
            append: function(config, deferred) {
                buffer.push({
                    config: config,
                    deferred: deferred
                });
            },

            /**
             * Abandon or reject (if reason provided) all the buffered requests.
             */
            rejectAll: function(reason) {
                if (reason) {
                    for (var i = 0; i < buffer.length; ++i) {
                        buffer[i].deferred.reject(reason);
                    }
                }
                buffer = [];
            },

            /**
             * Retries all the buffered requests clears the buffer.
             */
            retryAll: function(updater) {
                for (var i = 0; i < buffer.length; ++i) {
                    retryHttpRequest(updater(buffer[i].config), buffer[i].deferred);
                }
                buffer = [];
            }
        };
    }]);

'use strict';

angular
    .module('services.security.firewall.HttpFirewallFactory', [
        'services.security.firewall.HttpFirewallBufferFactory',
        'services.security.SecurityEventsConstant'
    ])

    .factory('HttpFirewall', ['$rootScope', 'HttpFirewallBuffer', 'SecurityEvents', '$log', function HttpFirewallFactory($rootScope, HttpFirewallBuffer, SecurityEvents, $log) {
        return {
            /**
             * Call this function to indicate that authentication was successfull and trigger a
             * retry of all deferred requests.
             * @param data an optional argument to pass on to $broadcast which may be useful for
             * example if you need to pass through details of the user that was logged in
             * @param configUpdater an optional transformation function that can modify the
             * requests that are retried after having logged in.  This can be used for example
             * to add an authentication token.  It must return the request.
             */
            loginConfirmed: function(data, configUpdater) {
                $log.debug('[FIREWALL] http firewall login confirmed');
                var updater = configUpdater || function(config) {return config;};
                $rootScope.$broadcast(SecurityEvents.LOGIN_CONFIRMED, data);
                HttpFirewallBuffer.retryAll(updater);
            },
            loginRefreshed : function (data, configUpdater) {
                $log.debug('[FIREWALL] http firewall login refreshed');
                var updater = configUpdater || function(config) {return config;};
                $rootScope.$broadcast(SecurityEvents.LOGIN_REFRESHED, data);
                HttpFirewallBuffer.retryAll(updater);
            },
            /**
             * Call this function to indicate that authentication should not proceed.
             * All deferred requests will be abandoned or rejected (if reason is provided).
             * @param data an optional argument to pass on to $broadcast.
             * @param reason if provided, the requests are rejected; abandoned otherwise.
             */
            loginCancelled: function(data, reason) {
                $log.debug('[FIREWALL] http firewall login cancelled');
                HttpFirewallBuffer.rejectAll(reason);
            }
        };
    }]);


'use strict';

angular
    .module('services.security.firewall.StateFirewallProvider', [])

    .provider('StateFirewall', function StateFirewallProviderFactory() {

        var StateFirewallProvider = this;

        /**
         *
         * @type {{}}
         * @private
         */
        StateFirewallProvider._map   = {};

        /**
         * Provider options
         *
         * @private
         */
        StateFirewallProvider._options = {
            logFirewalledRoutes : false
        };

        /**
         * Update a state definition
         *
         * @param firewallDefinition
         * @param stateDefinition
         */
        StateFirewallProvider.updateStateDefinition = function (firewallDefinition, stateDefinition) {
            var resolvers = angular.isArray(firewallDefinition.resolvers) ? null : firewallDefinition.resolvers;

            // create and add resolvers
            if(!resolvers) {
                resolvers = {};
                angular.forEach(firewallDefinition.resolvers, function (resolverDefinition) {
                    resolvers[resolverDefinition.resolve || resolverDefinition.method] = [resolverDefinition.service, function (service) {
                        return service[resolverDefinition.method]();
                    }];
                });
            }


            if(Object.keys(resolvers).length !== 0) {
                if(stateDefinition.resolve) {
                    angular.extend(stateDefinition.resolve, resolvers);
                }else{
                    stateDefinition.resolve = resolvers;
                }
            }

        };

        /**
         * Register a firewalled area
         *
         * @param {string} areaName
         * @param {object} definition
         * @returns StateFirewallProvider
         */
        StateFirewallProvider.area = function (areaName, definition) {
            this._map[areaName] = angular.extend({}, definition, { name : areaName });
            return this;
        };

        /**
         * Get the area definition that match a state
         *
         * @param state
         * @returns {object|undefined} areaDefinition
         */
        StateFirewallProvider.match = function (state) {
            return window._.find(StateFirewallProvider._map, function (areaDefinition) {
                if(areaDefinition.pattern) {
                    return areaDefinition.pattern.test(state.name);
                }
                return false;
            });
        };

        /**
         * Setter/Getter enable/disable/get debug flag
         *
         * @param flag
         * @returns {StateFirewallProvider|boolean}
         */
        this.debugEnabled = function (flag) {

            if(flag) {
                this._options.logFirewalledRoutes = flag;
                return this;
            }

            return this._options.logFirewalledRoutes;
        };

        StateFirewallProvider.$get = function () {
            return  {
                match : StateFirewallProvider.match
            };
        };

        return StateFirewallProvider;
    });

'use strict';

angular
    .module('services.security.SecurityConfig', [
        'services.security.SecurityProvider',
        'services.config.ConfigProvider'
    ])
    .config(['SecurityProvider', 'ConfigProvider', function SecurityConfig(SecurityProvider, ConfigProvider) {
        SecurityProvider
            .setCredentialAuthService('CredentialAuthChecker')
            .setHttpHeaderKey(ConfigProvider.authTokenHeader());
        SecurityProvider.addVoter('UserVoter');
    }]);

'use strict';

angular
    .module('services.security.SecurityEventsConstant', [])
    .constant('SecurityEvents', {
        'SIGNUP_SUCCESS'      : 'security:signup-success',
        'LOGIN_SUCCESS'       : 'security:login-success',
        'LOGIN_CONFIRMED'     : 'security:login-confirmed',
        'LOGIN_REQUIRED'      : 'security:login-required',
        'LOGIN_REFRESHED'     : 'security:login-refreshed',
        'LOGIN_REFRESH_FAILED': 'security:login-refreshed-failed',
        'LOGIN_CANCELED'      : 'security:login-canceled',
        'LOGOUT_SUCCESS'      : 'security:logout-success',
        'LOGOUT_START'        : 'security:logout-start',
        'REMEMBER_ME_SUCCESS' : 'security:remember-me-success',
        'FORBIDDEN'           : 'security:forbidden',
        'DESTROY'             : 'security:destroy'
    });

'use strict';

angular
    .module('services.security.SecurityProvider', [
        'ionic',
        'services.security.SecurityConfig',
        'services.security.SecurityEventsConstant',
        'services.security.firewall',
        'services.security.token.HttpAuthTokenManagerProvider'
    ])
    .provider('Security', ['SecurityEvents', 'HttpAuthTokenManagerProvider', function SecurityProvider(
        SecurityEvents,
        HttpAuthTokenManagerProvider
    ) {

        var providerOptions =  {
            loginState : 'login',
            onSuccessLoginState : 'app',
            credentialAuthServiceId : null,
            HttpAuthTokenManagerServiceId : 'HttpAuthTokenManager',
            rememberMe : true,
            voters : []
        };

        this.setCredentialAuthService = function (credentialAuthServiceId) {
            providerOptions.credentialAuthServiceId = credentialAuthServiceId;
            return this;
        };

        this.setHttpHeaderKey = function (key) {
            HttpAuthTokenManagerProvider.setHttpHeaderKey(key);
            return this;
        };

        this.rememberMe = function (flag) {
            providerOptions.rememberMe = flag;
            return this;
        };

        this.addVoter = function (voter) {
            providerOptions.voters.push(voter);
            return this;
        };

        /*
        * the 'me' resolver is used in the private state,
        * the 'rememberMe' in the public state
        */
        this.resolvers = {
            me : ['Security','$log', function (
                Security,
                $log
            ) {
                $log.debug('[SECURITY] me resolver (check if token still valid)');
                return Security.me(false);
            }],
            rememberMe : ['Security','$q','$rootScope','$log', function (
                Security,
                $q,
                $rootScope,
                $log
            ) {
                $log.debug('[SECURITY] remember me resolver');
                var deferred = $q.defer();
                if(Security.isAuthenticated()) {
                    deferred.resolve(Security.user);
                    $log.debug('[SECURITY] user is already logged in');
                    $rootScope.$broadcast(SecurityEvents.REMEMBER_ME_SUCCESS, Security.user);
                    return deferred.promise;
                }

                if(Security.getAuthTokenManager().getToken()) {
                    $log.debug('[SECURITY] user was logged in a previous session');
                    $log.debug('[SECURITY] check if token still valid');
                    Security
                        .me(true)
                        .then(function (user) {
                            $log.debug('[SECURITY] logged in user from previous session', user);
                            Security.user = user;
                            deferred.resolve(Security.user);
                            $rootScope.$broadcast(SecurityEvents.REMEMBER_ME_SUCCESS, Security.user);
                        })
                        .catch(function (error) {
                            $log.warn('token from previous session is invalid', error);
                            Security.getAuthTokenManager().clearToken();
                            deferred.resolve(error);
                        });

                }else{
                    deferred.resolve();
                }

                return deferred.promise;
            }]
        };

        this.$get = ['$rootScope', '$injector', '$log', function SecurityFactory(
            $rootScope,
            $injector,
            $log
        ) {

            var credentialChecker          = getFromContainer(providerOptions.credentialAuthServiceId);
            var HttpAuthTokenManager       = getFromContainer(providerOptions.HttpAuthTokenManagerServiceId);

            var $modalService              = $injector.get('$ionicModal');
            var HttpFirewall               = $injector.get('HttpFirewall');
            var $q                         = $injector.get('$q');
            var SecurityAuthorizationVoter = $injector.get('SecurityAuthorizationVoter');
            var modal;

            var Security = {
                voters : [],
                user : null,
                destroy: destroy,
                isGranted: isGranted,
                isAuthenticated: isAuthenticated,
                showLogin: showLogin,
                refresh: refresh,
                login: login,
                resetPassword: resetPassword,
                confirmResetPassword: confirmResetPassword,
                signup: signup,
                logout: logout,
                me: me,
                rememberMe: rememberMe,
                getAuthTokenManager: getAuthTokenManager,
                EVENTS: SecurityEvents
            };

            function destroy () {
                $log.debug('[SECURITY] Destroy');
                var user  = angular.copy({}, Security.user);
                var token = angular.copy({}, HttpAuthTokenManager.getToken());
                HttpAuthTokenManager.clearToken();
                Security.user = null;
                $rootScope.$broadcast(SecurityEvents.DESTROY, user, token);
                return {
                    user: user,
                    token : token
                };
            }

            function isGranted(attributes, object) {

                if(Security.voters.length === 0) {
                    angular.forEach(providerOptions.voters, function (voter) {
                        if($injector.has(voter)) {
                            Security.voters.push($injector.get(voter));
                        }
                    });
                }

                var supportedVoters = [];
                angular.forEach(Security.voters, function (voter) {

                    if(voter.supports(object) && voter.supportsAttributes(attributes)) {
                        supportedVoters.push(voter);
                    }
                });

                for( var i = 0; i < supportedVoters.length; i++) {
                    var result = supportedVoters[i].vote(Security.user, object, attributes);
                    if(result ===  SecurityAuthorizationVoter.ACCESS_DENIED) {
                        return false;
                    }
                }

                return true;
            }

            function isAuthenticated () {
                return !!Security.user;
            }

            function showLogin() {
                $log.debug('[SECURITY] Show login');
                $modalService.fromTemplateUrl('js/services/security/signin/signin-modal.html', {
                    id: 'securityLogin', // ID to identify the modal that is firing the event!
                    animation: 'slide-in-up'
                }).then(function(m) {
                    modal = m;
                    modal.show();
                    modal.cancel = function () {
                        modal.remove();
                        onCancel();
                    };
                });
            }

            function refresh () {
                $log.debug('[SECURITY] Refresh');
                var token = HttpAuthTokenManager.getToken();
                if(!token) {
                    return $q.reject();
                }
                $log.debug('[SECURITY] try to refresh token with...', token);
                return credentialChecker
                    .refresh(HttpAuthTokenManager.getToken(), {ignoreHttpFirewall : true })
                    .then(function (user) {
                        return onRefresh(user);
                    });
            }

            function login(credential) {
                $log.debug('[SECURITY] Login');
                return credentialChecker
                    .login(credential, {ignoreHttpFirewall : true })
                    .then(function (user) {
                        return onLogin(user, credential);
                    });
            }

            /**
             * calls the resetPassword and returns a promise
             * @param  data         request params
             * @return Promise      promise resolved at server answer
             */
            function resetPassword(data) {
                $log.debug('[SECURITY] Reset password');
                return credentialChecker
                    .resetPassword(data, {ignoreHttpFirewall : true });
            }

            /**
             * calls the confirmResetPassword and returns a promise
             * @param  data         request params
             * @return Promise      promise resolved at server answer
             */
             function confirmResetPassword(data) {
                $log.debug('[SECURITY] Confirm reset password');
                return credentialChecker
                    .confirmResetPassword(data, {ignoreHttpFirewall : true });
            }

            function signup(credential) {
                $log.debug('[SECURITY] Sign up');
                return credentialChecker
                    .signup(credential)
                    .then(function (user) {
                        $log.debug('[SECURITY] On signup success user', user);
                        return onSignup(user, credential);
                    });
            }

            function logout() {
                $log.debug('[SECURITY] Logout');
                beforeLogout(Security.user);

                return credentialChecker
                    .logout()
                    .then(function () {
                        return onLogout();
                    });
            }

            function me(ignoreFirewall) {
                $log.debug('[SECURITY] Me with ignoreFirewall = ', ignoreFirewall);
                var config = {
                    ignoreHttpFirewall : ignoreFirewall === true
                };

                return credentialChecker
                    .me(config)
                    .then(function (user) {
                        $log.debug('[SECURITY] user is logged in', user);
                        Security.user = user;
                        return user;
                    }, function() {
                        $log.debug('[SECURITY] security login failed');
                        // if the login fails, it may just be that the access token has expired,
                        // but the refresh token is still good. So we try to refresh
                        return Security.refresh();
                    });
            }

            function getAuthTokenManager () {
                return HttpAuthTokenManager;
            }

            function rememberMe () {
                $log.debug('[SECURITY] Security Remember Me');
                return providerOptions.rememberMe;
            }

            function getFromContainer(service, _default) {

                if( $injector.has(service) ) {
                    return $injector.get(service);
                }
                return _default || null;
            }

            function onLogin(user, credential) {

                if(Security.user && Security.user.isEqual && !Security.user.isEqual(user)) {
                    $log.debug('[SECURITY] User changed without logout first.. destroy previous session');
                    Security.destroy();
                }

                // set the current user
                Security.user = user;

                $log.debug('[SECURITY] logged in user', user);

                // Set token for future requests
                HttpAuthTokenManager.setTokenFromUser(user);

                if(modal) {
                    modal.remove();
                    modal = null;
                    HttpFirewall.loginConfirmed(user, HttpAuthTokenManager.configUpdater);
                }

                // broadcast a success login event
                $rootScope.$broadcast(SecurityEvents.LOGIN_SUCCESS, Security.user, credential);

                return Security.user;
            }

            function onSignup(user, credential) {
                // broadcast a success signup event
                $rootScope.$broadcast(SecurityEvents.SIGNUP_SUCCESS, user, credential);
                return onLogin(user, credential);
            }

            function onRefresh(user) {
                // set the current user
                Security.user = user;

                $log.debug('[SECURITY] refreshed user', user);

                if(modal) {
                    modal.remove();
                    modal = null;
                }

                HttpAuthTokenManager.setTokenFromUser(user);

                HttpFirewall.loginRefreshed(user, HttpAuthTokenManager.configUpdater);

                return Security.user;
            }

            function onLogout() {
                var destroyed = Security.destroy();
                // broadcast a success logout event
                $rootScope.$broadcast(SecurityEvents.LOGOUT_SUCCESS, destroyed.user, destroyed.token);
                return destroyed.user;
            }

            function beforeLogout(user) {
                $rootScope.$broadcast(SecurityEvents.LOGOUT_START, user);
            }

            function onCancel() {
                var destroyed = Security.destroy();
                HttpFirewall.loginCancelled({}, $q.reject('modal login canceled!'));
                $rootScope.$broadcast(SecurityEvents.LOGIN_CANCELED, destroyed.user, destroyed.token);
                return destroyed.user;
            }

            return Security;
        }];

        return this;
    }]);

'use strict';

angular
    .module('services.security.SecurityRun', [
        'services.security.SecurityProvider',
        'services.storage',
        'services.facebook'
    ])

    .run(['$rootScope', 'Security', '$state', '$ionicLoading', '$log', 'SimpleLocalStorage', 'HttpAuthTokenManager', '$q', function SecurityRun(
        $rootScope,
        Security,
        $state,
        $ionicLoading,
        $log,
        SimpleLocalStorage,
        HttpAuthTokenManager,
        $q
    ) {

        $log.debug('[SECURITY][RUN]');

        if(HttpAuthTokenManager.getToken()) {
            $log.debug('[SECURITY][RUN] AuthTokenManager set from storage');
            HttpAuthTokenManager.setTokenFromStorage();
        }

        if(Security.EVENTS && Security.EVENTS.LOGIN_REQUIRED) {
            $rootScope.$on(Security.EVENTS.LOGIN_REQUIRED, function (event, resp) {
                // we don't try to refresh if the access token is invalid, because
                // it makes no sense (the refresh token will be invalid as well)
                var refreshIfNeeded = function() {
                    if (resp.data && resp.data.id === 'AuthTokenExpired') {
                        return Security.refresh();
                    } else {
                        return $q.reject();
                    }
                };

                $q.when(refreshIfNeeded())
                    .catch(function (error) {
                        $rootScope.$broadcast(Security.EVENTS.LOGIN_REFRESH_FAILED, error);
                        Security.showLogin();
                    });
            });
        }


        var log = function (event) {
            $log.debug('[SECURITY] "%s" event received..', event.name);
        };

        $rootScope.$on(Security.EVENTS.SIGNUP_SUCCESS, function (e) {
            log(e);
        });

        $rootScope.$on(Security.EVENTS.LOGIN_SUCCESS, function (e) {
            log(e);
            SimpleLocalStorage.setObject('lastGeoname', Security.user.geoname);
            SimpleLocalStorage.setObject('restoSearchGeoname', Security.user.geoname);
        });

        $rootScope.$on(Security.EVENTS.REMEMBER_ME_SUCCESS, function (e) {
            log(e);
            $state.go('wall');
        });

        $rootScope.$on(Security.EVENTS.LOGOUT_START, function (e) {
            log(e);
            $ionicLoading.show();
        });

        $rootScope.$on(Security.EVENTS.LOGIN_CANCELED, function (e) {
            log(e);
            $state.go('signin');
        });

        $rootScope.$on(Security.EVENTS.LOGOUT_SUCCESS, function (e) {
            log(e);
            location.href = '/#/signin';
            location.reload();
        });

        $rootScope.$on(Security.EVENTS.LOGIN_REFRESH_FAILED, function (e) {
            log(e);
            // $ionicLoading.hide();
        });

        $rootScope.$on(Security.EVENTS.DESTROY, function (e) {
            log(e);
        });
    }]);

'use strict';

angular
    .module('services.security', [
        'services.security.SecurityConfig',
        'services.security.SecurityRun',
        'services.security.authorization',
        'services.security.credential',
        'services.security.firewall',
        'services.security.signin',
        'services.security.signup',
        'services.security.token',
        'services.security.voter',
        'services.security.SecurityEventsConstant',
        'services.security.SecurityProvider'
    ]);

'use strict';

angular
    .module('services.security.signin.EmailSigninCtrl', [
        'services.security.SecurityProvider',
        'services.security.credential'
    ])
    .controller('EmailSigninCtrl', ['Security', 'TastdEmailSignUpCredential', '$state', 'Loader', '$timeout', '$scope', function (
        Security,
        TastdEmailSignUpCredential,
        $state,
        Loader,
        $timeout,
        $scope
    ) {
        var ctrl = this;
        this.credential = TastdEmailSignUpCredential;

        this.login = function () {
            return Loader.track(Security.login(ctrl.credential)
                       .then(function () {
                            return $state.go('wall');
            }), {name: 'emailSigninLogin'});
        };

        this.onDestroy = function () {
            if(ctrl.timer) {
                $timeout.cancel(ctrl.timer);
            }
        };

        this.goForgot = function() {
            if ($scope.modal) {
                $scope.modal.cancel();
            }
            $state.go('user.passwordReset');
        };

        $scope.$on('$destroy', this.onDestroy);

        return this;
    }]);

'use strict';

angular
    .module('services.security.signin.FacebookSignInCtrl', [
        'services.security.SecurityProvider',
        'services.facebook',
        'services.security.credential'
    ])

    .controller('FacebookSignInCtrl', ['$scope', 'Security', 'FacebookConnect', 'Loader', '$log', 'AlertPopup', '$state', function (
        $scope,
        Security,
        FacebookConnect,
        Loader,
        $log,
        AlertPopup,
        $state
    ) {
        var ctrl = this;

        ctrl.login = function () {

            var facebookPromise = FacebookConnect
                .login()
                .then(function (credential) {
                    return Security
                            .login(credential)
                            .then(function () {
                                return $state.go('wall');
                            });
                })
                .catch(function () {
                    $log.error('[SECURITY] Facebook login fails!', arguments);
                    AlertPopup.create('popup.not_registered.title','popup.not_registered.text')
                        .then(function() {
                            $state.go('signup');
                        });
                });

            Loader.track(facebookPromise, {loadingTimeout: 60 * 1000});
        };

        return ctrl;
    }]);

'use strict';

angular
    .module('services.security.signin', [
        'services.security.signin.EmailSigninCtrl',
        'services.security.signin.FacebookSignInCtrl'
    ])

    .controller('SigninModalCtrl', function () {});


'use strict';

angular
    .module('services.security.signup.FacebookSignUpCtrl', [
        'services.security.SecurityProvider',
        'services.facebook',
        'services.security.credential'
    ])
    .controller('FacebookSignUpCtrl', ['$scope', 'Security', 'FacebookConnect', '$log', 'Loader', '$state', function (
        $scope,
        Security,
        FacebookConnect,
        $log,
        Loader,
        $state
    ) {
        var ctrl = this;

        ctrl.signup = function () {

            var facebookPromise = FacebookConnect
                .login()
                .then(function (credential) {
                    var promise = Security
                        .signup(credential)
                        .then(function () {
                            return $state.go('onBoardingIntro');
                        });
                    return Loader.track(promise);
                })
                .catch(function () {
                    $log.error('[SECURITY] Facebook login fails!', arguments);
                });

            Loader.track(facebookPromise);
        };

        return ctrl;
    }]);

'use strict';

angular
    .module('services.security.signup', [
        'services.security.signup.FacebookSignUpCtrl'
    ]);

'use strict';

angular
    .module('services.security.token.HttpAuthTokenManagerProvider', ['services.storage'])

    .provider('HttpAuthTokenManager', function HttpAuthTokenManagerProviderFactory() {

        var HttpAuthTokenManagerProvider = this,
            config = {
                headerKey : 'X-Auth-Token',
                storageKey : 'X-Auth-Token-Storage',
                fields : {
                    authToken : 'authToken',
                    refreshToken : 'refreshToken'
                }
            };

        HttpAuthTokenManagerProvider.setHttpHeaderKey = function (key) {
            config.headerKey = key;
        };

        HttpAuthTokenManagerProvider.setFields = function (fields) {
            angular.extend(config.fields, fields || {});
        };

        this.$get = ['$http', 'SimpleLocalStorage', '$log', function ($http, SimpleLocalStorage, $log) {

            var TokenManager = {
                clearToken: clearToken,
                getToken: getToken,
                setToken: setToken,
                setTokenFromUser: setTokenFromUser,
                setTokenFromStorage: setTokenFromStorage,
                createToken: createToken,
                configUpdater: configUpdater,
                token: null
            };

            function getToken () {
                $log.debug('[SECURITY][HTTP_AUTH_TOKEN_MANAGER] get token');
                if(!TokenManager.token) {
                    var localToken = SimpleLocalStorage.getObject(config.storageKey);
                    if(!localToken) {
                        return null;
                    }
                    TokenManager.token = createToken(localToken.authToken, localToken.refreshToken);
                }

                return TokenManager.token;
            }

            function clearToken () {
                $log.debug('[SECURITY][HTTP_AUTH_TOKEN_MANAGER] Clear token');
                delete $http.defaults.headers.common[config.headerKey];
                TokenManager.token = undefined;
                SimpleLocalStorage.clear(config.storageKey);
                return TokenManager;
            }

            function setToken (t) {
                $log.debug('[SECURITY][HTTP_AUTH_TOKEN_MANAGER] set token in http headers and in local storage', t);
                $http.defaults.headers.common[config.headerKey] = t.authToken;
                TokenManager.token = t;
                SimpleLocalStorage.setObject(config.storageKey, t);
            }

            function setTokenFromUser (user) {
                $log.debug('[SECURITY][HTTP_AUTH_TOKEN_MANAGER] set token from user');
                var token = createToken(user[config.fields.authToken], user[config.fields.refreshToken]);
                this.setToken(token);
            }

            function setTokenFromStorage () {
                $log.debug('[SECURITY][HTTP_AUTH_TOKEN_MANAGER] set token from storage');
                var token = getToken();

                setToken(token);
            }

            function createToken (authToken, refreshToken) {
                $log.debug('[SECURITY][HTTP_AUTH_TOKEN_MANAGER] Create token');
                return {
                    authToken     : authToken,
                    refreshToken  : refreshToken
                };
            }

            function configUpdater (requestConfig) {
                requestConfig.headers[config.headerKey] = TokenManager.getToken().authToken;
                return requestConfig;
            }

            return TokenManager;
        }];

        return HttpAuthTokenManagerProvider;
    });

'use strict';

angular
    .module('services.security.token', [
       'services.security.token.HttpAuthTokenManagerProvider'
    ]);

'use strict';

angular
    .module('services.security.voter', [])
    .factory('UserVoter', ['SecurityAuthorizationVoter', 'FakeType', 'User', function UserVoterFactory(SecurityAuthorizationVoter, FakeType, User) {
        return {
            supportsAttributes : function (attribute) {
                return [SecurityAuthorizationVoter.EDIT].indexOf(attribute) > -1;
            },
            supports: function (object) {
                return FakeType.check(object, FakeType.get(User));
            },
            vote : function (authenticatedUser, user, attribute) {
                switch(attribute){
                case SecurityAuthorizationVoter.EDIT:
                    if(authenticatedUser.id === user.id) {
                        return SecurityAuthorizationVoter.ACCESS_GRANTED;
                    }
                    return SecurityAuthorizationVoter.ACCESS_DENIED;
                default:
                    return SecurityAuthorizationVoter.ACCESS_ABSTAIN;
                }
            }
        };
    }]);

'use strict';

angular.module('services.storage',[]);

'use strict';

angular
    .module('services.storage')
    .factory('SimpleLocalStorage', ['$window', '$log', 'JsonUtil', function SimpleLocalStorageFactory(
        $window,
        $log,
        JsonUtil
    ) {
        return {
            'set': function(key, value) {
                $window.localStorage[key] = value;
                return this;
            },
            'get': function(key, defaultValue) {
                return $window.localStorage[key] || defaultValue;
            },
            setObject: function(key, value) {
                $log.debug('[STORAGE] set storage key "%s"', key, value);
                $window.localStorage[key] = JsonUtil.toJson(value);
                return this;
            },
            getObject: function(key, defaultObj) {
                return angular.fromJson($window.localStorage[key] || null) || defaultObj;
            },
            clear : function (key) {
                delete $window.localStorage[key];
                return this;
            }
        };
    }]);

'use strict';

angular
    .module('services.translations', [
        'pascalprecht.translate'
    ])

    .config(['$translateProvider', 'ConfigProvider', function (
        $translateProvider,
        ConfigProvider
    ) {

        ConfigProvider.PARAMETERS.LANGUAGES = [
            {
                'label' : 'italiano',
                'id' :'it'
            },{
                'label' : 'english',
                'id' :'en'
            }
        ];

        var supportedLocales = {
            'it': 'it',
            'it-it': 'it',
            'it-ch': 'it'
        };
        var defaultLocale = 'en';

        setLocale(getLanguage());

        function setLocale(key){
            var locale = supportedLocales[key] || defaultLocale;
            $translateProvider.preferredLanguage(locale);
            ConfigProvider.PARAMETERS.LANGUAGE = locale;
        }

        function getLanguage(){
            return navigator.language.toLowerCase();
        }

    }]);

'use strict';

angular
    .module('services.translations')
    .config(['$translateProvider', function ($translateProvider) {
        $translateProvider.translations('en', {

            // MESSAGE (GLOBAL LABELS)
            'message.loading': 'loading',

            // BUTTONS
            'button.continue_with_facebook': 'Continue with facebook',
            'button.signup_using_email': 'Sign up using email',
            'button.have_an_account': 'Have an account?',
            'button.share.tastd': 'Share Tastd!',
            'button.create_account': 'Create new account',
            'button.login': 'Log in',
            'button.invite': 'Invite Friends',
            'button.logout': 'Logout',
            'button.save': 'Save',
            'button.start': 'Start',
            'button.send': 'Send',
            'button.sign_up': 'Sign up',
            'button.done': 'Done',
            'button.cancel': 'Cancel',
            'button.reset': 'Reset',
            'button.reset_all': 'Reset All',
            'button.select_all': 'Select All',
            'button.next': 'Next',
            'button.edit_comment': 'Edit Comment',
            'button.my_favorites': 'My Favourites',
            'button.wishlist': 'Wishlist',
            'button.all_cities': 'All cities',
            'button.login_with_facebook': 'Login with Facebook',
            'button.sign_up_with_facebook': 'Sign up with Facebook',
            'button.lists': 'Lists',
            'button.feed': 'News',
            'button.city.change': 'change city',
            'button.tap.to.change': 'tap to change',

            // WALL
            'wall.page_title': 'News',
            'wall.no_results': 'You are not following anyone yet - add some gurus and see what restaurants they love!',
            'wall.no_results_button': 'Add gurus',

            // HOME
            'home.my_restaurants': 'My Restaurants',
            'home.my_gurus': 'Gurus\' tips',
            'home.filter': 'Filter',
            'home.filters': 'Filters',
            'home.map': 'Map',
            'home.list': 'List',
            'home.filter.cuisine': 'Cuisine',
            'home.filter.select_a_city': 'Select a city',
            'home.filter.select_gurus': 'Select Gurus',
            'home.filter.gurus_name': 'Guru\'s name',
            'home.filter.price': 'Price',
            'home.filter.tags': 'Tags',
            'home.filter.no_cuisines': 'There aren\'t cuisines for the city and gurus you selected',
            'home.average_cost_per_person': 'Average cost per person',
            'home.find_gurus': 'Find Gurus',
            'home.add_new_restaurant': 'Add new restaurant',
            'home.no_gurus': 'You do not follow any guru here',
            'home.no_restaurants': 'You do not have any restaurant here. Add a restaurant.',
            'home.all_gurus_selected': 'All gurus selected',
            'home.no_result_with_filters': 'You have no result with these filters. Change filters or select a different guru.',
            'home.no_result_without_filters': 'None of the gurus you are following have restaurants in this city.',
            'home.no_result_without_filters.button': 'Add gurus',
            'home.gurus_selected': 'gurus selected',

            // FLASH MESSAGE
            'flash_message.password_sent': 'Password sent. Check your email.',
            'flash_message.restaurant_updated': 'Restaurant updated',
            'flash_message.account_updated': 'Account updated successfully.',
            'flash_message.feedback_sent': 'Feedback sent. Thank you.',
            'flash_message.password_updated': 'Password updated successfully',
            'flash_message.review.cuisine_updated': 'Cuisine updated successfully',
            'flash_message.review.price_updated': 'Price updated successfully',
            'flash_message.review.comment_updated': 'Comment updated successfully',
            'flash_message.review.photo_uploaded': 'Congrats, your photo has been added!',
            'flash_message.review.photo_deleted': 'Your photo has been deleted.',
            'flash_message.review.tag_friends': 'Friends tagged successfully',

            // FILTERS
            'filter.show_only_wishlist': 'Show only wishlist',
            'filter.show_only_favorites': 'Show only favorites',
            'filter.all_cuisines': 'all cuisines',
            'filter.only_wishlist': 'Only Wishlist',
            'filter.only_favourites': 'Only Favourites',

            // NOTIFICATION
            'notification.page_title': 'Notifications',
            'notification.no_result': 'You don\'t have any notification at the moment.',
            'notification.to_favorites': 'to favorites',
            'notification.to_wishlist' : 'to wishlist',
            'notification.added' : 'Added',
            'notification.you_added' : 'You added',
            'notification.started_following_you': 'Started following you',
            'notification.started_following': 'Started following',
            'notification.started_using_tastd': 'Started using Tastd',

            // INVITE
            'invite.page_title': 'Become a top guru',
            'invite.share.title': 'Check out Tastd',
            'invite.share.message': 'I keep track of my favorite restaurants on Tastdâ€¦ check them out! Build your own list, share it with your friends and become a recognized food guru!',
            'invite.follower_rule': 'for every new follower',
            'invite.common_restaurants_rule': 'every time they like one of your restaurants',

            // ON BOARDING
            'on_boarding.intro.title': 'Welcome to Tastd',
            'on_boarding.intro.description': 'Discover all the favourite restaurants of your friends',
            'on_boarding.top_restaurants.page_title': 'Pick your favourites',
            'on_boarding.top_restaurants.input_placeholder': 'Search in',
            'on_boarding.friends.page_title': 'Follow your friends',
            'on_boarding.top_gurus.page_title': 'Top gurus in',
            'on_boarding.suggestions.page_title': 'Your friends suggest',
            'on_boarding.trending_title': 'Trending on Tastd now',
            'on_boarding.gurus.result_order': 'Results ordered by score in ',
            'on_boarding.gurus.follow_top': 'Follow top gurus in',
            'on_boarding.restaurant.headline': 'Here\'s some top picks in',
            'on_boarding.restaurant.subtitle1': 'tap on + and add them to your favorites',
            'on_boarding.restaurant.subtitle2': 'or wishlist',
            'on_boarding.no_gurus': 'Wow, you are the first guru in this city...<br/> be a great one!',
            'on_boarding.no_restaurants': 'Hey, you have the honor to add the first restaurant here!',
            'on_boarding.facebook_friends': 'Follow your facebook friends',
            'on_boarding.no_facebook_friends': 'No Results',
            'on_boarding.top_gurus': 'Top Gurus',

            // MODAL

            'modal.geo_guru.no_gurus.text': 'You have no guru here. Find a new guru.',
            'modal.geo_guru.no_gurus.button': 'Find new guru',
            'modal.address.title': 'Search address',
            'modal.address.field': 'Search address or tap on the map',
            'modal.review.add_field': 'Add field',

            'modal.review.category.food': 'Food',
            'modal.review.category.atmosphere': 'Atmosphere',
            'modal.review.category.other': 'Other',

            'modal.review.must_have.title': 'Must order items',
            'modal.review.must_have.description': 'What\'s the place famous for',
            'modal.review.drinks.title': 'Drinks',
            'modal.review.drinks.description': 'Wine list, signature cocktails...',
            'modal.review.dishes.title': 'Dishes that I ordered',
            'modal.review.dishes.description': 'Add notes on dishes you\'d like to remember',

            'modal.review.location.title': 'Location',
            'modal.review.location.description': 'Rooftop, terrace, water front, great view...',
            'modal.review.vibe.title': 'Vibe',
            'modal.review.vibe.description': 'Chic, romantic, casual, business, families...',
            'modal.review.entertainment.title': 'Entertainment',
            'modal.review.entertainment.description': 'Live music, karaoke, shows...',
            'modal.review.place.title': 'Best place to sit',
            'modal.review.best_for.title': 'Best for',
            'modal.review.best_for.description': 'For what this place is perfect for?',
            'modal.review.place.description': 'Anything to remember for the next time?',
            'modal.review.dress_code.title': 'Dress code',
            'modal.review.dress_code.description': 'Anything to remember for the next time?',

            'modal.review.discovered_on.title': 'Discovered on',
            'modal.review.discovered_on.description': 'How did you find out about this place',
            'modal.review.special_mention.title': 'Special mention',
            'modal.review.special_mention.description': 'Best in the city, top 3, best in the world',
            'modal.review.other_tags.title': 'Other tags',
            'modal.review.other_tags.description': 'Reservation, recommended, no reservation',
            'modal.review.comment.title': 'Comment',
            'modal.review.comment.description': 'Open field to write anything you like',

            'modal.tag.new_tag': 'Create a new tag',
            'modal.tag.new_tag.placeholder': 'New tag name',

            // POPUPS
            'popup.contacts_not_available.title': 'Contacts not available',
            'popup.contacts_not_available.text': 'Please go to Settings > Privacy > Contacts and enable Tastd',
            'popup.reset_password.title': 'Reset password',
            'popup.reset_password.text': 'Are you sure you want to Reset your password?',
            'popup.unfollow.title': 'Unfollow',
            'popup.unfollow.text': 'Are you sure you want to unfollow this user?',
            'popup.logout.title': 'Logout',
            'popup.logout.text': 'Are you sure you want to log out?',
            'popup.delete_account.title': 'Delete account',
            'popup.delete_account.text': 'Are you sure you want to delete your account?',
            'popup.not_registered.title': 'Not registered yet',
            'popup.not_registered.text': 'Since you\'re not yet registered to the Tastd app, let\'s go to the signup page',
            'popup.geolocation_not_available.title': 'Geolocation not available',
            'popup.geolocation_not_available.text': 'Please enable it by going to Settings -> Tastd -> Location and tapping "While using the app"',
            'popup.restaurant_delete.title': 'Remove restaurant',
            'popup.restaurant_delete.text': 'Are you sure to remove this restaurant from your list? Your photos, tags and comments regarding this restaurant will be lost',
            'popup.inaccurate_address.title': 'Inaccurate address',
            'popup.inaccurate_address.text': 'Missing street number. Are you sure you want to continue?',
            'popup.inaccurate_address.ok': 'Yes,<br/>continue',
            'popup.inaccurate_address.no': 'No,<br/>improve it',
            'popup.disconnected.title': 'Connection problem',
            'popup.disconnected.text': 'Make sure you are connected to the Internet and try again',
            'popup.disconnected.ok': 'Try again',
            'popup.already_registered_with_email.title': 'You are already registered with email and password.',
            'popup.already_registered_with_email.text': 'Try to login with email and password.',

            // RANKING
            'ranking.reorder.page_title': 'Ranking',
            'ranking.user_no_restaurants': 'This user hasn\'t added any restaurants yet.',
            'ranking.review_first_restaurant': 'Review your first restaurant',
            'ranking.you_no_restaurants': 'You haven\'t added any restaurants yet. Get started by clicking the button.',
            'ranking.cities.page_title': 'Cities',
            'rankingList.pageTitle': 'Reviews in',
            'ranking.reorder.no_results': 'You have no restaurants in your favourites for this city and cuisine',

            // RESTAURANT
            'restaurant.top': 'Most popular',
            'restaurant.gurus_review.page_title': 'Gurus\' Reviews',
            'restaurant.info': 'Info',
            'restaurant.create.page_title': 'Create restaurant',
            'restaurant.load_more': 'Load more',
            'restaurant.average_price': 'Average price',
            'restaurant.edit_restaurant': 'Edit restaurant',
            'restaurant.add_restaurant': 'Add restaurant',
            'restaurant.leave_a_comment': 'Leave a comment for your friends',
            'restaurant.around_you': 'Around you',
            'restaurant.my_review': 'My review',
            'restaurant.ranked_in': 'Ranked in',
            'restaurant.edit_price': 'Edit price',
            'restaurant.gurus_who_like_this': 'Gurus who like this',
            'restaurant.place': 'place',
            'restaurant.place_in': 'place in',
            'restaurant.search_on_the_web': 'Search on the web',
            'restaurant.search_on_web.page_title': 'Search on the web',
            'restaurant.add_to_my_favorites': 'I love it',
            'restaurant.add_to_my_wishlist': 'I want to try it',
            'restaurant.added_to_favorites': 'Added to favorites',
            'restaurant.added_to_wishlist': 'Added to wishlist',
            'restaurant.restaurant_name': 'Restaurant name',
            'restaurant.search.no_results': 'There are no restaurants matching this criteria',
            'restaurant.report_error.send': 'Send Error',
            'restaurant.report_error.description': 'Error description',
            'restaurant.report_an_error': 'Report an error',


            'restaurant.review.my_opinion': 'My opinion',
            'restaurant.review.perfect_for': 'Perfect for',
            'restaurant.review.perfect_for.placeholder': 'For what occasion is this place perfect for',
            'restaurant.review.drinks': 'Drinks',
            'restaurant.review.place': 'Place',
            'restaurant.review.atmosphere': 'Atmosphere',
            'restaurant.review.location': 'Location',
            'restaurant.review.vibe': 'Vibe',
            'restaurant.review.other': 'Other',
            'restaurant.review.entertainment': 'Entertainment',
            'restaurant.review.special_mention': 'Special Mention',
            'restaurant.review.discovered_on': 'Discovered on',
            'restaurant.review.dishes': 'Dishes',
            'restaurant.review.dress_code': 'Dress code',
            'restaurant.review.must_have': 'Must have',
            'restaurant.review.last_visited': 'Last Visit',
            'restaurant.review.visit_count': 'Visit count',

            'restaurant.review.cost_per_person': 'Cost per person',
            'restaurant.review.whole_meal_including_tax': 'Whole meal, including tax & tips',
            'restaurant.review.leave_a_comment': 'Leave a comment for your friends',
            'restaurant.review.tag_friends': 'Tag Friends',
            'restaurant.review.tag_friends_placeholder': 'Tag a friend to recommend this restaurant',
            'restaurant.review.add_field': 'Add field to customize the review',
            'restaurant.search.select_city_and_search': 'Select the city and search your restaurant',
            'restaurant.search.not_in_list': 'Create new restaurant',
            'restaurant.search.add_your_restaurant': 'Add your restaurants!',
            'restaurant.search.add_your_restaurant_from_any_city': 'Add your favorite restaurants and restaurants you want to try. Add restaurants from any city!',

            'restaurant.select_a_city': 'Select a city',
            'restaurant.city_name': 'City name',
            'restaurant.duplicated_title': 'Similar restaurants',
            'restaurant.duplicated_text': 'Restaurants with the same name exist nearby. Select one from the list or continue anyway.',
            'restaurant.duplicated_continue': 'Continue anyway',

            // SETTINGS
            'settings.menu.account': 'Account',
            'settings.menu.information_and_support': 'Information &amp; support',
            'settings.page_title': 'Settings',
            'settings.rate_tastd': 'Rate tastd',
            'settings.edit_account.page_title': 'Edit Account',
            'settings.terms_and_conditions': 'Terms and conditions',
            'settings.privacy_policy': 'Privacy policy',
            'settings.password.page_title': 'Change password',
            'settings.password.new_password': 'New password',
            'settings.password.old_password': 'Old password',
            'settings.password.retype_password': 'Retype password',
            'settings.notification.page_title': 'Notification',
            'settings.language.page_title': 'Language',
            'settings.delete_account': 'Delete account',
            'settings.feedback.page_title': 'Send Feedback',
            'settings.feedback.message_title': 'Title',
            'settings.feedback.message_content': 'Feedback',
            'settings.notifications.weekly_email_update' : 'Weekly email update',

            // User
            'user.gurus': 'Gurus',
            'user.where_do_you_live': 'Where do you live?',
            'user.add_gurus.page_title': 'Add Gurus',
            'user.profile': 'Profile',
            'user.following.page_title': 'Followings',
            'user.follower.page_title': 'Followers',
            'user.first_name': 'First Name',
            'user.last_name': 'Last Name',
            'user.email': 'Email',
            'user.password': 'Password',
            'user.type_guru_name': 'Type guruâ€™s name',
            'user.no_followers': 'No followers',
            'user.no_followings': 'No followings',
            'user.search_from_contacts': 'Friends from contacts',
            'user.friends_from_facebook': 'Friends from Facebook',
            'user.find_your_friends': 'Find your friends already on Tastd',
            'user.choose_a_city': 'Choose a city*',
            'user.search.type_a_full_name': 'Type a full-name...',
            'user.find_tastd_gurus': 'Find Tastd Gurus',
            'user.from_facebook': 'From Facebook',
            'user.from_contacts': 'From Contacts',
            'user.about_me': 'About me, e.g. fashion photographer traveling the world',
            'user.how_i_define_myself': 'How I define myself, e.g. food lover',
            'user.birth_year': 'Birth year (Nobody will see it!)',
            'user.confirm_password': 'Confirm password',
            'user.edit_profile': 'Edit profile',
            'user.me': 'Me',
            'user.create_account.page_title': 'Create account',
            'user.login.page_title': 'Login',
            'user.current_city': 'Current city',
            'user.choose_picture': 'Choose a picture',
            'user.forgot_password': 'Forgot your password?',
            'user.become_a_top_guru': 'Become a top guru',
            'user.all_gurus': 'All my gurus',
            'user.select_a_city.title': 'Your city is required',
            'user.select_a_city.text': 'Please select the city where you live',
            'user.signup.facebook.email_missing': 'We are sorry but we can\'t see your facebook email. Register normally with email and password.',

            // VALIDATION

            'validator.violation_errors.required': 'This value is required',
            'validator.violation_errors.confirmPassword': 'Password should match',
            'validator.violation_errors.email': 'Please enter a valid email',
            'validator.violation_errors.minlength': 'This value is too short, at least {{ min }} characters long',
            'validator.violation_errors.maxlength': 'This value is too short, at least {{ max }} characters long',

            // OTHER
            //
            // Please use a scope as button.call_me_now
            // and underscores

            'or': 'or',
            'required': 'required',
            'hi': 'hi',
            'error_houston': 'Houston, we\'ve got a problem!',
            'done': 'done',
            'profile': 'profile',
            'login': 'login',
            'logout': 'logout',
            'signup': 'signup',
            'back': 'back',
            'map': 'Map',
            'no.results': 'We found no results for your search',
            'firstName': 'Firstname',
            'lastName': 'Lastname',
            'firstname': 'Firstname',
            'lastname': 'Lastname',
            'searching': 'Searching',
            'search': 'Search',
            'headline': 'Headline',
            'confirmPassword': 'Confirm password',
            'password': 'Password',
            'email': 'Email'
        });


    }]);

'use strict';

angular
    .module('services.translations')
    .config(['$translateProvider', function ($translateProvider) {
        $translateProvider.translations('it', {

            // MESSAGE (GLOBAL LABELS)
            'message.loading': 'loading',

            // BUTTONS
            'button.continue_with_facebook': 'Continue con facebook',
            'button.signup_using_email': 'Registrati con email',
            'button.have_an_account': 'Hai un account?',
            'button.share.tastd': 'Condividi Tastd!',
            'button.create_account': 'Crea account',
            'button.login': 'Login',
            'button.invite': 'Invita i tuoi amici',
            'button.logout': 'Logout',
            'button.sign_up': 'Registrati',
            'button.done': 'Ok',
            'button.save': 'Salva',
            'button.start': 'Inizia',
            'button.send': 'Invia',
            'button.cancel': 'Annulla',
            'button.reset': 'Azzera',
            'button.reset_all': 'Azzera tutti',
            'button.select_all': 'Seleziona tutti',
            'button.next': 'Avanti',
            'button.all_cities': 'Tutte le cittÃ ',
            'button.edit_comment': 'Modifica commento',
            'button.my_favorites': 'I miei preferiti',
            'button.wishlist': 'Da provare',
            'button.login_with_facebook': 'Login con Facebook',
            'button.sign_up_with_facebook': 'Registrati con Facebook',
            'button.lists': 'Liste',
            'button.feed': 'NovitÃ ',
            'button.city.change': 'cambia cittÃ ',
            'button.tap.to.change': 'clicca per cambiare',

            // WALL
            'wall.page_title': 'NovitÃ ',
            'wall.no_results': 'Non stai seguendo nessun guru al momento - aggiungi nuovi guru e scopri che ristoranti ti suggeriscono!',
            'wall.no_results_button': 'Aggiungi guru',

            // HOME
            'home.my_restaurants': 'Miei ristoranti',
            'home.my_gurus': 'Consigliati',
            'home.filter': 'Filtro',
            'home.filters': 'Filtri',
            'home.map': 'Mappa',
            'home.list': 'Lista',
            'home.filter.cuisine': 'Cucina',
            'home.filter.price': 'Prezzo',
            'home.filter.tags': 'Tag',
            'home.filter.select_a_city': 'Seleziona una cittÃ ',
            'home.filter.select_gurus': 'Seleziona Guru',
            'home.filter.gurus_name': 'Nome',
            'home.filter.no_cuisines': 'Non ci sono cucine che corrispondono alla tua ricerca',
            'home.average_cost_per_person': 'Costo medio per persona',
            'home.find_gurus': 'Cerca Guru',
            'home.add_new_restaurant': 'Aggiungi nuovo ristorante',
            'home.no_gurus': 'Non hai nessun guru in questa cittÃ ',
            'home.no_restaurants': 'Non hai ristoranti in questa cittÃ . Aggiungine uno.',
            'home.all_gurus_selected': 'Tutti i guru selezionati',
            'home.no_result_with_filters': 'Non hai nessun risultato con questi filtri. Cambia filtri o scegli un altro guru.',
            'home.no_result_without_filters': 'Nessuno dei guru che stai seguendo suggerisce ristoranti in questa cittÃ .',
            'home.no_result_without_filters.button': 'Aggiungi guru',
            'home.gurus_selected': 'guru selezionati',

            // FLASH MESSAGE
            'flash_message.password_sent': 'Ti abbiamo inviato una nuova password. Controlla la tua casella di posta.',
            'flash_message.account_updated': 'Account aggiornato con successo.',
            'flash_message.restaurant_updated': 'Ristorante aggiornato con successo',
            'flash_message.feedback_sent': 'Grazie per il tuo feedback.',
            'flash_message.password_updated': 'Password aggiornata con successo',
            'flash_message.review.cuisine_updated': 'Cucina aggiornata con successo',
            'flash_message.review.price_updated': 'Prezzo aggiornato con successo',
            'flash_message.review.comment_updated': 'Commento aggiornato con successo',
            'flash_message.review.photo_uploaded': 'Foto caricata con successo',
            'flash_message.review.photo_deleted': 'Foto cancellata con successo',
            'flash_message.review.tag_friends': 'Amici aggiunti con successo',

            // FILTERS
            'filter.show_only_wishlist': 'Mostra solo wishlist',
            'filter.show_only_favorites': 'Mostra solo preferiti',
            'filter.all_cuisines': 'Tutte le cucine',
            'filter.only_wishlist': 'Solo Wishlist',
            'filter.only_favourites': 'Solo preferiti',

            // NOTIFICATION
            'notification.page_title': 'Notifiche',
            'notification.no_result': 'Non hai notifiche al momento.',
            'notification.to_favorites': 'ai preferiti',
            'notification.to_wishlist' : 'ai posti da provare',
            'notification.added' : 'Ha aggiunto',
            'notification.you_added' : 'Hai aggiunto',
            'notification.started_following_you': 'Ha iniziato a seguirti',
            'notification.started_following': 'Ha iniziato a seguire',
            'notification.started_using_tastd': 'Ha iniziato ad usare Tastd',

            // INVITE
            'invite.page_title': 'Diventa un guru',
            'invite.share.title': 'Scopri Tastd',
            'invite.share.message': 'Tengo traccia dei miei ristoranti preferiti su Tastd! Scrivi anche tu la tua lista e diventa un food guru!',
            'invite.follower_rule': 'per ciascun nuovo follower',
            'invite.common_restaurants_rule': 'ogni volta che aggiungono un tuo ristorante',

            // ON BOARDING
            'on_boarding.intro.title': 'Benvenuto su Tastd',
            'on_boarding.top_restaurants.page_title': 'Aggiungi i tuoi preferiti',
            'on_boarding.top_restaurants.input_placeholder': 'Cerca in',
            'on_boarding.friends.page_title': 'Segui i tuoi amici',
            'on_boarding.top_gurus.page_title': 'Top guru in',
            'on_boarding.suggestions.page_title': 'I tuoi amici suggeriscono',
            'on_boarding.intro.description': 'Scopri tutti i ristoranti preferiti dei tuoi amici',
            'on_boarding.trending_title': 'Trending su Tastd',
            'on_boarding.gurus.result_order': 'Risultati ordinati per punteggio a',
            'on_boarding.gurus.follow_top': 'Segui i top guru a',
            'on_boarding.restaurant.headline': 'Ecco i ristoranti piÃ¹ in voga a',
            'on_boarding.restaurant.subtitle1': 'clicca + e aggiungili ai tuoi preferiti',
            'on_boarding.restaurant.subtitle2': 'o tra quelli che vuoi provare',
            'on_boarding.no_gurus': 'Wow, sei il primo guru in questa cittÃ !',
            'on_boarding.no_restaurants': 'Ehi, hai l\'onore di aggiungere i primi ristoranti in questa cittÃ !',
            'on_boarding.facebook_friends': 'Segui i tuoi amici di facebook',
            'on_boarding.no_facebook_friends': 'Nessun risultato',
            'on_boarding.top_gurus': 'Top Guru',

            // MODALS
            'modal.geo_guru.no_gurus.text': 'Non hai guru qui. Aggiungi un nuovo guru.',
            'modal.geo_guru.no_gurus.button': 'Aggiungi guru',
            'modal.address.title': 'Cerca indirizzo',
            'modal.address.field': 'Cerca indirizzo o tap sulla mappa',

            'modal.review.category.food': 'Food',
            'modal.review.category.atmosphere': 'Atmosfera',
            'modal.review.category.other': 'Altro',


            'modal.review.must_have.title': 'Must',
            'modal.review.must_have.description': 'Per cosa Ã¨ famoso questo ristorante',
            'modal.review.drinks.title': 'Drinks',
            'modal.review.drinks.description': 'Lista di vini...',
            'modal.review.dishes.title': 'Cosa ho ordinato',
            'modal.review.dishes.description': 'Che piatti vuoi ricordare',

            'modal.review.location.title': 'Location',
            'modal.review.location.description': 'Vista mare, terrazza, giardino...',
            'modal.review.vibe.title': 'Vibe',
            'modal.review.vibe.description': 'Chic, romantico, casual, business, famiglie...',
            'modal.review.entertainment.title': 'Intrattenimento',
            'modal.review.entertainment.description': 'Live music, karaoke, spettacoli...',
            'modal.review.place.title': 'Miglior posto dove sedersi',
            'modal.review.place.description': 'Qualcosa da ricordare per la prossima volta?',
            'modal.review.best_for.title': 'Best for',
            'modal.review.best_for.description': 'Per cosa Ã¨ perfetto questo posto?',
            'modal.review.dress_code.title': 'Dress code',
            'modal.review.dress_code.description': 'Qualcosa da ricordare per la prossima volta?',

            'modal.review.discovered_on.title': 'Scoperto su',
            'modal.review.discovered_on.description': 'Come sei venuto a conoscere questo posto',
            'modal.review.special_mention.title': 'Menzione speciale',
            'modal.review.special_mention.description': 'Migliore della cittÃ ',
            'modal.review.other_tags.title': 'Altri tags',
            'modal.review.other_tags.description': 'Prenotazione, Raccomandato...',
            'modal.review.comment.title': 'Commento',
            'modal.review.comment.description': 'Campo aperto per ogni altra tua nota',

            'modal.tag.new_tag': 'Crea un nuovo tag',
            'modal.tag.new_tag.placeholder': 'Nuovo tag',

            // POPUPS
            'popup.contacts_not_available.title': 'Contatti non disponibili',
            'popup.contacts_not_available.text': 'Per favore vai su Impostazioni > Privacy > Contatti e abilita Tastd',
            'popup.reset_password.title': 'Reset password',
            'popup.reset_password.text': 'Sei sicuro di voler reimpostare la password?',
            'popup.unfollow.title': 'Rimuovi guru',
            'popup.unfollow.text': 'Sei sicuro di non voler piÃ¹ seguire questo guru?',
            'popup.logout.title': 'Logout',
            'popup.logout.text': 'Sei sicuro di voler uscire?',
            'popup.delete_account.title': 'Cancella account',
            'popup.delete_account.text': 'Sei sicuro di voler cancellare il tuo account?',
            'popup.not_registered.title': 'Non registrato',
            'popup.not_registered.text': 'Dato che non sei ancora registrato andiamo alla pagina di login',
            'popup.geolocation_not_available.title': 'Geolocation non disponibile',
            'popup.geolocation_not_available.text': 'Per favore abilitala andando su Impostazioni -> Tastd -> Location e clicca su "Mentre uso la app"',
            'popup.restaurant_delete.title': 'Rimuovi ristorante',
            'popup.restaurant_delete.text': 'Sei sicuro di voler rimuovere il ristorante dalla tua lista? Le tue foto, tag e commenti andranno persi.',
            'popup.inaccurate_address.title': 'Indirizzo non preciso',
            'popup.inaccurate_address.text': 'Manca il numero civico. Sei sicuro di voler continuare comunque?',
            'popup.inaccurate_address.ok': 'Si,<br/>continua',
            'popup.inaccurate_address.no': 'No,<br/>miglioralo',
            'popup.disconnected.title': 'Problema di rete',
            'popup.disconnected.text': 'Assicurati di essere connesso ad internet e prova di nuovo',
            'popup.disconnected.ok': 'Prova ancora',

            // RANKING
            'ranking.reorder.page_title': 'Classifica',
            'ranking.user_no_restaurants': 'Questo utente non ha ancora aggiunto ristoranti.',
            'ranking.review_first_restaurant': 'Aggiungi il tuo primo ristorante',
            'ranking.you_no_restaurants': 'Non hai ancora aggiunto alcun ristorante. Inizia ora cliccando il pulsante.',
            'ranking.cities.page_title': 'CittÃ ',
            'rankingList.pageTitle': 'Review a',
            'ranking.reorder.no_results': 'Non hai ristoranti tra i tuoi preferiti da riordinare per questa cittÃ  e cucina',

            // RESTAURANT
            'restaurant.top': 'Top',
            'restaurant.create.page_title': 'Crea ristorante',
            'restaraunt.gurus_review.page_title': 'Le review dei miei guru',
            'restaurant.info': 'Info',
            'restaurant.load_more': 'Carica altri risultati',
            'restaurant.average_price': 'Prezzo medio',
            'restaurant.edit_restaurant': 'Modifica ristorante',
            'restaurant.add_restaurant': 'Aggiungi ristorante',
            'restaurant.leave_a_comment': 'Lascia un commento per i tuoi amici',
            'restaurant.around_you': 'Intorno a te',
            'restaurant.my_review': 'La mia review',
            'restaurant.ranked_in': 'Classificato in',
            'restaurant.edit_price': 'Modifica prezzo',
            'restaurant.gurus_who_like_this': 'Le review dei guru',
            'restaurant.gurus_review.page_title': 'Review dei guru',
            'restaurant.place': 'posto',
            'restaurant.place_in': 'posizione in',
            'restaurant.search_on_the_web': 'Cerca in internet',
            'restaurant.search_on_web.page_title': 'Cerca in internet',
            'restaurant.add_to_my_favorites': 'Mi piace',
            'restaurant.add_to_my_wishlist': 'Voglio provarlo',
            'restaurant.added_to_favorites': 'Aggiunto ai preferiti',
            'restaurant.added_to_wishlist': 'Da provare',
            'restaurant.restaurant_name': 'Nome del ristorante',
            'restaurant.search.no_results': 'Non ci sono ristoranti che corrispondono alla tua ricerca',
            'restaurant.report_error.send': 'Invia errore',
            'restaurant.report_error.description': 'Descrizione dell\'errore',
            'restaurant.report_an_error': 'Segnala errore',

            'restaurant.review.my_opinion': 'La mia opinione',
            'restaurant.review.perfect_for': 'Perfetto per',
            'restaurant.review.perfect_for.placeholder': 'For what occasion is this place perfect for',
            'restaurant.review.drinks': 'Drinks',
            'restaurant.review.place': 'Place',
            'restaurant.review.atmosphere': 'Atmosfera',
            'restaurant.review.location': 'Location',
            'restaurant.review.vibe': 'Vibe',
            'restaurant.review.other': 'Altri tag',
            'restaurant.review.entertainment': 'Entertainment',
            'restaurant.review.special_mention': 'Menzione speciale',
            'restaurant.review.discovered_on': 'Scoperto su',
            'restaurant.review.dishes': 'Piatti',
            'restaurant.review.dress_code': 'Dress code',
            'restaurant.review.must_have': 'Must have',
            'restaurant.review.last_visited': 'Ultima visita',
            'restaurant.review.visit_count': 'Visite',

            'restaurant.review.cost_per_person': 'Costo per persona',
            'restaurant.review.whole_meal_including_tax': 'Pasto completo, tasse e mance incluse',
            'restaurant.review.leave_a_comment': 'Lascia un commento per i tuoi amici',
            'restaurant.review.tag_friends': 'Tag Friends',
            'restaurant.review.tag_friends_placeholder': 'Aggiungi un amico per raccomandare questo ristorante',
            'restaurant.review.add_field': 'Aggiungi campi per personalizzare la review',
            'restaurant.search.select_city_and_search': 'Seleziona la cittÃ  e cerca il tuo ristorante',
            'restaurant.search.not_in_list': 'Crea un nuovo ristorante',
            'restaurant.search.add_your_restaurant': 'Aggiungi il tuo ristorante!',
            'restaurant.search.add_your_restaurant_from_any_city': 'Aggiungi i tuoi ristoranti preferiti e i ristoranti che vuoi provare. Aggiungi ristoranti di ogni cittÃ !',
            'restaurant.confirm_delete': 'Sei sicuro di voler rimuovere il ristorante dalle tue liste? Le tue foto, tag e commenti su questo ristorante verranno persi',
            'restaurant.select_a_city': 'Seleziona una cittÃ ',
            'restaurant.city_name': 'Nome della cittÃ ',
            'restaurant.duplicated_title': 'Ristoranti simili',
            'restaurant.duplicated_text': 'Esistono ristoranti simili nelle vicinanze. Scegli un ristorante dalla lista oppure prosegui comunque.',
            'restaurant.duplicated_continue': 'Continua comunque',

            // SETTINGS
            'settings.menu.account': 'Account',
            'settings.menu.information_and_support': 'Informazioni e supporto',
            'settings.page_title': 'Impostazioni',
            'settings.rate_tastd': 'Dai un voto a Tastd',
            'settings.edit_account.page_title': 'Modifica account',
            'settings.terms_and_conditions': 'Termini e condizioni',
            'settings.privacy_policy': 'Privacy',
            'settings.password.page_title': 'Cambia password',
            'settings.password.new_password': 'Nuova password',
            'settings.password.old_password': 'Vecchia password',
            'settings.password.retype_password': 'Ridigita password',
            'settings.notification.page_title': 'Notifiche',
            'settings.language.page_title': 'Lingua',
            'settings.delete_account': 'Cancella account',
            'settings.feedback.page_title': 'Invia feedback',
            'settings.feedback.message_title': 'Titolo',
            'settings.feedback.message_content': 'Feedback',
            'settings.notifications.weekly_email_update' : 'Email settimanale',

            // User
            'user.gurus': 'Guru',
            'user.where_do_you_live': 'In che cittÃ  abiti?',
            'user.add_gurus.page_title': 'Aggiungi Guru',
            'user.profile': 'Profilo',
            'user.following.page_title': 'Segue',
            'user.follower.page_title': 'Viene seguito da',
            'user.first_name': 'Nome',
            'user.last_name': 'Cognome',
            'user.password': 'Password',
            'user.email': 'Email',
            'user.type_guru_name': 'Inserisci il nome del guru',
            'user.no_followers': 'Nessun follower',
            'user.no_followings': 'Nessun following',
            'user.search_from_contacts': 'Amici dalla rubrica',
            'user.friends_from_facebook': 'Amici da Facebook',
            'user.find_your_friends': 'Cerca amici giÃ  su Tastd',
            'user.choose_a_city': 'Scegli una cittÃ *',
            'user.search.type_a_full_name': 'Inserisci un nome...',
            'user.find_tastd_gurus': 'Cerca Guru',
            'user.from_facebook': 'Da Facebook',
            'user.from_contacts': 'Dalla rubrica',
            'user.about_me': 'Parlaci di te',
            'user.how_i_define_myself': '30 caratteri per definirti',
            'user.birth_year': 'Anno di nascita (Non lo mostriamo a nessuno!)',
            'user.confirm_password': 'Conferma password',
            'user.edit_profile': 'Modifica profilo',
            'user.me': 'Me',
            'user.create_account.page_title': 'Crea un account',
            'user.login.page_title': 'Login',
            'user.current_city': 'CittÃ  di default',
            'user.choose_picture': 'Scegli una foto',
            'user.forgot_password': 'Password dimenticata?',
            'user.become_a_top_guru': 'Diventa top guru',
            'user.all_gurus': 'Tutti i miei guru',
            'user.select_a_city.title': 'La cittÃ  Ã¨ obbligatoria',
            'user.select_a_city.text': 'Scegli la cittÃ  dove abiti',
            'user.signup.facebook.email_missing': 'Purtroppo non vediamo la tua email di facebook. Registrati normalmente con email e password. Grazie!',

            // VALIDATION

            'validator.violation_errors.required': 'Questo valore Ã¨ richiesto',
            'validator.violation_errors.confirmPassword': 'Le password inserite non corrispondono',
            'validator.violation_errors.email': 'Inserisci una email valida',
            'validator.violation_errors.minlength': 'Questo valore Ã¨ troppo corto. Minimo {{ min }} caratteri.',
            'validator.violation_errors.maxlength': 'Questo valore Ã¨ troppo lungo. Massimo {{ max }} caratteri',

            // OTHER
            //
            // Please use a scope as button.call_me_now
            // and underscores

            'or': 'oppure',
            'hi': 'hi',
            'required': 'richiesto',
            'error_houston': 'Houston, abbiamo un problema!',
            'done': 'Ok',
            'profile': 'Profilo',
            'login': 'Accedi',
            'logout': 'Disconnetti',
            'signup': 'Registrati',
            'back': 'Indietro',
            'map': 'Mappa',
            'no.results': 'Non ci sono risultati per la tua ricerca',
            'firstName': 'Nome',
            'lastName': 'Cognome',
            'firstname': 'Nome',
            'lastname': 'Cognome',
            'searching': 'Cerca',
            'search': 'Cerca',
            'headline': 'Titolo',
            'confirmPassword': 'Conferma password',
            'password': 'Password',
            'email': 'Email'
        });


    }]);

'use strict';

angular
    .module('services.utility', []);


'use strict';

angular
    .module('services.utility')
    // change 1.2.16 --> 1.3.13 brings incompatibilities:
    // https://github.com/angular/angular.js/compare/v1.2.16...v1.3.13#diff-1d54c5f722aebc473dbe96f836ddf974L945
    // so we need to use a custom filter
    .factory('JsonUtil', function JsonUtilFactory() {
        var JsonUtil = {
            toJson: toJson,
            toSimpleString: toSimpleString
        };

        return JsonUtil;

        function toJson (obj) {
                return JSON.stringify(obj, function (key, value) {
                    var val = value;
                    if (typeof key === 'string' && key.charAt(0) === '$') {
                        val = undefined;
                        // isWindow
                    } else if (value && value.document && value.location && value.alert && value.setInterval) {
                        val = '$WINDOW';
                    } else if (value && document === value) {
                        val = '$DOCUMENT';
                        // isScope
                    } else if (value && value.$evalAsync && value.$watch) {
                        val = '$SCOPE';
                    }
                    return val;
                }, 2);
        }

        function toSimpleString (obj) {
            var res = '{';
            if (isScalar(obj)) {
                res += ' ' + obj + ' ';
            } else {
                for (var name in obj) {
                    if (obj.hasOwnProperty(name)) {
                        if (isScalar(obj[name])) {
                            res += ( name + ':' + obj[name] + ', ');
                        }
                    }
                }
            }
            res += '}';
            return res;
        }

        function isScalar(obj){
            return (/string|number|boolean/).test(typeof obj);
        }

    });

'use strict';

angular
    .module('services.utility')
    .factory('Base64Util', function Base64UtilFactory() {
        var util = {};

        /* jshint ignore:start */
        util.base64ArrayBuffer = function (arrayBuffer) {
            var base64    = '';
            var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

            var bytes         = new Uint8Array(arrayBuffer);
            var byteLength    = bytes.byteLength;
            var byteRemainder = byteLength % 3;
            var mainLength    = byteLength - byteRemainder;

            var a, b, c, d;
            var chunk;

            // Main loop deals with bytes in chunks of 3
            for (var i = 0; i < mainLength; i = i + 3) {
                // Combine the three bytes into a single integer
                chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];

                // Use bitmasks to extract 6-bit segments from the triplet
                a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18
                b = (chunk & 258048)   >> 12; // 258048   = (2^6 - 1) << 12
                c = (chunk & 4032)     >>  6; // 4032     = (2^6 - 1) << 6
                d = chunk & 63;               // 63       = 2^6 - 1

                // Convert the raw binary segments to the appropriate ASCII encoding
                base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];
            }

            // Deal with the remaining bytes and padding
            if (byteRemainder == 1) {
                chunk = bytes[mainLength];

                a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2

                // Set the 4 least significant bits to zero
                b = (chunk & 3)   << 4; // 3   = 2^2 - 1

                base64 += encodings[a] + encodings[b] + '==';
            } else if (byteRemainder == 2) {
                chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];

                a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10
                b = (chunk & 1008)  >>  4; // 1008  = (2^6 - 1) << 4

                // Set the 2 least significant bits to zero
                c = (chunk & 15)    <<  2; // 15    = 2^4 - 1

                base64 += encodings[a] + encodings[b] + encodings[c] + '=';
            }

            return base64;
        };
        /* jshint ignore:end */

        return util;
    });

'use strict';

angular
    .module('services.utility')
    .factory('Class', function ClassFactory() {
        /* jshint laxbreak:true */
        //var fnTest = /xyz/.test(function(){xyz;}) ? /\b_super\b/ : /.*/;
        var fnTest = /\b_super\b/;

        // The base Class implementation (does nothing)
        function BaseClass(){}

        // Create a new Class that inherits from this class
        BaseClass.extend = function(props) {
            var _super = this.prototype;

            // Set up the prototype to inherit from the base class
            // (but without running the init constructor)
            var proto = Object.create(_super);

            // Copy the properties over onto the new prototype
            for (var name in props) {
                /*jshint -W083 */
                // Check if we're overwriting an existing function
                proto[name] = typeof props[name] === 'function' &&
                    typeof _super[name] === 'function' && fnTest.test(props[name])
                    ? (function(name, fn){
                    return function() {
                        var tmp = this._super;

                        // Add a new ._super() method that is the same method
                        // but on the super-class
                        this._super = _super[name];

                        // The method only need to be bound temporarily, so we
                        // remove it when we're done executing
                        var ret = fn.apply(this, arguments);
                        this._super = tmp;

                        return ret;
                    };
                })(name, props[name]) : props[name];
            }

            // The new constructor

            var newClass = typeof proto.init === 'function'
                ? proto.hasOwnProperty('init')
                ? proto.init // All construction is actually done in the init method
                : function SubClass(){ _super.init.apply(this, arguments); }
                : function EmptyClass(){};

            // Populate our constructed prototype object
            newClass.prototype = proto;

            // Enforce the constructor to be what we expect
            proto.constructor = newClass;

            // And make this class extendable
            newClass.extend = BaseClass.extend;

            return newClass;
        };

        return BaseClass;
    });

'use strict';

angular
    .module('services.utility')
    .directive('debugJson', ['DebugJson', function DebugJsonDirective(DebugJson) {

        return {
            restrict : 'EA',
            templateUrl: 'js/services/utility/debug-json-directive.html',
            scope : {
                content : '=debugJson'
            },
            controller :['$scope', function ($scope) {
                $scope.hide = true;
                $scope.DebugJson = DebugJson;
                $scope.title= '';
            }],
            link : function (scope, elem, attrs) {
                scope.label = attrs.debugJson || 'unknown';
                scope.$watch('content', function (val) {
                    scope.contentInfo = contentInfo(val);
                }, true);
            }
        };

        function contentInfo(object) {
            var info = {
                type : Object.prototype.toString.call( object ),
                __toString : function () {
                    return '{ type : ' + this.type +
                        (angular.isDefined(this.size) ? ', size : ' + this.size + ' ' : '') +
                        ' }';
                }
            };
            if(angular.isArray(object)) {
                info.size = object.length;
            }
            if(object && object.$$type) {
                info.type = info.type + '[' + object.$$type + ']';
            }

            return info;
        }
    }]);



'use strict';

angular
    .module('services.utility')
    .provider('DebugJson', function DebugJsonProvider() {
        var provider = this,
            options  = {
                debug : true
            };

        provider.options = function (opt) {
            options = angular.extend({}, options, opt);
        };

        provider.$get = function () {
            return {
                options : options
            };
        };

        return provider;
    });

'use strict';

angular
    .module('services.utility')
    .provider('FakeType', function FakeTypeProvider() {
        var defaultProviderOptions = {
            property : '$$type'
        },
        providerOptions = angular.copy(defaultProviderOptions);

        this.options = function () {
            if(arguments[0]) {
                angular.extend(providerOptions, arguments[0]);
                return this;
            }else{
                return providerOptions;
            }
        };

        this.$get = function () {

            var service = {
                $$errors : {
                    FakeTypeUnsupportedObjectError : FakeTypeUnsupportedObjectError,
                    FakeTypeIsFunctionButValueIsUnsupportedError :  FakeTypeIsFunctionButValueIsUnsupportedError
                },
                $$property : function () {
                    return providerOptions.property;
                },
                $$get : function(object) {
                    return object[service.$$property()];
                },
                /**
                 * Check if object supports fake type checking
                 *
                 * @param object
                 * @returns {boolean}
                 */
                supports : function (object) {
                    var type = service.$$get(object);
                    return _.isString(type) || _.isFunction(type);
                },
                /**
                 * Get the object "fake type"
                 *
                 * @param object
                 * @returns {string}
                 * @throws Error
                 */
                'get' : function (object) {

                    if(!service.supports(object)) {
                        throw new FakeTypeUnsupportedObjectError(service.$$property());
                    }

                    var property = service.$$get(object);

                    if(_.isString(property)) {
                        return property;
                    }

                    if(_.isFunction(service.$$get(object))) {
                        property = property();

                        if(!_.isString(property)) {
                            throw new FakeTypeIsFunctionButValueIsUnsupportedError();
                        }
                        return property;
                    }

                    throw new Error('Unexpected error');
                },
                /**
                 * Check if object is fake type
                 *
                 * @param {object} object
                 * @param {string|object} FakeType
                 */
                check : function (object, FakeType) {
                    if(_.isString(FakeType)) {
                        return service.get(object) === FakeType;
                    }
                    return service.get(object) === service.get(FakeType);
                }
            };

            return service;
        };

        /**
         * Experimental named errors
         */

        /**
         * FakeTypeUnsupportedObjectError
         * @inherits Error
         * @param property
         * @constructor
         */
        function FakeTypeUnsupportedObjectError(property) {
            this.name = 'FakeTypeUnsupportedObjectError';
            this.message = 'Object is not supported, property "' + property + '" not found, you must add $$type property to your Object!';
        }
        FakeTypeUnsupportedObjectError.prototype = new Error();
        FakeTypeUnsupportedObjectError.prototype.constructor = FakeTypeUnsupportedObjectError;

        /**
         * FakeTypeUnsupportedObjectError
         * @inherits Error
         * @param {string}[message]
         * @constructor
         */
        function FakeTypeIsFunctionButValueIsUnsupportedError(message) {
            this.name = 'FakeTypeIsFunctionButValueIsUnsupportedError';
            this.message = message || 'Property is a function but returned value is not a string as expected';
        }
        FakeTypeIsFunctionButValueIsUnsupportedError.prototype = new Error();
        FakeTypeIsFunctionButValueIsUnsupportedError.prototype.constructor = FakeTypeIsFunctionButValueIsUnsupportedError;



        return this;
    });

'use strict';

angular
    .module('services.utility')
    .factory('MapDistance', function MapDistanceFactory() {

        function toRadians(value){
            return value * Math.PI / 180;
        }

        function getDistance(pos1, pos2) {
            var Ï†1 = toRadians(pos1.lat),
                Ï†2 = toRadians(pos2.lat),
                Î»1 = toRadians(pos1.lng),
                Î»2 = toRadians(pos2.lng),
                R = 6371000;

            // http://www.movable-type.co.uk/scripts/latlong.html
            // equirectangular approximation
            var x = (Î»2-Î»1) * Math.cos((Ï†1+Ï†2)/2);
            var y = (Ï†2-Ï†1);
            var d = Math.sqrt(x*x + y*y) * R;

            return d;
        }

        function roundTo(value, segment) {
            return Math.ceil(value / segment) * segment;
        }

        function approximate(value) {
            if (value < 1000) {
                return roundTo(value, 50);
            }
            if (value < 10*1000) {
                return roundTo(value, 100);
            }
            if (value >= 10*1000) {
                return roundTo(value, 1000);
            }
        }

        function getFormattedDistance(pos1, pos2) {
            var approx = approximate(getDistance(pos1, pos2));

            return (approx > 1000)?
                    ((approx/1000) + ' km') :
                    (approx + ' m');
        }

        return {
            getDistance : getDistance,
            getFormattedDistance : getFormattedDistance
        };
    });


'use strict';

angular
    .module('services.utility')
    .factory('MD5Util', function MD5UtilFactory() {
        /* jshint ignore:start */
        return {
            md5: (function(){function e(e,t){var o=e[0],u=e[1],a=e[2],f=e[3];o=n(o,u,a,f,t[0],7,-680876936);f=n(f,o,u,a,t[1],
                12,-389564586);a=n(a,f,o,u,t[2],17,606105819);u=n(u,a,f,o,t[3],22,-1044525330);o=n(o,u,a,f,t[4],7,-176418897);f=n(f,o,u,a,t[5],
                12,1200080426);a=n(a,f,o,u,t[6],17,-1473231341);u=n(u,a,f,o,t[7],22,-45705983);o=n(o,u,a,f,t[8],7,1770035416);f=n(f,o,u,a,t[9],
                12,-1958414417);a=n(a,f,o,u,t[10],17,-42063);u=n(u,a,f,o,t[11],22,-1990404162);o=n(o,u,a,f,t[12],7,1804603682);f=n(f,o,u,a,t[13],
                12,-40341101);a=n(a,f,o,u,t[14],17,-1502002290);u=n(u,a,f,o,t[15],22,1236535329);o=r(o,u,a,f,t[1],5,-165796510);f=r(f,o,u,a,t[6],
                9,-1069501632);a=r(a,f,o,u,t[11],14,643717713);u=r(u,a,f,o,t[0],20,-373897302);o=r(o,u,a,f,t[5],5,-701558691);f=r(f,o,u,a,t[10],
                9,38016083);a=r(a,f,o,u,t[15],14,-660478335);u=r(u,a,f,o,t[4],20,-405537848);o=r(o,u,a,f,t[9],5,568446438);f=r(f,o,u,a,t[14],
                9,-1019803690);a=r(a,f,o,u,t[3],14,-187363961);u=r(u,a,f,o,t[8],20,1163531501);o=r(o,u,a,f,t[13],5,-1444681467);f=r(f,o,u,a,t[2],
                9,-51403784);a=r(a,f,o,u,t[7],14,1735328473);u=r(u,a,f,o,t[12],20,-1926607734);o=i(o,u,a,f,t[5],4,-378558);f=i(f,o,u,a,t[8],
                11,-2022574463);a=i(a,f,o,u,t[11],16,1839030562);u=i(u,a,f,o,t[14],23,-35309556);o=i(o,u,a,f,t[1],4,-1530992060);f=i(f,o,u,a,t[4],
                11,1272893353);a=i(a,f,o,u,t[7],16,-155497632);u=i(u,a,f,o,t[10],23,-1094730640);o=i(o,u,a,f,t[13],4,681279174);f=i(f,o,u,a,t[0],
                11,-358537222);a=i(a,f,o,u,t[3],16,-722521979);u=i(u,a,f,o,t[6],23,76029189);o=i(o,u,a,f,t[9],4,-640364487);f=i(f,o,u,a,t[12],
                11,-421815835);a=i(a,f,o,u,t[15],16,530742520);u=i(u,a,f,o,t[2],23,-995338651);o=s(o,u,a,f,t[0],6,-198630844);f=s(f,o,u,a,t[7],
                10,1126891415);a=s(a,f,o,u,t[14],15,-1416354905);u=s(u,a,f,o,t[5],21,-57434055);o=s(o,u,a,f,t[12],6,1700485571);f=s(f,o,u,a,t[3],
                10,-1894986606);a=s(a,f,o,u,t[10],15,-1051523);u=s(u,a,f,o,t[1],21,-2054922799);o=s(o,u,a,f,t[8],6,1873313359);f=s(f,o,u,a,t[15],
                10,-30611744);a=s(a,f,o,u,t[6],15,-1560198380);u=s(u,a,f,o,t[13],21,1309151649);o=s(o,u,a,f,t[4],6,-145523070);f=s(f,o,u,a,t[11],
                10,-1120210379);a=s(a,f,o,u,t[2],15,718787259);u=s(u,a,f,o,t[9],21,-343485551);e[0]=m(o,e[0]);e[1]=m(u,e[1]);e[2]=m(a,e[2]);e[3]=m(f,e[3])}
                function t(e,t,n,r,i,s){t=m(m(t,e),m(r,s));return m(t<<i|t>>>32-i,n)}function n(e,n,r,i,s,o,u){return t(n&r|~n&i,e,n,s,o,u)}
                function r(e,n,r,i,s,o,u){return t(n&i|r&~i,e,n,s,o,u)}function i(e,n,r,i,s,o,u){return t(n^r^i,e,n,s,o,u)}
                function s(e,n,r,i,s,o,u){return t(r^(n|~i),e,n,s,o,u)}function o(t){var n=t.length,r=[1732584193,-271733879,-1732584194,271733878],i;
                    for(i=64;i<=t.length;i+=64){e(r,u(t.substring(i-64,i)))}t=t.substring(i-64);var s=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
                    for(i=0;i<t.length;i++)s[i>>2]|=t.charCodeAt(i)<<(i%4<<3);s[i>>2]|=128<<(i%4<<3);if(i>55){e(r,s);for(i=0;i<16;i++)s[i]=0}s[14]=n*8;e(r,s);return r}
                function u(e){var t=[],n;for(n=0;n<64;n+=4){t[n>>2]=e.charCodeAt(n)+(e.charCodeAt(n+1)<<8)+(e.charCodeAt(n+2)<<16)+(e.charCodeAt(n+3)<<24)}return t}
                function c(e){var t="",n=0;for(;n<4;n++)t+=a[e>>n*8+4&15]+a[e>>n*8&15];return t}
                function h(e){for(var t=0;t<e.length;t++)e[t]=c(e[t]);return e.join("")}
                function d(e){return h(o(unescape(encodeURIComponent(e))))}
                function m(e,t){return e+t&4294967295}var a="0123456789abcdef".split("");return d})()
        };
        /* jshint ignore:end */
    });


'use strict';

angular
    .module('services.utility')
    .directive('ngModelDebounce', ['$timeout', '$parse', function NgModelDebounceDirective($timeout, $parse) {
        return {
            restrict: 'A',
            require: 'ngModel',
            priority: 99,
            link: function(scope, elm, attr, ngModelCtrl) {

                var immediateExpression;

                if (attr.type === 'radio' || attr.type === 'checkbox') { return; }

                elm.unbind('input');

                if(attr.ngModelDebounceImmediate) {
                    immediateExpression = $parse(attr.ngModelDebounceImmediate);
                }

                var debounce;
                elm.bind('input', function() {

                    if (immediateExpression) {
                        immediateExpression(scope, {
                            $val : elm.val()
                        });
                    }

                    $timeout.cancel(debounce);
                    debounce = $timeout( function() {
                        scope.$apply(function() {
                            ngModelCtrl.$setViewValue(elm.val());
                        });
                    }, attr.ngModelDebounce || 1000);
                });

                elm.bind('blur', function() {
                    scope.$apply(function() {
                        ngModelCtrl.$setViewValue(elm.val());
                    });
                });
            }
        };
    }]);

'use strict';

angular
    .module('services.utility')
    .factory('Platform', ['$window', function PlatformFactory($window) {
        var Platform = {
            isIOS: isIOS,
            isAndroid: isAndroid,
            getDebugString: getDebugString
        };

        return Platform;

        function isIOS () {
            return $window.ionic.Platform.isIOS() && $window.ionic.Platform.isWebView();
        }

        function isAndroid () {
            return $window.ionic.Platform.isAndroid() && $window.ionic.Platform.isWebView();
        }

        function getDebugString () {
            var properties = {
                isWebView: $window.ionic.Platform.isWebView(),
                isIOS: $window.ionic.Platform.isIOS(),
                iosAndroid: $window.ionic.Platform.isAndroid(),
                isIPad: $window.ionic.Platform.isIPad(),
                platform: $window.ionic.Platform.platform(),
                version: $window.ionic.Platform.version()
            };

            return JSON.stringify(properties);
        }
    }]);


'use strict';

angular
    .module('services.validator.ionic', [
        'ionic'
    ]);


'use strict';

angular
    .module('services.validator.ionic')
    .directive('ionicValidateOnSubmit', ['ValidatorViolatedContext', 'IonicValidateOnSubmitPopup', '$cordovaKeyboard', function IonicValidateOnSubmitDirective(
        ValidatorViolatedContext,
        IonicValidateOnSubmitPopup,
        $cordovaKeyboard
    ) {

        return {
            require: 'form',
            restrict : 'A',
            link : link
        };

        function link(scope, element, attrs, formCtrl) {
            element.attr('novalidate','novalidate');
            element.on('submit', function (e) {
                e.preventDefault();
                onSubmit(scope, attrs, formCtrl);
            });
            formCtrl.validateAndSubmit = function(callback, options) {
                var mergedOptions = options || {};
                validateAndSubmit(scope, formCtrl, callback, mergedOptions);
            };
        }

        function validateAndSubmit (scope, formCtrl, callback, options) {
            if(formCtrl.$valid) {
                callback();

                return;
            }
            var context = ValidatorViolatedContext.getContextByForm(formCtrl, options);
            if(window.cordova) {
                $cordovaKeyboard.close();
            }
            new IonicValidateOnSubmitPopup(context).alert({ scope : scope });
        }

        function onSubmit(scope, attrs, formCtrl) {
            if(formCtrl.$valid) {
                /*jshint sub:true*/
                scope.$apply(attrs['ionicValidateOnSubmit']);
                return;
            }
            var options = scope.$apply(attrs['ionicValidateOnSubmitOptions']) || {};
            var context = ValidatorViolatedContext.getContextByForm(formCtrl, options);
            if(window.cordova) {
                $cordovaKeyboard.close();
            }
            new IonicValidateOnSubmitPopup(context).alert({ scope : scope });
        }
    }]);

'use strict';

angular
    .module('services.validator.ionic')
    .factory('IonicValidateOnSubmitPopup', ['$rootScope', '$ionicPopup', '$translate', function IonicValidateOnSubmitPopupFactory(
        $rootScope,
        $ionicPopup,
        $translate
    ) {

        var options = {
            title: $translate.instant('error_houston'),
            template: ['<div ng-if="ionicValidateOnSubmitContext.violation.message">',
                          '<p>{{ ionicValidateOnSubmitContext.violation.message }}</p>',
                       '</div>',
                       '<ul ng-show="ionicValidateOnSubmitContext.violatedFields.length">',
                          '<li ng-repeat="violatedField in ionicValidateOnSubmitContext.violatedFields | orderBy:\'position\'">',
                             '<strong>{{Â violatedField.name | translate }}</strong>',
                             '<ul>',
                                '<li ng-repeat="error in violatedField.errors">{{ error }}</li>',
                             '</ul>',
                          '</li>',
                        '</ul>'].join('')
        };

        function ionicValidateOnSubmitPopup(context) {
            return {
                context : context,
                alert : function () {
                    var opt = !arguments[0] ? {} : arguments[0];

                    if(!opt.scope) { opt.scope = $rootScope.$new(); }
                    if(!opt.title && context.violation) {
                        opt.title = context.violation.info;
                    }

                    opt.scope.ionicValidateOnSubmitContext = context;

                    return $ionicPopup.alert(angular.extend({}, options, opt));
                }
            };
        }

        return ionicValidateOnSubmitPopup;
    }]);

'use strict';

angular
    .module('services.validator', [
        'services.validator.ionic',
        'pascalprecht.translate'
    ]);

'use strict';

angular
    .module('services.validator')
    .constant('VALIDATOR_VIOLATION_ERRORS_MESSAGES', {
        required        : 'validator.violation_errors.required', // This value is required
        email           : 'validator.violation_errors.email', // Please enter a valid email
        minlength       : 'validator.violation_errors.minlength', // This value is too short, at least {{ min }} characters long,
        maxlength       : 'validator.violation_errors.maxlength', // This value is too short, at least {{ min }} characters long,
        confirmPassword : 'validator.violation_errors.confirmPassword' // Password should match
    });

'use strict';

angular
    .module('services.validator')
    .config(['$translateProvider', 'VALIDATOR_VIOLATION_ERRORS_MESSAGES', function ($translateProvider, VALIDATOR_VIOLATION_ERRORS_MESSAGES) {

        var translations = {}, MESSAGES = angular.copy(VALIDATOR_VIOLATION_ERRORS_MESSAGES);

        translations[MESSAGES.required]        = 'This value is required';
        translations[MESSAGES.minlength]       = 'This value is too short, must be at least {{ min }} characters long';
        translations[MESSAGES.maxlength]       = 'This value is too long, must be at most {{ max }} characters long';
        translations[MESSAGES.email]           = 'Please enter a valid email';
        translations[MESSAGES.confirmPassword] = 'Password should match';

        $translateProvider.translations('en', translations);
    }]);

'use strict';

angular
    .module('services.validator')
    .factory('ValidatorViolatedContext', ['ValidatorViolatedField', 'ValidatorViolationContext', function ValidatorViolatedContextFactory(
        ValidatorViolatedField,
        ValidatorViolationContext
    ) {

        return {
            getContextByForm: getContextByForm,
            getContextByRestResponse: getContextByRestResponse
        };

        function getContextByForm(formCtrl, options) {
            var context = new ValidatorViolationContext();
            angular.forEach(formCtrl.$error, function (violatedModelControllers, errorType) {
                angular.forEach(violatedModelControllers, function (violatedModelCtrl) {
                    context.addViolation(violatedModelCtrl.$name, errorType, options);
                });
            });

            return context;
        }

        function getContextByRestResponse(restResponse) {
            var context  = new ValidatorViolationContext();
            var response = restResponse.data ? restResponse : ( restResponse.$response || { data : {}});
            if(response.data.message) {
                context.setMainViolation(response.data.id, response.data.message, response.data.info);
            }
            angular.forEach(response.data.errors, function (errors, fieldName) {
                angular.forEach(errors, function (error) {
                    context.addViolation(fieldName, error);
                });
            });

            return context;
        }

    }]);

'use strict';

angular
    .module('services.validator')
    .factory('ValidatorViolatedField', ['VALIDATOR_VIOLATION_ERRORS_MESSAGES', '$translate', function ValidatorViolatedFieldFactory(
        VALIDATOR_VIOLATION_ERRORS_MESSAGES,
        $translate
    ){

        function getErrorMessage(errorType, options) {
            var interpolateParams = options && options[errorType] ? options[errorType] : {};
            if(VALIDATOR_VIOLATION_ERRORS_MESSAGES[errorType]) {
                return $translate.instant(VALIDATOR_VIOLATION_ERRORS_MESSAGES[errorType], interpolateParams);
            }

            return errorType;
        }

        function ValidatorViolatedField($name, options) {
            this.name = $name;
            this.errors = [];
            this.options = angular.extend({}, {position: 0}, options || {});
            this.position = this.options.position;
        }

        ValidatorViolatedField.prototype.addError = function (errorType) {
            this.errors.push(getErrorMessage(errorType, this.options));
            return this;
        };

        return ValidatorViolatedField;
    }]);


'use strict';

angular
    .module('services.validator')
    .provider('ValidatorViolationContext', function ValidatorViolationContextProvider() {
        var providerOptions = {
            debug : false
        };

        this.debug = function (debug) {
            providerOptions.debug = debug;
            return this;
        };

        this.$get = ['ValidatorViolatedField', function (ValidatorViolatedField) {

            function ValidatorViolationContext() {
                this.violatedFields = [];
                this.violation = null;
            }

            ValidatorViolationContext.prototype.violatedFields = [];

            ValidatorViolationContext.prototype.setMainViolation = function (type, message, info) {
                this.violation = {
                    type    : type,
                    message : message,
                    info    : providerOptions.debug ? info : null
                };
                return this;
            };

            ValidatorViolationContext.prototype.addViolation = function ($name, errorType, options) {
                var violatedField = window._.find(this.violatedFields, function (violatedField) {
                    return violatedField && violatedField.name === $name;
                });
                if(!violatedField) {
                    violatedField = new ValidatorViolatedField($name, options ? options[$name] : {});
                    violatedField.addError(errorType);
                    this.violatedFields.push(violatedField);
                }else{
                    violatedField.addError(errorType);
                }

                return this;
            };

            return ValidatorViolationContext;
        }];

        return this;

    });


'use strict';

angular
    .module('services.validator')
    .factory('ValidatorManager', ['ValidatorViolatedContext', '$cordovaKeyboard', 'IonicValidateOnSubmitPopup', '$q', function ValidatorManagerFactory(
        ValidatorViolatedContext,
        $cordovaKeyboard,
        IonicValidateOnSubmitPopup,
        $q
    ) {

        return {
            validate: validate
        };

        function validate (form, $scope) {
            var deferred = $q.defer();
            if (form.$valid) {
                deferred.resolve();

                return deferred.promise;
            }
            var context = ValidatorViolatedContext.getContextByForm(form);

            if (window.cordova) {
                $cordovaKeyboard.close();
            }

            new IonicValidateOnSubmitPopup(context).alert({
                scope : $scope
            });

            deferred.reject();

            return deferred.promise;
        }
    }]);

'use strict';

angular
    .module('filters', []);

'use strict';

angular
    .module('filters')
    .filter('cleanUrl', function() {
        return function(url) {
            return url.replace(/^https?:\/\//, '')
                      .replace(/\/$/, '');
        };
    });

'use strict';

angular
    .module('filters')
    .filter('customJsonFilter', ['JsonUtil', function (JsonUtil) {
        return function (obj) {
            return JsonUtil.toJson(obj);
        };
    }]);

'use strict';

angular
    .module('filters')
    .filter('ordinal', function () {
        var ordinal = function (input) {
            // Only process numeric values.
            if (isNaN(input) || input === null) {
                return input;
            }

            var s = ['th', 'st', 'nd', 'rd'],
                v = input % 100;
            return (s[(v - 20) % 10] || s[v] || s[0]);
        };

        return ordinal;
    });

'use strict';

angular
    .module('filters')
    .filter('purgeScope', function () {

        function purgeObj(obj){
            return _.omit(obj, '$scope');
        }

        var purge = function (input) {
            if( _.isArray(input)){
                return _.reduce(input, function(memo, item){
                    memo.push(purgeObj(item));
                    return memo;
                }, []);
            }
            else{
                return purgeObj(input);
            }
        };

        return purge;
    });

'use strict';

angular
    .module('modals.address',[])
    .factory('AddressModal', ['$ionicModal', 'GoogleGeocoder', '$q', '$log', '$rootScope', 'Google', 'GeocodeMap', 'Loader', 'UserGeolocation', '$translate', function AddressModalFactory(
        $ionicModal,
        GoogleGeocoder,
        $q,
        $log,
        $rootScope,
        Google,
        GeocodeMap,
        Loader,
        UserGeolocation,
        $translate
    ){
        var ionicModal = null;
        var deferred = null;
        var modalScope = $rootScope.$new();
        modalScope.cancel = cancel;
        modalScope.search = _.debounce(search, 300);
        modalScope.choose = choose;
        modalScope.edit = edit;
        modalScope.stopEdit = stopEdit;
        modalScope.done = done;
        modalScope.centerOnMe = centerOnMe;
        modalScope.getInputLabel = getInputLabel;
        modalScope.geoname = null;
        modalScope.editing = false;
        modalScope.chosenAddress = null;

        return {
            create: create
        };

        function getInputLabel () {
            return (modalScope.chosenAddress && modalScope.chosenAddress.formattedAddress)
                || $translate.instant('modal.address.field');
        }

        function create (city, addressString) {
            $log.debug('[ADDRESS_MODAL] Create');
            deferred = $q.defer();
            modalScope.addresses = [];
            modalScope.geoname = city;
            modalScope.parameters = {
                name: city.asciiName + ', ' + (addressString ? addressString : '' )
            };
            modalScope.$on('geocodeMap.address', onGeocodeMapAddress);
            createModal();
            if (modalScope.parameters.name !== '') {
                searchAutoSelect();
            }

            return deferred.promise;
        }

        function onGeocodeMapAddress (event, address) {
            modalScope.chosenAddress = address;
            modalScope.parameters.name = address.formattedAddress;
            modalScope.editing = false;
        }

        function edit () {
            $log.debug('[ADDRESS_MODAL] Edit');
            modalScope.editing = true;
        }

        function stopEdit () {
            $log.debug('[ADDRESS_MODAL] Stop edit');
            modalScope.editing = false;
        }

        function search () {
            $log.debug('[ADDRESS_MODAL] Search start');
            modalScope.addresses.length = 0;
            modalScope.loading = true;
            GoogleGeocoder.geocode(modalScope.parameters.name)
                .then(function (addresses) {
                    $log.debug('[ADDRESS_MODAL] Search end');
                    modalScope.addresses = addresses;
                    modalScope.loading = false;
                });
        }

        function searchAutoSelect () {
            $log.debug('[ADDRESS_MODAL] Search start with auto select');
            modalScope.addresses.length = 0;
            modalScope.loading = true;
            GoogleGeocoder.geocode(modalScope.parameters.name)
                .then(function (addresses) {
                    $log.debug('[ADDRESS_MODAL] Search with auto select end');
                    modalScope.addresses = addresses;
                    modalScope.loading = false;
                    if (addresses.length > 0) {
                        choose(addresses[0]);
                    }
                });
        }

        function createModal () {
            $log.debug('[ADDRESS_MODAL] Create modal');
            $ionicModal.fromTemplateUrl('js/modals/address/address-modal.html', {
                scope: modalScope,
                animation: 'slide-in-up'
            }).then(afterCreateModal);
        }
        function afterCreateModal (modal) {
            ionicModal = modal;
            modal.show();
            GeocodeMap.create(modalScope.geoname.lat, modalScope.geoname.lng);
        }

        function choose (address) {
            $log.debug('[ADDRESS_MODAL] Choose');
            modalScope.chosenAddress = address;
            modalScope.parameters.name = address.formattedAddress;
            modalScope.editing = false;
            GeocodeMap.centerMapTo(address.lat, address.lng);
        }

        function done () {
            deferred.resolve(modalScope.chosenAddress);
            ionicModal.hide().then(cleanUp);
        }

        function cancel () {
            $log.debug('[ADDRESS_MODAL] Cancel');
            ionicModal.hide().then(cleanUp);
        }

        function cleanUp () {
            $log.debug('[ADDRESS_MODAL] Clean up');
            modalScope.addresses = [];
            modalScope.parameters.name = '';
            modalScope.geoname = null;
            modalScope.editing = false;
            modalScope.chosenAddress = null;
            ionicModal.remove();
        }

        function centerOnMe () {
            $log.debug('[ADDRESS_MODAL] Center on me');
            Loader.track(UserGeolocation.getCurrentPosition()
                .then(function(coordinates){
                    $log.debug('[ADDRESS_MODAL] After center on me', coordinates);
                    GoogleGeocoder.reverseGeocode(coordinates.lat, coordinates.lng)
                        .then(function (addresses) {
                            $log.debug('[ADDRESS_MODAL] After reverse geolocation', addresses);
                            if (addresses[0]) {
                                GeocodeMap.centerMapTo(coordinates.lat, coordinates.lng);
                                modalScope.chosenAddress = addresses[0];
                                modalScope.parameters.name = addresses[0].formattedAddress;
                                modalScope.editing = false;
                            }
                        });
                }));
        }

    }]);

'use strict';

angular
    .module('modals.autocomplete', []);

'use strict';

angular
    .module('modals.autocomplete')
    .factory('AutocompleteModal', ['$rootScope', '$q', '$ionicModal', '$ionicLoading', '$log', function AutocompleteModalFactory(
        $rootScope,
        $q,
        $ionicModal,
        $ionicLoading,
        $log
    ) {

        var TEMPLATE_URL = 'js/modals/autocomplete/autocomplete-modal.html';

        return function autoCompleteModalFactory(options) {

            var d, modal;

            return {
                show : function (modalOptions) {

                    var opt = angular.extend({}, {
                        id: 'autocomplete-modal',
                        animation: 'slide-in-up',
                        focusFirstInput : true,
                        debounce : 1000,
                        $q : ''
                    }, options, modalOptions || {});

                    d = $q.defer();

                    if(!modal) {

                        modal = $ionicModal.fromTemplateUrl(TEMPLATE_URL, opt)
                            .then(function (m) {

                                var promise,
                                    modalScope = m.scope;

                                modalScope.$options = opt;
                                modalScope.$pending = false;
                                modalScope.$noResult = false;
                                modalScope.$results = opt.$results || [];

                                modalScope.$validate = function(item){
                                    opt.validator(item).then(function (item) {
                                        if (!item) {
                                            return;
                                        }
                                        m
                                            .remove()
                                            .then(function () {
                                                d.resolve(item);
                                            })
                                            .finally(function () {
                                                modal = null;
                                            });
                                    });
                                };

                                modalScope.$choose = function (item) {
                                    if (opt.validator) {
                                        return modalScope.$validate(item);
                                    }

                                    m.remove()
                                        .then(function () {
                                            d.resolve(item);
                                        })
                                        .finally(function () {
                                            modal = null;
                                        });
                                };

                                modalScope.$cancel = function () {

                                    m.remove().finally(function () {
                                        modal = null;
                                        d.reject('canceled');
                                    });
                                };

                                modalScope.$buttonCallback = function () {
                                    modalScope.$options.button.callback();
                                    m.remove().finally(function () {
                                        modal = null;
                                        d.resolve();
                                    });
                                };

                                modalScope.$loadMore = function () {
                                    modalScope.$results.$fetchMore().$asPromise().then(function() {
                                        $rootScope.$broadcast('scroll.infiniteScrollComplete');
                                    });
                                };



                                var searchAction = opt.search ? function (q) {
                                    modalScope.$pending = true;
                                    modalScope.$noResult = false;
                                    modalScope.$results.length = 0;

                                    promise = opt.search(q);

                                    promise.then(function (results) {
                                        modalScope.$results = results;
                                        if (!results.$hasPendingActions()) {
                                            modalScope.$noResult = results.length === 0;
                                            modalScope.$pending = false;
                                        }

                                        return results;
                                    });

                                    return promise;

                                } : angular.noop;

                                modalScope.$search = _.debounce(searchAction, 1000);

                                m.show();



                                modalScope.$watch('$options.$q', _.debounce(function (val) {
                                        modalScope.$apply(function () {
                                            modalScope.$q = val;
                                            modalScope.$search(val);
                                        });
                                }, 0));

                                $log.debug('modal show', modalScope.$options);
                            })
                            .catch(function (error) {
                                modal = null;
                                d.reject(error);
                            });
                    }else{
                        d.reject('already-open');
                    }

                    return d.promise;
                }
            };
        };

    }]);


/**
 * AutocompleteModal({
 *  id : 'search-something-modal',
 *  title: 'Search something...',
 *  scope: $scope,
 *  templateUrl: 'my-template.html'
 *  search : function (q) {
 *      return $searchService.search(q);
 *  }
 * })
 * .then(function (chosenResult) {
 *      $scope.chosenResult = chosenResult;
 * })
 * .catch(function (error) {
 *      window.alert(error.message);
 * });
 *
 * # my-template.html
 * <ion-item ng-hide="$results.length" translate="no.results"></ion-item>
 * <ion-item ng-repeat="location in $results track by location.id"
 *  ng-bind="location.name" ng-click="$choose(location)">
 * </ion-item>
 */

'use strict';

angular
    .module('modals.cuisine', []);

'use strict';

angular
    .module('modals.cuisine')
    .factory('CuisineModal', ['$ionicModal', 'CuisineManager', '$q', '$log', '$rootScope', function CuisineModalFactory(
        $ionicModal,
        CuisineManager,
        $q,
        $log,
        $rootScope
    ){
        var ionicModal = null;
        var deferred = null;
        var modalScope = $rootScope.$new();
        modalScope.cancel = cancel;
        modalScope.search = _.debounce(search, 300);
        modalScope.choose = choose;

        return {
            create: create
        };

        function create () {
            $log.debug('[CUISINE_MODAL] Create');
            deferred = $q.defer();
            modalScope.cuisines = [];
            modalScope.parameters = {
                name: ''
            };
            createModal();
            search();

            return deferred.promise;
        }

        function search () {
            $log.debug('[CUISINE_MODAL] Search start');
            modalScope.cuisines.length = 0;
            modalScope.loading = true;
            CuisineManager.findAll().then(function (cuisines) {
                $log.debug('[CUISINE_MODAL] Search end');
                modalScope.cuisines = cuisines;
                modalScope.loading = false;
            });
        }

        function createModal () {
            $log.debug('[CUISINE_MODAL] Create modal');
            $ionicModal.fromTemplateUrl('js/modals/cuisine/cuisine-modal.html', {
                scope: modalScope,
                animation: 'slide-in-up'
            }).then(function(modal) {
                ionicModal = modal;
                modal.show();
            });
        }

        function choose (cuisine) {
            $log.debug('[CUISINE_MODAL] Choose');
            deferred.resolve(cuisine);
            ionicModal.hide().then(cleanUp);
        }

        function cancel () {
            $log.debug('[CUISINE_MODAL] Cancel');
            ionicModal.hide().then(cleanUp);
        }

        function cleanUp () {
            $log.debug('[CUISINE_MODAL] Clean up');
            modalScope.cuisines = [];
            modalScope.parameters.name = '';
            ionicModal.remove();
        }

    }]);

'use strict';

angular
    .module('modals.cuisine')
    .factory('MultipleCuisinesModal', ['$ionicModal', 'CuisineManager', '$q', '$log', '$rootScope', function MultipleCuisinesModalFactory(
        $ionicModal,
        CuisineManager,
        $q,
        $log,
        $rootScope
    ) {
        var ionicModal = null;
        var deferred = null;
        var modalScope = $rootScope.$new();
        modalScope.cancel = cancel;
        modalScope.done = done;
        modalScope.toggle = toggle;
        modalScope.selectAll = selectAll;
        modalScope.isAllSelected = isAllSelected;
        modalScope.loading = true;

        return {
            create: create
        };

        function create() {
            $log.debug('[CUISINE_MODAL] Create');
            deferred = $q.defer();
            modalScope.cuisines = [];
            CuisineManager.findAll().then(function(cuisines) {
                modalScope.loading = false;
                modalScope.cuisines = cuisines;
            });

            createModal();

            return deferred.promise;
        }

        function createModal() {
            $log.debug('[CUISINE_MODAL] Create modal');
            $ionicModal.fromTemplateUrl('js/modals/cuisine/multiple-cuisines-modal.html', {
                scope: modalScope,
                animation: 'slide-in-up'
            }).then(function(modal) {
                ionicModal = modal;
                modal.show();
            });
        }

        function toggle(cuisine) {
            $log.debug('[MULTIPLE-CUISINES_MODAL] Toggle');
            var selected = getSelected();
            if (selected.length === 1 && selected[0].id === cuisine.id) {
                return;
            }
            if (isAllSelected()) {
                deselectAll();
            }
            cuisine.selected = !cuisine.selected;
        }

        function cancel() {
            $log.debug('[CUISINE_MODAL] Cancel');
            ionicModal.hide();
            cleanUp();
            deferred.reject();
        }

        function done() {
            $log.debug('[CUISINE_MODAL] Cancel');
            ionicModal.hide();
            deferred.resolve(cleanUp());
        }

        function cleanUp() {
            var selected = getSelected();
            if (selected.length === modalScope.cuisines.length) {
                return [];
            }
            return selected;
        }

        function isAllSelected() {
            // all selected if no cuisine has been selected in the filter (empty means no cuisine filter)
            return getSelected().length === modalScope.cuisines.length;
        }

        function selectAll() {
            _.each(modalScope.cuisines, function(cuisine) {
                cuisine.selected = true;
            });
        }

        function deselectAll() {
            _.each(modalScope.cuisines, function(cuisine) {
                cuisine.selected = false;
            });
        }

        function isNoneSelected() {
            // all selected if no cuisine has been selected in the filter (empty means no cuisine filter)
            return !getSelected().length;
        }

        function getSelected() {
            return _.filter(modalScope.cuisines, function(c) {
                return c.selected;
            });
        }

    }]);

'use strict';

angular
    .module('modals.geoGuru', []);

'use strict';

angular
    .module('modals.geoGuru')
    .factory('GeoGuruModal', ['$ionicModal', 'UserManager', 'GeonameManager', '$q', '$log', '$rootScope', 'UserGeolocation', 'SimpleLocalStorage', 'Security', '$state', function CuisineModalFactory(
        $ionicModal,
        UserManager,
        GeonameManager,
        $q,
        $log,
        $rootScope,
        UserGeolocation,
        SimpleLocalStorage,
        Security,
        $state
    ){

        $log.debug('[GEO_GURU_MODAL] Initialize');

        var ionicModal = null;
        var deferred = null;
        var modalScope = $rootScope.$new();
        modalScope.cancel = cancel;
        modalScope.addNewGuru = addNewGuru;

        // Result
        modalScope.result = {};
        modalScope.isLoading = isLoading;

        // Infinite scrolling
        modalScope.thereIsNextPage = thereIsNextPage;
        modalScope.loadMore = loadMore;

        // Edit
        modalScope.editGeoname = editGeoname;
        modalScope.editGuru = editGuru;

        // Choose
        modalScope.chooseGeoname = chooseGeoname;
        modalScope.chooseGuru = chooseGuru;
        modalScope.chooseAllGurus = chooseAllGurus;
        modalScope.done = done;

        // Search
        modalScope.searchGeoname = _.debounce(searchGeoname, 300);
        modalScope.searchGuru = _.debounce(searchGuru, 300);

        // Loading
        modalScope.geonameLoading = false;
        modalScope.guruLoading = false;

        // Editing
        modalScope.editingGuru = false;
        modalScope.editingGeoname = false;



        return {
            create: create
        };

        function create () {
            $log.debug('[GEO_GURU_MODAL] Create');
            deferred = $q.defer();
            modalScope.gurus = [];
            modalScope.geonames = [];
            modalScope.parameters = {
                geoname: '',
                guru: ''
            };
            UserGeolocation.getCurrentGeoname().then(function(geoname){
                modalScope.result.geoname = geoname;
                createModal();
                searchGeoname();
                searchGuru();
            });

            return deferred.promise;
        }

        function editGeoname () {
            modalScope.editingGeoname = true;
            modalScope.editingGuru = false;
        }

        function editGuru () {
            modalScope.editingGuru = true;
            modalScope.editingGeoname = false;
        }

        function searchGeoname () {
            $log.debug('[GEO_GURU_MODAL] Search geoname start');
            modalScope.geonames.length = 0;
            modalScope.geonameLoading = true;
            var parameters = modalScope.parameters.geoname.trim() !== '' ? {
                asciiName: modalScope.parameters.geoname
            } : {
                user: Security.user.id
            };
            GeonameManager.findAll(parameters).then(function (geonames) {
                $log.debug('[GEONAME_MODAL] Search end');
                modalScope.geonames = geonames;
                modalScope.geonameLoading = false;
            });
        }

        function searchGuru () {
            $log.debug('[GEO_GURU_MODAL] Search guru start');
            modalScope.gurus.length = 0;
            modalScope.guruLoading = true;
            var parameters = {
                leadersOf: Security.user.id,
                geoname: modalScope.result.geoname.id,
                orderBy: 'geoScore'
            };
            if (modalScope.parameters.guru) {
                parameters.query = modalScope.parameters.guru;
            }

            UserManager.findAll(parameters).then(function (users) {
                $log.debug('[GEONAME_MODAL] Search end');
                modalScope.gurus = users;
                modalScope.guruLoading = false;
            });
        }

        function createModal () {
            $log.debug('[GEO_GURU_MODAL] Create modal');
            $ionicModal.fromTemplateUrl('js/modals/geo-guru/geo-guru-modal.html', {
                scope: modalScope,
                animation: 'slide-in-up'
            }).then(function(modal) {
                ionicModal = modal;
                modal.show();
            });
        }

        function chooseGeoname (geoname) {
            $log.debug('[GEO_GURU_MODAL] Choose geoname');
            modalScope.result.geoname = geoname;
            modalScope.editingGeoname = false;
            modalScope.editingGuru = true;
            modalScope.parameters = {
                geoname: '',
                guru: ''
            };
            searchGuru();
        }

        function chooseGuru (guru) {
            $log.debug('[GEO_GURU_MODAL] Choose guru');
            modalScope.result.guru = guru;
            modalScope.editingGuru = false;
            modalScope.parameters = {
                geoname: '',
                guru: ''
            };
            done();
        }

        function done () {
            $log.debug('[GEO_GURU_MODAL] Done');
            deferred.resolve(modalScope.result);
            SimpleLocalStorage.setObject('lastGeoname', modalScope.result.geoname);
            ionicModal.hide().then(cleanUp);
        }

        function cancel () {
            $log.debug('[GEO_GURU_MODAL] Cancel');
            modalScope.editingGuru = false;
            modalScope.editingGeoname = false;
            modalScope.parameters = {
                geoname: '',
                guru: ''
            };
            ionicModal.hide().then(cleanUp);
        }

        function cleanUp () {
            $log.debug('[GEO_GURU_MODAL] Clean up');
            modalScope.geonames = [];
            modalScope.gurus = [];
            modalScope.parameters.name = '';
            ionicModal.remove();
        }

        function thereIsNextPage() {
            if (modalScope.editingGeoname && modalScope.geonames.$metadata) {
                return modalScope.geonames.$metadata.hasNextPage;
            }
            if (modalScope.editingGuru && modalScope.gurus.$metadata) {
                return modalScope.gurus.$metadata.hasNextPage;
            }
            return false;
        }

        function isLoading () {
            if (modalScope.editingGeoname) {
                return modalScope.geonameLoading;
            }
            if (modalScope.editingGuru) {
                return modalScope.guruLoading;
            }
            return false;
        }

        function chooseAllGurus () {
            modalScope.result.guru = null;
            modalScope.editingGuru = false;
        }

        function loadMore () {
            if (modalScope.editingGeoname) {
                $log.debug('[GEO_GURU_MODAL] Fetch more geonames');
                modalScope.geonames.$fetchMore().$asPromise()
                    .finally(function (data) {
                        $log.debug('[GEO_GURU_MODAL] Fetch more geonames completed');
                        modalScope.$broadcast('scroll.infiniteScrollComplete');
                        return data;
                    });
            } else {
                $log.debug('[GEO_GURU_MODAL] Fetch more gurus');
                modalScope.gurus.$fetchMore().$asPromise()
                    .finally(function (data) {
                        $log.debug('[GEO_GURU_MODAL] Fetch more gurus completed');
                        modalScope.$broadcast('scroll.infiniteScrollComplete');
                        return data;
                    });
            }
        }

        function addNewGuru() {
            $log.debug('[GEO_GURU_MODAL] Add new guru',  modalScope.result.geoname);
            if (modalScope.result && modalScope.result.geoname) {
                $state.go('userSearch', { geoname: modalScope.result.geoname.id });
            } else {
                $state.go('userSearch');
            }

            cancel();
        }

    }]);

'use strict';

angular
    .module('modals.geoname', [])
    .factory('GeonameModal', ['$ionicModal', 'GeonameManager', '$q', '$log', '$rootScope', 'Security', function GeonameModalFactory(
        $ionicModal,
        GeonameManager,
        $q,
        $log,
        $rootScope,
        Security
    ){
        var ionicModal = null;
        var deferred = null;
        var modalScope = $rootScope.$new();
        modalScope.cancel = cancel;
        modalScope.search = _.debounce(search, 300);
        modalScope.choose = choose;
        modalScope.loadMore = loadMore;
        modalScope.chooseAll = chooseAll;
        modalScope.allCities = false;

        return {
            create: create,
            createWithAllCities: createWithAllCities
        };

        function create () {
            modalScope.allCities = false;

            return baseCreate();
        }

        function createWithAllCities () {
            modalScope.allCities = true;

            return baseCreate();
        }

        function baseCreate () {
            $log.debug('[GEONAME_MODAL] Create');
            deferred = $q.defer();
            modalScope.geonames = [];

            modalScope.parameters = {
                name: ''
            };
            createModal();
            search();

            return deferred.promise;
        }

        function search () {
            $log.debug('[GEONAME_MODAL] Search start');
            modalScope.geonames.length = 0;
            modalScope.loading = true;
            var parameters = {};
            if (modalScope.parameters.name.trim() !== '' ) {
                parameters.asciiName = modalScope.parameters.name
            } else if (modalScope.parameters.name.trim() === '' && Security.user) {
                parameters.user = Security.user.id;
            }

            GeonameManager.findAll(parameters).then(function (geonames) {
                $log.debug('[GEONAME_MODAL] Search end');
                modalScope.geonames = geonames;
                modalScope.loading = false;
            });
        }

        function createModal () {
            $log.debug('[GEONAME_MODAL] Create modal');
            $ionicModal.fromTemplateUrl('js/modals/geoname/geoname-modal.html', {
                scope: modalScope,
                animation: 'slide-in-up'
            }).then(function(modal) {
                ionicModal = modal;
                modal.show();
            });
        }

        function choose (geoname) {
            $log.debug('[GEONAME_MODAL] Choose');
            deferred.resolve(geoname);
            ionicModal.hide().then(cleanUp);
        }

        function cancel () {
            $log.debug('[GEONAME_MODAL] Cancel');
            ionicModal.hide().then(cleanUp);
        }

        function cleanUp () {
            $log.debug('[GEONAME_MODAL] Clean up');
            modalScope.geonames = [];
            modalScope.parameters.name = '';
            ionicModal.remove();
        }

        function loadMore () {
            $log.debug('[GEONAME_MODAL] Load More');
            modalScope.geonames.$fetchMore().$asPromise().then(function () {
                modalScope.$broadcast('scroll.infiniteScrollComplete');
            });
        }

        function chooseAll () {
            $log.debug('[GEONAME_MODAL] Choose all');
            deferred.resolve('all');
            ionicModal.hide().then(cleanUp);
        }

    }]);

'use strict';

angular
    .module('modals.fields', []);

'use strict';

angular
    .module('modals.fields')
    .factory('InputTextModal', ['$ionicModal', '$q', '$log', '$rootScope', function InputTextModalFactory(
        $ionicModal,
        $q,
        $log,
        $rootScope
    ){
        var ionicModal = null;
        var deferred = null;
        var modalScope = $rootScope.$new();
        modalScope.cancel = cancel;
        modalScope.done = done;
        modalScope.parameters = {};
        modalScope.parameters.text = '';
        modalScope.title = '';

        return {
            create: create
        };

        function create (defaultValue, title) {
            $log.debug('[INPUT_TEXT_MODAL] Create');
            deferred = $q.defer();
            modalScope.title = title;
            modalScope.parameters.text = defaultValue ? defaultValue : '';
            createModal();

            return deferred.promise;
        }

        function createModal () {
            $log.debug('[INPUT_TEXT_MODAL] Create modal');
            $ionicModal.fromTemplateUrl('js/modals/fields/input-text-modal.html', {
                scope: modalScope,
                animation: 'slide-in-up'
            }).then(function(modal) {
                ionicModal = modal;
                modal.show();
            });
        }

        function done () {
            $log.debug('[INPUT_TEXT_MODAL] Done');
            deferred.resolve(modalScope.parameters.text);
            ionicModal.hide().then(cleanUp);
        }

        function cancel () {
            $log.debug('[INPUT_TEXT_MODAL] Cancel');
            ionicModal.hide().then(cleanUp);
        }

        function cleanUp () {
            $log.debug('[INPUT_TEXT_MODAL] Clean up');
            modalScope.parameters.text = '';
            ionicModal.remove();
        }

    }]);

'use strict';

angular
    .module('modals.fields')
    .factory('InputDateModal', ['$ionicModal', '$q', '$log', '$rootScope', function InputDateModalFactory(
        $ionicModal,
        $q,
        $log,
        $rootScope
    ){
        var ionicModal = null;
        var deferred = null;
        var modalScope = $rootScope.$new();
        modalScope.cancel = cancel;
        modalScope.done = done;
        modalScope.parameters = {};
        modalScope.parameters.text = '';
        modalScope.title = '';

        return {
            create: create
        };

        function create (defaultValue, title) {
            $log.debug('[INPUT_DATE_MODAL] Create');
            deferred = $q.defer();
            modalScope.title = title;
            modalScope.parameters.text = defaultValue ? defaultValue : '';
            createModal();

            return deferred.promise;
        }

        function createModal () {
            $log.debug('[INPUT_DATE_MODAL] Create modal');
            $ionicModal.fromTemplateUrl('js/modals/fields/input-date-modal.html', {
                scope: modalScope,
                animation: 'slide-in-up'
            }).then(function(modal) {
                ionicModal = modal;
                modal.show();
            });
        }

        function done () {
            $log.debug('[INPUT_DATE_MODAL] Done');
            deferred.resolve(modalScope.parameters.text);
            ionicModal.hide().then(cleanUp);
        }

        function cancel () {
            $log.debug('[INPUT_DATE_MODAL] Cancel');
            ionicModal.hide().then(cleanUp);
        }

        function cleanUp () {
            $log.debug('[INPUT_DATE_MODAL] Clean up');
            modalScope.parameters.text = '';
            ionicModal.remove();
        }

    }]);

'use strict';

angular
    .module('modals.fields')
    .factory('TextareaModal', ['$ionicModal', '$q', '$log', '$rootScope', function TextareaModalFactory(
        $ionicModal,
        $q,
        $log,
        $rootScope
    ){
        var ionicModal = null;
        var deferred = null;
        var modalScope = $rootScope.$new();
        modalScope.cancel = cancel;
        modalScope.done = done;
        modalScope.parameters = {};
        modalScope.parameters.text = '';
        modalScope.title = '';

        return {
            create: create
        };

        function create (defaultValue, title) {
            $log.debug('[TEXTAREA_MODAL] Create');
            deferred = $q.defer();
            modalScope.title = title;
            modalScope.parameters.text = defaultValue ? defaultValue : '';
            createModal();

            return deferred.promise;
        }

        function createModal () {
            $log.debug('[TEXTAREA_MODAL] Create modal');
            $ionicModal.fromTemplateUrl('js/modals/fields/textarea-modal.html', {
                scope: modalScope,
                animation: 'slide-in-up'
            }).then(function(modal) {
                ionicModal = modal;
                modal.show();
            });
        }

        function done () {
            $log.debug('[TEXTAREA_MODAL] Done');
            deferred.resolve(modalScope.parameters.text);
            ionicModal.hide().then(cleanUp);
        }

        function cancel () {
            $log.debug('[TEXTAREA_MODAL] Cancel');
            ionicModal.hide().then(cleanUp);
        }

        function cleanUp () {
            $log.debug('[TEXTAREA_MODAL] Clean up');
            modalScope.parameters.text = '';
            ionicModal.remove();
        }

    }]);

'use strict';

angular
    .module('modals.filters', [])
    .factory('FiltersModal', ['$ionicModal', 'CuisineManager', '$q', '$log', '$rootScope', 'MultipleCuisinesModal', 'PriceManager', 'TagManager', function FiltersModalFactory(
        $ionicModal,
        CuisineManager,
        $q,
        $log,
        $rootScope,
        MultipleCuisinesModal,
        PriceManager,
        TagManager
    ) {
        var ionicModal = null;
        var deferred = null;
        var modalScope = $rootScope.$new();
        var MAX_COST = 200;
        var MIN_COST = 0;

        modalScope.cancel = cancel;
        modalScope.done = done;
        modalScope.chooseCuisines = chooseCuisines;
        modalScope.translate = translate;
        modalScope.resetAll = resetAll;
        modalScope.filters = {};
        modalScope.filters.geoname = undefined;
        modalScope.filters.minCost = MIN_COST;
        modalScope.filters.maxCost = MAX_COST;
        modalScope.filters.tags = [];
        modalScope.filters.proposedTags = [];
        modalScope.filters.cuisines = [];
        modalScope.getCuisinesString = getCuisinesString;

        return {
            create: create
        };


        function create(flagParametersBag) {
            $log.debug('[FILTERS_MODAL] Create with flag parameter bag', flagParametersBag);
            deferred = $q.defer();

            modalScope.filters.geoname = flagParametersBag.geoname;
            modalScope.filters.cuisines = flagParametersBag.cuisines;
            modalScope.filters.tags = flagParametersBag.tags;

            if (flagParametersBag.maxCost) {
                modalScope.filters.maxCost = flagParametersBag.maxCost;
            }

            if (flagParametersBag.minCost) {
                modalScope.filters.minCost = flagParametersBag.minCost;
            }

            getProposedTags(flagParametersBag);
            createModal();

            return deferred.promise;
        }

        function resetAll(){
            modalScope.filters.minCost = MIN_COST;
            modalScope.filters.maxCost = MAX_COST;
            modalScope.filters.cuisines = [];
            modalScope.filters.tags = [];
        }

        function getProposedTags (flagParametersBag) {
            $log.debug('[FILTERS_MODAL] Get proposed tags with flagParametersBag', flagParametersBag);
            var parameters = {};

            if (flagParametersBag.users && flagParametersBag.users.length > 0) {
                var usersParameter = _.map(flagParametersBag.users, function (user) {
                    return user.id;
                });
                parameters.users = usersParameter.join(',');
            }

            if (flagParametersBag.leadersOf) {
                parameters.leadersOf = flagParametersBag.leadersOf;
            }

            if (flagParametersBag.geoname) {
                parameters.geoname = flagParametersBag.geoname.id;
            }


            TagManager.findAll(parameters).then(function(tags){
                $log.debug('[FILTERS_MODAL] Get proposed tags result', tags);
                modalScope.filters.proposedTags = tags;
            });
        }

        function createModal() {
            $log.debug('[FILTERS_MODAL] Create modal');
            $ionicModal.fromTemplateUrl('js/modals/filters/filters-modal.html', {
                scope: modalScope,
                animation: 'slide-in-up'
            }).then(function(modal) {
                ionicModal = modal;
                modal.show();
            });
        }

        function chooseCuisines() {
            $log.debug('[FILTERS_MODAL] Choose cuisine');
            return MultipleCuisinesModal.create()
                .then(function(cuisines) {
                    $log.debug('[FILTERS_MODAL] Cuisines result ', cuisines);
                    modalScope.filters.cuisines = cuisines;
                });
        }

        function cancel() {
            $log.debug('[FILTERS_MODAL] Cancel');
            ionicModal.hide();
            deferred.reject();
        }

        function done() {
            $log.debug('[FILTERS_MODAL] Done');
            var result = {
                tags: modalScope.filters.tags,
                cuisines: modalScope.filters.cuisines,
                minCost: modalScope.filters.minCost,
                maxCost: modalScope.filters.maxCost
            };

            deferred.resolve(result);
            ionicModal.hide();
        }


        function translate(value) {
            return PriceManager.getSliderLabel(value, modalScope.filters.geoname);
        }

        function getCuisinesString () {
            if (modalScope.filters.cuisines.length > 0) {
                var cuisinesParameter = _.map(modalScope.filters.cuisines, function (cuisine) {
                    return cuisine.name;
                });
                return cuisinesParameter.join(', ');
            }
        }

    }]);

'use strict';

angular
    .module('modals.user', [])
    .factory('MultipleUsersModal', ['$ionicModal', 'UserManager', '$q', '$log', '$rootScope', function MultipleUsersModalFactory(
        $ionicModal,
        UserManager,
        $q,
        $log,
        $rootScope
    ){
        var ionicModal = null;
        var deferred = null;
        var modalScope = $rootScope.$new();
        modalScope.cancel = cancel;
        modalScope.search = _.debounce(search, 300);
        modalScope.toggle = toggle;
        modalScope.loadMore = loadMore;
        modalScope.reset = reset;
        modalScope.done = done;
        modalScope.isSelected = isSelected;
        modalScope.users = [];
        modalScope.selectedFriends = [];
        modalScope.notUserId = null;

        return {
            create: create
        };

        function create (notUserId, selectedFriends) {
            $log.debug('[MULTIPLE_USERS_MODAL] Create', notUserId, selectedFriends);
            deferred = $q.defer();
            modalScope.users = [];

            modalScope.selectedFriends = selectedFriends ? selectedFriends : [];
            modalScope.notUserId = notUserId;

            modalScope.parameters = {
                name: ''
            };
            createModal();
            search();

            return deferred.promise;
        }

        function search () {
            $log.debug('[MULTIPLE_USERS_MODAL] Search start');
            modalScope.users.length = 0;
            modalScope.loading = true;
            var parameters = {};
            if (modalScope.parameters.name.trim() !== '' ) {
                parameters.query = modalScope.parameters.name
            }
            if (modalScope.notUserId) {
                parameters.notUsers = modalScope.notUserId;
            }

            UserManager.findAll(parameters).then(function (users) {
                $log.debug('[MULTIPLE_USERS_MODAL] Search end');
                modalScope.users = users;
                modalScope.loading = false;
            });
        }

        function createModal () {
            $log.debug('[MULTIPLE_USERS_MODAL] Create modal');
            $ionicModal.fromTemplateUrl('js/modals/user/multiple-users-modal.html', {
                scope: modalScope,
                animation: 'slide-in-up'
            }).then(function(modal) {
                ionicModal = modal;
                modal.show();
            });
        }

        function done (user) {
            $log.debug('[MULTIPLE_USERS_MODAL] Done');
            deferred.resolve(modalScope.selectedFriends);
            ionicModal.hide().then(cleanUp);
        }

        function toggle (user) {
            $log.debug('[MULTIPLE_USERS_MODAL] Toggle');
            isSelected(user) ? remove(user) : add(user);
        }

        function add (user) {
            $log.debug('[MULTIPLE_USERS_MODAL] Add');
            modalScope.selectedFriends.push(user);
        }

        function remove (user) {
            $log.debug('[MULTIPLE_USERS_MODAL] Remove');
            modalScope.selectedFriends = _.reject(modalScope.selectedFriends, function(u){
                return u.id === user.id;
            });
        }

        function cancel () {
            $log.debug('[MULTIPLE_USERS_MODAL] Cancel');
            ionicModal.hide().then(cleanUp);
        }

        function cleanUp () {
            $log.debug('[MULTIPLE_USERS_MODAL] Clean up');
            modalScope.users = [];
            modalScope.selectedFriends = [];
            modalScope.parameters.name = '';
            ionicModal.remove();
        }

        function loadMore () {
            $log.debug('[MULTIPLE_USERS_MODAL] Load More');
            modalScope.users.$fetchMore().$asPromise().then(function () {
                modalScope.$broadcast('scroll.infiniteScrollComplete');
            });
        }

        function reset () {
            $log.debug('[MULTIPLE_USERS_MODAL] Reset');
            modalScope.selectedFriends = [];
            ionicModal.hide().then(cleanUp);
        }

        function isSelected (user) {
            return _.some(modalScope.selectedFriends, function(u){
                return user.id === u.id;
            });
        }

    }]);

'use strict';

angular
    .module('modals.tag', []);

'use strict';

angular
    .module('modals.tag')
    .factory('TagModal', ['$ionicModal', 'TagManager', '$q', '$log', '$rootScope', 'Loader', 'Security', function TagModalFactory(
        $ionicModal,
        TagManager,
        $q,
        $log,
        $rootScope,
        Loader,
        Security
    ){
        var ionicModal = null;
        var deferred = null;
        var tagsGroupId = null;
        var modalScope = $rootScope.$new();
        modalScope.cancel = cancel;
        modalScope.done = done;
        modalScope.toggle = toggle;
        modalScope.loading = false;
        modalScope.isSelected = isSelected;
        modalScope.tags = [];
        modalScope.selectedTags = [];
        modalScope.canCreateNewTags = false;
        modalScope.newTag = TagManager.buildRestmodResource();
        modalScope.saveNewTag = saveNewTag;

        return {
            create: create
        };

        function create (groupId, review, canCreateNewTags) {
            $log.debug('[TAG_MODAL] Create');
            deferred = $q.defer();
            modalScope.tags = [];
            modalScope.canCreateNewTags = canCreateNewTags;
            modalScope.newTag.groupId = groupId;
            modalScope.newTag.name = '';
            tagsGroupId = groupId;
            createModal();
            initializeSelectedTags(review);
            search(groupId);

            return deferred.promise;
        }

        function initializeSelectedTags (review) {
            _.each(review.tags, function (tag) {
                if (tag.groupId === tagsGroupId) {
                    modalScope.selectedTags.push(tag);
                }
            });
        }

        function search (groupId) {
            $log.debug('[TAG_MODAL] Search');
            modalScope.loading = true;
            modalScope.tags = [];

            var parameters = {
                groupId: groupId
            };

            if (modalScope.canCreateNewTags) {
                parameters.user = Security.user.id;
            }

            TagManager.findAll(parameters).then(function (tags) {
                $log.debug('[TAG_MODAL] Search end');
                modalScope.tags = tags;
                modalScope.loading = false;
            });
        }

        function createModal () {
            $log.debug('[TAG_MODAL] Create modal');
            $ionicModal.fromTemplateUrl('js/modals/tag/tag-modal.html', {
                scope: modalScope,
                animation: 'slide-in-up'
            }).then(function(modal) {
                ionicModal = modal;
                modal.show();
            });
        }

        function toggle (tag) {
            $log.debug('[TAG_MODAL] Toggle');
            isSelected(tag) ? remove(tag) : add(tag);
        }

        function add(tag) {
            $log.debug('[TAG_MODAL] Add tag', tag);
            modalScope.selectedTags.push(tag);
        }

        function remove (tag) {
            $log.debug('[TAG_MODAL] Remove tag', tag);
            modalScope.selectedTags = _.reject(modalScope.selectedTags, function(t){
                return t.id === tag.id;
            });
        }

        function isSelected (tag) {
            return _.some(modalScope.selectedTags, function (t) {
                return t.id === tag.id;
            });
        }

        function done () {
            $log.debug('[TAG_MODAL] Done');
            deferred.resolve(modalScope.selectedTags);
            ionicModal.hide().then(cleanUp);
        }

        function cancel () {
            $log.debug('[TAG_MODAL] Cancel');
            ionicModal.hide().then(cleanUp);
        }

        function cleanUp () {
            $log.debug('[TAG_MODAL] Clean up');
            modalScope.tags = [];
            modalScope.selectedTags = [];
            modalScope.canCreateNewTags = false;
            modalScope.newTag = TagManager.buildRestmodResource();
            ionicModal.remove();
        }

        function saveNewTag () {
            $log.debug('[TAG_MODAL] Save new tag');
            if (modalScope.newTag.name.trim() === '') {
                return;
            }
            var parameters = {
                name: modalScope.newTag.name
            };
            var existingTag = _.find(modalScope.tags, parameters);
            if (existingTag) {
                modalScope.newTag = TagManager.buildRestmodResource();
                return modalScope.selectedTags.push(existingTag);
            }
            parameters.like = false;
            TagManager.findAll(parameters).then(function(tags){
                tags.length > 0 ? pushExistingNewTag(tags[0]) : createNewTag();
            });

        }

        function pushExistingNewTag (tag) {
            modalScope.tags.push(tag);
            modalScope.selectedTags.push(tag);
            modalScope.newTag = TagManager.buildRestmodResource();
        }

        function createNewTag () {
            var promise = modalScope.newTag.$save().$asPromise();
            Loader.track(promise);
            modalScope.tags.push(modalScope.newTag);
            modalScope.selectedTags.push(modalScope.newTag);
            modalScope.newTag = TagManager.buildRestmodResource();
        }

    }]);

'use strict';

angular
    .module('modals.review', [])
    .factory('ReviewExtraFieldsModal', ['$ionicModal', '$q', '$log', '$rootScope', 'ReviewExtraFields', function ReviewExtraFieldsModalFactory(
        $ionicModal,
        $q,
        $log,
        $rootScope,
        ReviewExtraFields
    ){
        var ionicModal = null;
        var deferred = null;
        var modalScope = $rootScope.$new();
        modalScope.cancel = cancel;
        modalScope.done = done;
        modalScope.toggle = toggle;
        modalScope.reviewExtraFields = ReviewExtraFields;

        return {
            create: create
        };

        function create (review) {
            $log.debug('[REVIEW_EXTRA_FIELDS_MODAL] Create');
            deferred = $q.defer();
            updateExtraFields(review);
            createModal();

            return deferred.promise;
        }

        function updateExtraFields (review) {
            var activeProperties = [];
            for (var property in review) {
                if (review.hasOwnProperty(property) && !isEmpty(review[property])) {
                    activeProperties.push(property);
                }
            }
            ReviewExtraFields.activate(activeProperties);
        }

        function isEmpty (p) {
            if (_.isArray(p) || _.isString(p)) {
                return _.isEmpty(p);
            }

            return true;
        }

        function createModal () {
            $log.debug('[REVIEW_EXTRA_FIELDS_MODAL] Create modal');
            $ionicModal.fromTemplateUrl('js/modals/review/review-extra-fields-modal.html', {
                scope: modalScope,
                animation: 'slide-in-up'
            }).then(function(modal) {
                ionicModal = modal;
                modal.show();
            });
        }

        function done () {
            $log.debug('[REVIEW_EXTRA_FIELDS_MODAL] Choose');
            deferred.resolve(geoname);
            ionicModal.hide().then(cleanUp);
        }

        function toggle (field) {
            $log.debug('[REVIEW_EXTRA_FIELDS_MODAL] Toggle', field);
            var action = {};
            if (field.active) {
                field.active = false;
                action = {
                    'name': 'REMOVE',
                    'field': field
                };
            } else {
                field.active = true;
                action = {
                    'name': 'ADD',
                    'field': field
                };
            }
            deferred.resolve(action);
            ionicModal.hide().then(cleanUp);
        }

        function cancel () {
            $log.debug('[REVIEW_EXTRA_FIELDS_MODAL] Cancel');
            ionicModal.hide().then(cleanUp);
        }

        function cleanUp () {
            $log.debug('[REVIEW_EXTRA_FIELDS_MODAL] Clean up');
            ionicModal.remove();
        }

    }]);

'use strict';

angular
    .module('popups', []);

'use strict';

angular
    .module('popups')
    .factory('DisconnectedPopup', ['$translate', '$ionicPopup', function DisconnectedPopupFactory (
        $translate,
        $ionicPopup
    ) {
        return {
            create: create
        };

        function create () {
            return $ionicPopup.confirm({
                title : $translate.instant('popup.disconnected.title'),
                template : $translate.instant('popup.disconnected.text'),
                okText : $translate.instant('popup.disconnected.ok')
            });
        }
    }]);

'use strict';

angular
    .module('popups')
    .factory('AlertPopup', ['$translate', '$ionicPopup', function AlertPopupFactory (
        $translate,
        $ionicPopup
    ) {
        return {
            create: create
        };

        function create (title, text) {
            return $ionicPopup.alert({
                title: $translate.instant(title),
                template: $translate.instant(text)
            });
        }
    }]);

'use strict';

angular
    .module('popups')
    .factory('ConfirmPopup', ['$translate', '$ionicPopup', function ConfirmPopupFactory (
        $translate,
        $ionicPopup
    ) {
        return {
            create: create
        };

        function create (title, text) {
            return $ionicPopup.confirm({
                title: $translate.instant(title),
                template: $translate.instant(text)
            });
        }
    }]);

'use strict';

angular
    .module('popups')
    .factory('DuplicatedRestaurantPopup', ['$translate', '$rootScope', '$ionicPopup', '$state', function DuplicatedRestaurantPopupFactory (
        $translate,
        $rootScope,
        $ionicPopup,
        $state
    ) {

        return {
            create: create
        };

        function create (restaurants) {
            var popupScope = $rootScope.$new();
            popupScope.duplicatedRestaurants = restaurants;
            popupScope.chooseRestaurant = function (id) {
                popupPromise.close();
                $state.go('restaurantView', {
                    restaurantId : id
                });
            };
            var popupPromise = $ionicPopup.show({
                title : $translate.instant('restaurant.duplicated_title'),
                scope: popupScope,
                templateUrl : 'js/popups/duplicated-restaurant-popup.html',
                buttons: [
                    {
                        text: $translate.instant('restaurant.duplicated_continue'),
                        type: 'button-positive',
                        onTap: function (e) {
                            return 'continue';
                        }

                    },
                    {
                        text: $translate.instant('button.cancel'),
                        type: 'button-default',
                        onTap: function (e) {
                            return 'cancel';
                        }

                    }
                ]
            });

            return popupPromise;
        }

    }]);

'use strict';

angular
    .module('popups')
    .factory('InaccurateAddressPopup', ['$translate', '$rootScope', '$ionicPopup', function InaccurateAddressPopupFactory (
        $translate,
        $rootScope,
        $ionicPopup
    ) {

        return {
            create: create
        };

        function create (address) {
            return $ionicPopup.show({
                title : $translate.instant('popup.inaccurate_address.title'),
                subTitle : $translate.instant('popup.inaccurate_address.text'),
                buttons : [{
                    text : $translate.instant('popup.inaccurate_address.ok'),
                    type : 'button-default',
                    onTap : function () {
                        return address;
                    }
                }, {
                    text : $translate.instant('popup.inaccurate_address.no'),
                    type : 'button-positive',
                    onTap : function () {
                        address.refused = true;
                        return address;
                    }
                }]
            });
        }

    }]);

'use strict';

angular
    .module('states.invite', [
        'services.contacts',
        'entities.invite',
        'entities.user'
    ])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider.state('inviteHome', {
            url: '/invite/invite-home',
            parent: 'private',
            templateUrl: 'js/states/invite/invite-home.html',
            controller :'InviteHomeCtrl as ctrl',
            title: 'invite.page_title',
            layout: {
                'main-menu-profile': true,
                'navbar-back-button': true
            }

        });

    }]);

'use strict';

angular
    .module('states.invite')
    .controller('InviteHomeCtrl', ['$http', '$q', 'Config', 'SimpleLocalStorage', '$scope', 'me', '$log', '$cordovaSocialSharing', '$translate', 'Analytics', function InviteHomeCtrl(
        $http,
        $q,
        Config,
        SimpleLocalStorage,
        $scope,
        me,
        $log,
        $cordovaSocialSharing,
        $translate,
        Analytics
    ) {

        var ctrl = this;
        var title = $translate.instant('invite.share.title');
        var message = $translate.instant('invite.share.message');

        ctrl.publishOnFb = function() {
            if (!window.plugins) {
                return window.alert('No cordova no party');
            }

            var url = 'https://tastdapp.com?invite&user=' + me.id;

            Analytics.trackEvent('share', 'invite');

            return $cordovaSocialSharing
                .share(message, title, null, url);
        };

    }]);

'use strict';

angular.module('states.landing', [])

.config(['$stateProvider', function ($stateProvider) {

    $stateProvider.state('landing', {
        url: '/',
        parent: 'public',
        templateUrl: 'js/states/landing/landing.html',
        controller: 'LandingCtrl as ctrl'
    });
}]);

'use strict';

angular
    .module('states.landing')
    .controller('LandingCtrl', ['$state', 'Loader', 'FacebookConnect', 'Security', '$log', '$q', '$rootScope', 'AlertPopup', 'UserGeolocation', function (
        $state,
        Loader,
        FacebookConnect,
        Security,
        $log,
        $q,
        $rootScope,
        AlertPopup,
        UserGeolocation
    ) {
        var ctrl = this;
        var signUpDeferred = null;
        ctrl.login = login;
        ctrl.signup = signup;
        var credential = {};
        var facebookCredential = null;

        function setCredential (me) {
            $log.debug('[CONTROLLER] me', me);
            if (!me) {
                return;
            }
            if (me.first_name) {
                ctrl.credential.firstName = me.first_name;
            }
            if (me.last_name) {
                ctrl.credential.lastName = me.last_name;
            }
            if (me.email) {
                ctrl.credential.email = me.email;
            }
        }

        function login () {
            var facebookPromise = FacebookConnect.login();
            var loginPromise = facebookPromise.then(function (response) {
                $log.debug('[CONTROLLER] Successful facebook login');
                facebookCredential = response;
                setCredential(response.me);
                return Security.login(credential);
            }, function () {
                $log.debug('[CONTROLLER] Failed facebook login');
                return signup();
            });
            loginPromise.then(function () {
                $log.debug('[CONTROLLER] Successful tastd login with facebook');
                return $state.go('wall');
            }, function () {
                $log.debug('[CONTROLLER] Failed login');
                return signup();
            });

            Loader.track(facebookPromise, {loadingTimeout: 60 * 1000});
        }

        function signup () {
            $log.debug('[CONTROLLER] Sign up');
            var geolocationPromise = null;
            var facebookPromise = null;
            signUpDeferred = $q.defer();
            if (!facebookCredential) {
                facebookPromise = FacebookConnect.login();
                geolocationPromise = facebookPromise.then(onFacebookSuccess, onFacebookError);
            } else {
                geolocationPromise = UserGeolocation.getCurrentGeoname();
            }
            var securityPromise = geolocationPromise.then(onGeolocationSuccess, onGeolocationError);
            securityPromise.then(onSignupSuccess, onSignupError);

            Loader.track(signUpDeferred.promise);
        }

        function onFacebookSuccess (response) {
            $log.debug('[CONTROLLER] On Facebook success');
            facebookCredential = response;
            setCredential(response.me);

            if (!ctrl.credential.email) {
                var deferred = $.defer();
                deferred.reject();

                return deferred.promise();
            }

            return UserGeolocation.getCurrentGeoname();
        }

        function onFacebookError () {
            $log.debug('[CONTROLLER] On Facebook error');
            signUpDeferred.reject();
            goToEmailSignup();
        }

        function onGeolocationSuccess (geoname) {
            $log.debug('[CONTROLLER] On geolocation success', geoname);
            facebookCredential.geoname = geoname.id;
            $log.debug('[CONTROLLER] On geolocation success try to signup with credential', facebookCredential);
            return Security.signup(facebookCredential);
        }

        function onGeolocationError () {
            $log.debug('[CONTROLLER] On Geolocation error');
            signUpDeferred.reject();
            goToFacebookSignup();
        }

        function onSignupSuccess () {
            $log.debug('[CONTROLLER] On Signup success');
            signUpDeferred.resolve();
            return $state.go('onBoardingIntro');
        }

        function onSignupError (e) {
            $log.debug('[CONTROLLER] On Sign up error', e);
            signUpDeferred.reject();
            if (e.data && e.data.id === 'AlreadyRegisteredWithEmailException') {
                AlertPopup.create(
                    'popup.already_registered_with_email.title',
                    'popup.already_registered_with_email.text'
                );
            } else {
                goToFacebookSignup();
            }
        }

        function goToEmailSignup () {
            $log.debug('[CONTROLLER] Go to email sign up');
            $state.go('signup', {
                firstName: ctrl.credential.firstName,
                lastName: ctrl.credential.lastName,
                email: ctrl.credential.email,
                geoname: ctrl.credential.geoname
            });
        }

        function goToFacebookSignup () {
            $log.debug('[CONTROLLER] Go to facebook sign up');
            $state.go('signupFb', {
                firstName: ctrl.credential.firstName,
                lastName: ctrl.credential.lastName,
                email: ctrl.credential.email,
                externalId: ctrl.credential.externalId,
                token: ctrl.credential.token,
                geoname: ctrl.credential.geoname
            });
        }
    }]);

'use strict';

angular
    .module('states.map', [
        'services.google',
        'directives.map',
        'services.map',
        'services.utility'
    ])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('map', {
                url : '/map',
                parent : 'private',
                templateUrl : 'js/states/map/map.html',
                controller : 'MapCtrl as ctrl',
                resolve: {
                    flagParametersBag: ['FlagParametersBagFactory', 'me', function (FlagParametersBagFactory, me) {
                        var flagParametersBag = FlagParametersBagFactory.createWithLastGeoname();
                        flagParametersBag.leadersOf = me.id;

                        return flagParametersBag;
                    }]
                },
                layout: {
                    'navbar-geo-guru': true,
                    'navbar-page-title': false,
                    'navbar-map-button': true,
                    'main-menu-restaurants': true
                }
            });

        $stateProvider.state('rankingList', {
            url: '/user/:userId/rankings/list/:cityName/:cityId/:userFirstName/:userLastName/:userFullName/:lat/:lng',
            parent: 'private',
            templateUrl: 'js/states/map/map.html',
            controller: 'MapCtrl as ctrl',
            resolve: {
                geonameParameter: ['GeonameManager', '$stateParams', function (GeonameManager, $stateParams) {
                    return GeonameManager.createFromStateParams($stateParams);
                }],
                userParameter: ['UserManager', '$stateParams', function (UserManager, $stateParams) {
                    return UserManager.createFromStateParams($stateParams);
                }],
                flagParametersBag: ['FlagParametersBagFactory', 'geonameParameter', 'userParameter', function (
                    FlagParametersBagFactory,
                    geonameParameter,
                    userParameter
                ) {
                    return FlagParametersBagFactory
                        .createFromUserAndGeoname(userParameter, geonameParameter);
                }]
            },
            layout: {
                'main-menu-news': 'inherit',
                'main-menu-restaurants': 'inherit',
                'main-menu-add': 'inherit',
                'main-menu-gurus': 'inherit',
                'main-menu-profile': 'inherit',
                'navbar-ranking-title': true,
                'navbar-back-button': true,
                'navbar-page-title': false,
                'navbar-map-button': true
            }
        });

    }]);

'use strict';

angular
    .module('states.map')
    .controller('MapCtrl', ['$scope', '$state', '$stateParams', 'FlagManager', 'me', '$rootScope', '$log', 'FiltersModal', 'flagParametersBag', 'MapService', 'UserGeolocation', 'Loader', '$ionicScrollDelegate', 'Analytics', function (
        $scope,
        $state,
        $stateParams,
        FlagManager,
        me,
        $rootScope,
        $log,
        FiltersModal,
        flagParametersBag,
        MapService,
        UserGeolocation,
        Loader,
        $ionicScrollDelegate,
        Analytics
    ) {

        $log.debug('[CONTROLLER] Start MapCtrl');
        var ctrl = this;
        ctrl.flags = [];
        ctrl.entered = false;
        ctrl.loading = false;
        ctrl.mapMode = false;
        ctrl.isReordable = true;
        ctrl.page = $state.current.name;
        ctrl.flagParametersBag = flagParametersBag;
        ctrl.doRefresh = doRefresh;
        ctrl.loadMoreItems = loadMoreItems;
        ctrl.openFiltersModal = openFiltersModal;
        ctrl.toggleWishFilter = toggleWishFilter;
        ctrl.toggleReviewFilter = toggleReviewFilter;
        ctrl.noResultMessageIsFilter = noResultMessageIsFilter;
        ctrl.isMe = isMe;

        initialize();

        function initialize () {
            loadFlags();
            $scope.$on("$destroy", onDestroy);
            $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
            $scope.$on('$ionicView.afterEnter', onAfterEnter);
            $scope.$on('$ionicView.beforeLeave', onBeforeLeave);
            $scope.$on('navbar.changeGeoGuru', onChangeGeoGuru);
            $scope.$on('navbar.mapMode', onNavbarMap);
            $scope.$on('navbar.centerOnMe', onCenterOnMe);
            $scope.$on('map.bounds', onMapBounds);
        }

        function isMe () {
            if (ctrl.flagParametersBag.users.length !== 1) {
                return false;
            }
            if (typeof ctrl.flagParametersBag.users[0] === 'undefined') {
                return false;
            }

            return parseInt(ctrl.flagParametersBag.users[0].id) === parseInt(me.id);
        }

        function onBeforeEnter () {
            $log.debug('[CONTROLLER] Entered');
            $scope.$parent.flagParametersBag = flagParametersBag;
            $scope.$parent.mapMode = ctrl.mapMode;
            initializeMap();
        }

        function onAfterEnter () {
            $log.debug('[CONTROLLER] On after enter');
            ctrl.entered = true;
            ctrl.mapMode ? showGlobalMap() : hideGlobalMap();

        }

        function onNavbarMap (event, parameters) {
            $log.debug('[CONTROLLER] On Map mode', parameters);
            parameters.mapMode ? activateMap() : deactivateMap();
        }

        function deactivateMap () {
            $log.debug('[CONTROLLER] Deactivate map');
            ctrl.mapMode = false;
            flagParametersBag.resetBounds();
            hideGlobalMap();
            loadFlags();
        }

        function activateMap () {
            $log.debug('[CONTROLLER] Activate map');
            Analytics.trackEvent($state.current.name, 'activate_map_view');
            ctrl.mapMode = true;
            showGlobalMap();
            initializeMap();
            setTimeout(function () {
                MapService.refreshRendering();
            }, 0);
        }

        function onMapBounds (event, bounds) {
            if (ctrl.mapMode) {
                flagParametersBag.updateWithBoundsResponse(bounds);
                loadFlags();
            }
        }

        function onChangeGeoGuru (event, result) {
            $log.debug('[CONTROLLER] On change geo guru');
            MapService.centerOnGeoname(flagParametersBag.geoname);
            if (result.guru) {
                Analytics.trackEvent('map', 'single_guru');
            } else {
                Analytics.trackEvent('map', 'all_gurus');
            }

            loadFlags();
        }

        function onBeforeLeave () {
            ctrl.entered = false;
            hideGlobalMap();
        }

        function doRefresh () {
            FlagManager.findAll(flagParametersBag.getQueryParameters())
                .then(function(flags){
                    ctrl.flags = flags;
                }).finally(function(){
                    $scope.$broadcast('scroll.refreshComplete');
                });
        }

        function onDestroy () {
            $log.debug('[CONTROLLER] On $destroy');
        }

        function loadMoreItems () {
            ctrl.flags.$fetchMore().$asPromise().then(function () {
                $scope.$broadcast('scroll.infiniteScrollComplete');
            });
        }

        function loadFlags(){
            $log.debug('[CONTROLLER] Start load Flags');
            ctrl.loading = true;
            $scope.$parent.mapIsLoading = true;
            if (!ctrl.mapMode) {
                $ionicScrollDelegate.scrollTop();
                ctrl.flags.length = 0;
            }
            return FlagManager.findAll(flagParametersBag.getQueryParameters())
                .then(onLoadFlags);
        }

        function onLoadFlags (flags) {
            $log.debug('[CONTROLLER] Finish load Flags');
            if (ctrl.mapMode) {
                MapService.setFlags(flags);
            } else {
                ctrl.flags = flags;
            }
            ctrl.loading = false;
            $scope.$parent.mapIsLoading = false;
            ctrl.isReordable = isMe();
        }

        function openFiltersModal () {
            $log.debug('[MAP_LIST_CONTROLLER] Open filters Modal');
            return FiltersModal.create(flagParametersBag)
                .then(function(response){
                    $log.debug('[MAP_LIST_CONTROLLER] Filter Modal results', response);
                    Analytics.trackFilters($state.current.name, response, 0, 300);
                    flagParametersBag.updateWithFiltersResponse(response);
                    loadFlags();
                });
        }

        function toggleWishFilter () {
            $log.debug('[MAP_LIST_CONTROLLER] Toggle wishedBy filter');
            flagParametersBag.wishedBy = flagParametersBag.wishedBy ? undefined : me.id;
            loadFlags();
            if (flagParametersBag.wishedBy) {
                Analytics.trackEvent($state.current.name, 'activate_wished_by_me_filter');
            }
        }

        function toggleReviewFilter () {
            $log.debug('[MAP_LIST_CONTROLLER] Toggle reviewedBy filter');
            flagParametersBag.reviewedBy = flagParametersBag.reviewedBy ? undefined : me.id;
            loadFlags();
            if (flagParametersBag.reviewedBy) {
                Analytics.trackEvent($state.current.name, 'activate_reviewed_by_me_filter');
            }
        }


        // MAP

        function initializeMap () {
            $log.debug('[MAP_LIST_CONTROLLER] Initialize map');
            if (flagParametersBag.geoname) {
                onGeonameLoad(flagParametersBag.geoname);
            } else {
                flagParametersBag.geonamePromise.then(onGeonameLoad);
            }
        }

        function onGeonameLoad (geoname) {
            $log.debug('[MAP_LIST_CONTROLLER] Initialize map (On geoname load)');
            var coordinates = {
                lat: parseFloat(geoname.lat),
                lng: parseFloat(geoname.lng)
            };
            MapService.createMap(coordinates);
        }

        function onCenterOnMe () {
            $log.debug('[MAP_LIST_CONTROLLER] Center on me');
            Loader.track(UserGeolocation.getCurrentPosition()
                .then(function(coordinates){
                    MapService.setMyCoordinates(coordinates);
                }));
        }

        function showGlobalMap () {
            angular.element(document.getElementsByClassName('map-global-wrapper')).addClass('active');
        }

        function hideGlobalMap () {
            angular.element(document.getElementsByClassName('map-global-wrapper')).removeClass('active');
        }

        function noResultMessageIsFilter () {
            return ctrl.flagParametersBag.isDirty()
                || ctrl.flagParametersBag.reviewedBy
                || ctrl.flagParametersBag.wishedBy;
        }


    }]);


'use strict';

angular
    .module('states.notification', [])
    .config(['$stateProvider', function ($stateProvider) {

        $stateProvider.state('notifications', {
            url : '/notifications',
            cache: false,
            parent : 'private',
            templateUrl : 'js/states/notification/notification.html',
            controller : 'NotificationCtrl as ctrl',
            title: 'notification.page_title',
            layout: {
                'main-menu-news': true,
                'navbar-back-button': true
            }
        });
    }]);

'use strict';

angular
    .module('states.notification')
    .controller('NotificationCtrl', ['PushMessageManager', 'me', 'Loader', 'NotificationBadge', '$scope', '$log', function NotificationsCtrl(
        PushMessageManager,
        me,
        Loader,
        NotificationBadge,
        $scope,
        $log
    ) {
        var ctrl = this;
        ctrl.loadMore = loadMore;
        ctrl.doRefresh = doRefresh;
        ctrl.pushMessages = [];
        ctrl.loading = true;

        initialize();

        function initialize () {
            loadNotifications().then(function () {
                ctrl.loading = false;
                $log.debug('[CONTROLLER] then');
            });
        }

        function doRefresh () {
            loadNotifications().finally(function(){
                $scope.$broadcast('scroll.refreshComplete');
            });
        }

        function loadMore () {
            return ctrl.pushMessages
                .$fetchMore().$asPromise()
                .finally(function (data) {
                    $scope.$broadcast('scroll.infiniteScrollComplete');
                });
        }

        function loadNotifications () {
            return PushMessageManager.findAllByUserId(me.id)
                .then(function(pushMessages){
                    $log.debug('[CONTROLLER] pushMessages loaded');
                    ctrl.pushMessages = pushMessages;
                    PushMessageManager.markAllAsSeen(me.id);
                    NotificationBadge.counter = 0;
                });
        }
    }]);

'use strict';

angular
    .module('states.onBoarding', [
        'directives.map',
        'services.event'
    ])
    .config(['$stateProvider', 'SecurityProvider', function ($stateProvider, SecurityProvider) {

        $stateProvider.state('onBoardingIntro', {
            url : '/on-boarding/intro',
            templateUrl : 'js/states/on-boarding/on-boarding-intro.html',
            controller : 'OnBoardingIntroCtrl as ctrl',
            resolve :  {
                me: SecurityProvider.resolvers.me
            }
        });

        $stateProvider.state('onBoardingTopRestaurants', {
            url : '/on-boarding/top-restaurants',
            parent : 'private',
            templateUrl : 'js/states/on-boarding/on-boarding-top-restaurants.html',
            controller : 'OnBoardingTopRestaurantsCtrl as ctrl',
            title: 'on_boarding.top_restaurants.page_title',
            layout: {
                'main-menu': false
            }
        });

        $stateProvider.state('onBoardingFriends', {
            url : '/on-boarding/friends',
            parent : 'private',
            templateUrl : 'js/states/on-boarding/on-boarding-friends.html',
            controller : 'OnBoardingFriendsCtrl as ctrl',
            title: 'on_boarding.friends.page_title',
            layout: {
                'main-menu': false
            }
        });

        $stateProvider.state('onBoardingTopGurus', {
            url : '/on-boarding/top-gurus',
            parent : 'private',
            templateUrl : 'js/states/on-boarding/on-boarding-top-gurus.html',
            controller : 'OnBoardingTopGurusCtrl as ctrl',
            title: 'on_boarding.top_gurus.page_title',
            layout: {
                'main-menu': false
            }
        });

        $stateProvider.state('onBoardingSuggestions', {
            url : '/on-boarding/suggestions',
            templateUrl : 'js/states/on-boarding/on-boarding-suggestions.html',
            controller : 'OnBoardingSuggestionsCtrl as ctrl',
            parent : 'private',
            title: 'on_boarding.suggestions.page_title',
            layout: {
                'main-menu': false
            }
        });

    }]);

'use strict';

angular
    .module('states.onBoarding')
    .controller('OnBoardingIntroCtrl', ['$log', '$state', 'me', function (
        $log,
        $state,
        me
    ) {
        var ctrl = this;
        ctrl.name = me.firstName;
        ctrl.next = next;

        function next () {
            $state.go('onBoardingTopRestaurants');
        }


    }]);

'use strict';

angular
    .module('states.onBoarding')
    .controller('OnBoardingFriendsCtrl', ['$q', 'me', 'Leader', '$log', '$scope', '$state', 'EventDispatcher', 'UserManager', 'LayoutManager', 'FriendManager', 'FacebookConnect', 'ValidatorViolatedContext', 'IonicValidateOnSubmitPopup', function (
        $q,
        me,
        Leader,
        $log,
        $scope,
        $state,
        EventDispatcher,
        UserManager,
        LayoutManager,
        FriendManager,
        FacebookConnect,
        ValidatorViolatedContext,
        IonicValidateOnSubmitPopup
    ) {
        var ctrl = this;
        ctrl.me = me;
        ctrl.friends = [];
        ctrl.done = done;
        ctrl.loading = true;

        initialize();

        function initialize () {
            searchFriends();
        }

        function done () {
            $state.go('onBoardingTopGurus');
        }

        function searchFriends () {
            $log.debug('[CONTROLLER] Search Friends');
            ctrl.friends = [];
            ctrl.friendsLoading = true;

            FacebookConnect.ensureHasCredential(me)
                .then(function() {
                    $log.debug('[CONTROLLER] After ensure credential');
                    FriendManager.findAll()
                        .then(onGetFriendsSuccess, onGetFriendsError);
                },function(){
                    $log.debug('[CONTROLLER] Ensure has credential error');
                    ctrl.friendsLoading = false;
                    $state.go('onBoardingTopGurus');
                });
        }

        function onGetFriendsSuccess(friends) {
            $log.debug('[CONTROLLER] Friends success');
            ctrl.friends = friends;
            ctrl.friendsLoading = false;
        }

        function onGetFriendsError(restResponse) {
            $log.debug('[CONTROLLER] Friends error');
            ctrl.friendsLoading = false;
            if(restResponse.$response.data.id === 'Facebook') {
                return FacebookConnect.loginWithUpdateCredential(me).then(function(){
                    $log.debug('[CONTROLLER] Search again');
                    searchFriends();
                }, function () {
                    $log.debug('[CONTROLLER] Login with update credential error');
                    $state.go('onBoardingTopGurus');
                });
            }
            var context = ValidatorViolatedContext.getContextByRestResponse(restResponse);
            new IonicValidateOnSubmitPopup(context).alert();
        }

    }]);

'use strict';

angular
    .module('states.onBoarding')
    .controller('OnBoardingSuggestionsCtrl', ['me', '$q', '$log', 'Review', '$scope', '$state', 'FlagManager', 'FlagParametersBagFactory', function (
        me,
        $q,
        $log,
        Review,
        $scope,
        $state,
        FlagManager,
        FlagParametersBagFactory
    ) {

        var ctrl = this;
        ctrl.me = me;
        ctrl.flags = [];
        ctrl.loading = true;
        ctrl.flagParametersBag = null;

        initialize();
        ctrl.loadMore = loadMore;
        ctrl.done = done;

        function initialize () {
            $log.debug('[CONTROLLER] On Boarding suggestion init');
            ctrl.flagParametersBag = FlagParametersBagFactory
                .create();
            ctrl.flagParametersBag.geoname = me.geoname;
            ctrl.flagParametersBag.orderBy = 'score';
            ctrl.flagParametersBag.leadersOf = me.id;

            FlagManager.findAll(ctrl.flagParametersBag.getQueryParameters())
                .then(function (flags) {
                    $log.debug('[CONTROLLER] After find', flags);
                    removePosition(flags);
                    ctrl.loading = false;
                    ctrl.flags = flags;
                });
        }

        function loadMore () {
            $log.debug('[CONTROLLER] Load more');
            return ctrl.flags.$fetchMore().$asPromise()
                .then(function(){
                    removePosition(ctrl.flags);
                })
                .finally(function() {
                    $scope.$broadcast('scroll.infiniteScrollComplete');
                });
        }

        function removePosition (flags) {
            _.each(flags, function (flag) {
                flag.position = undefined;
            });
        }

        function done () {
            $log.debug('[CONTROLLER] On Boarding suggestion done');
            if (ctrl.loading) {
                return;
            }
            $state.go('wall');
        }
    }]);

'use strict';

angular
    .module('states.onBoarding')
    .controller('OnBoardingTopGurusCtrl', ['$q', 'me', 'Leader', '$log', '$scope', '$state', 'EventDispatcher', 'UserManager', 'LayoutManager', 'FacebookConnect', 'ValidatorViolatedContext', 'IonicValidateOnSubmitPopup', function (
        $q,
        me,
        Leader,
        $log,
        $scope,
        $state,
        EventDispatcher,
        UserManager,
        LayoutManager,
        FacebookConnect,
        ValidatorViolatedContext,
        IonicValidateOnSubmitPopup
    ) {
        var ctrl = this;
        var searchParams = {
            orderBy: 'geoScore',
            geoname: me.geoname ? me.geoname.id : 1,
            notUsers: me.id
        };
        ctrl.me = me;
        ctrl.gurus = [];
        ctrl.loadMore = loadMore;
        ctrl.done = done;
        ctrl.loading = true;

        initialize();

        function initialize () {
            var promise = UserManager.findAll(searchParams);
            LayoutManager.setTitle(LayoutManager.getTitle() + ' ' + me.geoname.asciiName);
            promise.then(function(gurus){
                ctrl.gurus = gurus;
                ctrl.loading = false;
            });
        }

        function loadMore () {
            return ctrl.gurus.$fetchMore(searchParams).$asPromise()
                .finally(function() {
                    $scope.$broadcast('scroll.infiniteScrollComplete');
                });
        }

        function done () {
            $state.go('onBoardingSuggestions');
        }

    }]);

'use strict';

angular
    .module('states.onBoarding')
    .controller('OnBoardingTopRestaurantsCtrl', ['me', '$q', 'Review', '$scope', '$state', 'RestaurantManager', 'LayoutManager', '$log', '$translate', function (
        me,
        $q,
        Review,
        $scope,
        $state,
        RestaurantManager,
        LayoutManager,
        $log,
        $translate
    ) {

        var ctrl = this;
        ctrl.me = me;
        ctrl.restaurants = [];
        ctrl.loading = true;
        ctrl.searchCriteria = {
            name: ''
        };
        ctrl.search = _.debounce(searchRestaurants, 300);
        ctrl.loadMore = loadMore;
        ctrl.done = done;
        ctrl.placeholder = $translate.instant('on_boarding.top_restaurants.input_placeholder')
            + ' ' + me.geoname.asciiName;

        initialize();


        function initialize () {
            searchRestaurants();
        }

        function searchRestaurants () {
            $log.debug('[CONTROLLER] Search restaurants', ctrl.searchCriteria.name);
            ctrl.loading = true;
            ctrl.restaurants.length = 0;
            if (ctrl.searchCriteria.name.trim() === '') {
                searchTopRestaurants();
            } else {
                searchRestaurantsByName();
            }
        }

        function searchTopRestaurants () {
            RestaurantManager.findTopRestaurants(me.geoname.id)
                .then(function (restaurants) {
                    ctrl.loading = false;
                    ctrl.restaurants = restaurants;
                });
        }

        function searchRestaurantsByName () {
            $log.debug('[CONTROLLER] Search by name');
            var restaurantSearch = RestaurantManager.findByName(ctrl.searchCriteria.name, me.geoname.id);
            restaurantSearch.then(function(restaurants) {
                ctrl.loading = false;
                ctrl.restaurants = restaurants;
            });
        }

        function loadMore () {
            return ctrl.restaurants.$fetchMore().$asPromise()
                       .finally(function() {
                            $scope.$broadcast('scroll.infiniteScrollComplete');
                       });
        }

        function done () {
            $state.go('onBoardingFriends');
        }
    }]);

'use strict';

angular
    .module('states.private', [
        'directives.map',
        'services.share',
        'services.security',
        'services.analytics',
        'services.notification',
        'states.map',
        'states.restaurant',
        'states.invite',
        'states.notification',
        'states.ranking',
        'states.settings',
        'states.onBoarding',
        'states.user',
        'states.wall'
    ])
    .config(['$stateProvider', 'SecurityProvider', function (
        $stateProvider,
        SecurityProvider
    ) {
        $stateProvider.state('private', {
            url : '/app',
            abstract: true,
            templateUrl: 'js/states/private/private.html',
            controller: ['$scope', '$state', '$log', 'NotificationBadge', 'me', 'PushMessageManager', 'ShareService', 'MyWishedHelper', 'MyReviewedHelper', 'MyLeadersHelper', 'OptionManager', 'LayoutManager', '$translate', 'GeoGuruModal', function(
                $scope,
                $state,
                $log,
                NotificationBadge,
                me,
                PushMessageManager,
                ShareService,
                MyWishedHelper,
                MyReviewedHelper,
                MyLeadersHelper,
                OptionManager,
                LayoutManager,
                $translate,
                GeoGuruModal
            ) {
                $scope.navBack = {
                    onClick : null
                };
                $scope.layoutManager = LayoutManager;
                $scope.notificationBadge = NotificationBadge;
                $scope.flagParametersBag = null;
                $scope.mapMode = false;
                $scope.changeGeoGuru = changeGeoGuru;
                $scope.share = share;
                $scope.done = done;
                $scope.edit = edit;
                $scope.map = map;
                $scope.centerOnMe = centerOnMe;
                $scope.mapIsLoading = false;

                initialize();

                function initialize() {
                    updateCacheHelper();
                    updatePushMessageCounter();
                    updateLanguageSettings();
                }

                function centerOnMe () {
                    $scope.$broadcast('navbar.centerOnMe');
                }

                function changeGeoGuru () {
                    $log.debug('[CONTROLLER_PRIVATE] Change Geo Guru');
                    GeoGuruModal.create()
                        .then(function(response){
                            $log.debug('[CONTROLLER_PRIVATE] Geo guru result', response);
                            $scope.flagParametersBag.updateWithGeoGuruResponse(response);
                            $scope.$broadcast('navbar.changeGeoGuru', response);
                        });
                }

                function map () {
                    $scope.mapMode = !$scope.mapMode;
                    $scope.$broadcast('navbar.mapMode', {
                        mapMode: $scope.mapMode
                    });
                }

                function done () {
                    $scope.$broadcast('navbar.done');
                }

                function edit () {
                    $scope.$broadcast('navbar.edit');
                }

                function share () {
                    ShareService.share();
                }

                function updateCacheHelper () {
                    MyWishedHelper.refresh();
                    MyReviewedHelper.refresh();
                    MyLeadersHelper.refresh();
                }

                function updatePushMessageCounter () {
                    PushMessageManager.getUnseenCounter(me.id).then(function(response){
                        NotificationBadge.counter = response.data.counter;
                    });
                }

                function updateLanguageSettings () {
                    var languagePromise = OptionManager.get('language');
                    languagePromise.then(function(language){
                        if (language) {
                            setLocale(language.id);
                        }

                        function setLocale(key){
                            $translate.use(key);
                        }
                    });
                }

            }],
            resolve :  {
                me: SecurityProvider.resolvers.me
            }
        });
    }]);

'use strict';

angular.module('states.public', [
    'services.security',
    'services.analytics',
    'states.signin',
    'states.signup',
    'states.landing',
    'states.map'
])

.config(['$stateProvider', 'SecurityProvider', function ($stateProvider, SecurityProvider) {

    $stateProvider.state('public', {
        abstract: true,
        templateUrl: 'js/states/public/public.html',
        resolve : {
            me : SecurityProvider.resolvers.rememberMe
        }
    });
}]);

'use strict';

angular
    .module('states.ranking', [
        'states.restaurant',
        'entities.user',
        'services.event'
    ])
    .config(['$stateProvider', function ($stateProvider) {



        $stateProvider.state('rankingReorder', {
            url: '/rankings/list/:cityId/cuisine/:cuisineId/edit',
            parent: 'private',
            templateUrl: 'js/states/ranking/ranking-reorder.html',
            controller: 'RankingReorderCtrl as ctrl',
            title: 'ranking.reorder.page_title',
            layout: {
                'main-menu-news': 'inherit',
                'main-menu-restaurants': 'inherit',
                'main-menu-add': 'inherit',
                'main-menu-gurus': 'inherit',
                'main-menu-profile': 'inherit',
                'navbar-back-button': true
            }
        });
    }]);

'use strict';

angular
    .module('states.ranking')
    .controller('RankingReorderCtrl', ['me', 'ReviewManager', 'Loader', '$timeout', 'RankingStateHelper', '$q', '$rootScope', '$scope', '$translate', 'Analytics', '$stateParams', 'CuisineManager', function (
        me,
        ReviewManager,
        Loader,
        $timeout,
        RankingStateHelper,
        $q,
        $rootScope,
        $scope,
        $translate,
        Analytics,
        $stateParams,
        CuisineManager
    ) {

        var ctrl = this;
        ctrl.pageLoading = true;

        initialize();

        function initialize () {
            loadCuisine();
        }

        function loadCuisine () {
            CuisineManager.findOneById($stateParams.cuisineId)
                .then(function (cuisine) {
                    ctrl.cuisine = cuisine;
                });
        }

        ctrl.rankingPromise = RankingStateHelper.loadRanking({
            user: me.id,
            geoname: $stateParams.cityId,
            orderBy: $stateParams.orderBy,
            cuisine: $stateParams.cuisineId,
            serializationGroups: $stateParams.serializationGroups
        });

        ctrl.rankingPromise.then(function (r) {
            ctrl.ranking = r;

            ctrl.view = {
                showItemReorder : true
            };

            ctrl.pageLoading = false;
        });


        ctrl.refreshRanking = function () {
            return RankingStateHelper.loadRanking({
                user: me.id,
                geoname: $stateParams.cityId,
                orderBy: $stateParams.orderBy,
                cuisine: $stateParams.cuisineId,
                serializationGroups: $stateParams.serializationGroups
            });
        };

        ctrl.loadMore = function () {
            return RankingStateHelper.loadMoreRanking({
                user: me.id,
                geoname: $stateParams.cityId,
                orderBy: $stateParams.orderBy,
                cuisine: $stateParams.cuisineId,
                serializationGroups: $stateParams.serializationGroups
            })
                .then(function () {
                    $rootScope.$broadcast('scroll.infiniteScrollComplete');
                });
        };

        ctrl.toggleReordering = function () {
            ctrl.view.showItemReorder = !ctrl.view.showItemReorder;
            $scope.layoutConfig.isHomeButtonVisible = !ctrl.view.showItemReorder;
            // when reordering the last added item has to be forgotten
            ctrl.idLastAdded = null;

        };

        ctrl.trackPromise = function (promise) {
            return Loader.track(promise);
        };

        ctrl.moveItem = function (item, from, to) {
            if (from === to) {
                return;
            }
            var promise = $q.when((function () {
                    return item;
            })()).then(function (item) {
                ctrl.ranking.splice(from, 1);
                ctrl.ranking.splice(to, 0, item);
                return ReviewManager.persistOrder(ctrl.ranking);
            });

            return ctrl.trackPromise(promise).then(function(){
                Analytics.trackEvent('ranking', 'reorder');
                $scope.$emit('ranking.reorder', ctrl.ranking);
            });
        };

        return ctrl;
    }]);


'use strict';

angular.module('states.restaurant', [
    'entities.restaurant',
    'entities.review',
    'services.event',
    'directives.tag',
    'entities.message',
    'services.storage',
    'services.utility'
    ])
    .config(['$stateProvider', function ($stateProvider) {

        $stateProvider.state('restaurantView', {
            url: '/restaurant/view/:restaurantId',
            parent: 'private',
            templateUrl: 'js/states/restaurant/restaurant-view.html',
            controller :'RestaurantViewCtrl as ctrl',
            layout: {
                'navbar-share-button': true,
                'navbar-back-button': true,
                'main-menu-news': 'inherit',
                'main-menu-restaurants': 'inherit',
                'main-menu-add': 'inherit',
                'main-menu-gurus': 'inherit',
                'main-menu-profile': 'inherit'
            }
        });

        $stateProvider.state('restaurantCreate', {
            url: '/restaurant/create?placeId&name',
            parent: 'private',
            templateUrl: 'js/states/restaurant/restaurant-create.html',
            controller :'RestaurantCreateCtrl as ctrl',
            title: 'restaurant.create.page_title',
            layout: {
                'navbar-back-button': true,
                'main-menu-add': true,
                'navbar-done-button': true
            }
        });

        $stateProvider.state('restaurantSearch', {
            url: '/restaurant/search',
            parent: 'private',
            templateUrl: 'js/states/restaurant/restaurant-search.html',
            controller :'RestaurantSearchCtrl as ctrl',
            title: 'restaurant.add_restaurant',
            layout: {
                'main-menu-add': true
            }
        });

        $stateProvider.state('restaurantSearchWeb', {
            url: '/restaurant/search-web?name',
            parent: 'private',
            templateUrl: 'js/states/restaurant/restaurant-search-web.html',
            controller :'RestaurantSearchWebCtrl as ctrl',
            title: 'restaurant.search_on_web.page_title',
            layout: {
                'main-menu-add': true,
                'navbar-back-button': true
            }
        });

        $stateProvider.state('restaurantError', {
            url: '/restaurant/reportError/:restaurantId',
            parent: 'private',
            templateUrl: 'js/states/restaurant/restaurant-error.html',
            controller :'NoticeErrorCtrl as ctrl',
            title: 'restaurant.report_an_error',
            layout: {
                'main-menu-news': 'inherit',
                'main-menu-restaurants': 'inherit',
                'main-menu-add': 'inherit',
                'main-menu-gurus': 'inherit',
                'main-menu-profile': 'inherit',
                'navbar-back-button': true
            }
        });

        $stateProvider.state('restaurantEdit', {
            url: '/restaurant/edit/:restaurantId',
            parent: 'private',
            templateUrl: 'js/states/restaurant/restaurant-edit.html',
            controller :'RestaurantEditCtrl as ctrl',
            title: 'restaurant.edit_restaurant',
            layout: {
                'navbar-back-button': true,
                'main-menu-news': 'inherit',
                'main-menu-restaurants': 'inherit',
                'main-menu-add': 'inherit',
                'main-menu-gurus': 'inherit',
                'main-menu-profile': 'inherit'
            }
        });

        $stateProvider.state('restaurantReviews', {
            url: '/restaurant/reviews/:restaurantId',
            parent: 'private',
            templateUrl: 'js/states/restaurant/reviews.html',
            controller :'ReviewsCtrl as ctrl',
            title: 'restaurant.gurus_review.page_title',
            layout: {
                'navbar-back-button': true,
                'main-menu-news': 'inherit',
                'main-menu-restaurants': 'inherit',
                'main-menu-add': 'inherit',
                'main-menu-gurus': 'inherit',
                'main-menu-profile': 'inherit'
            }
        });

    }]);


'use strict';

angular
    .module('states.restaurant')
    .controller('RestaurantCreateCtrl', ['$scope', 'CuisineManager', 'RestaurantManager', 'Loader', 'Analytics', 'EventDispatcher', '$state', '$stateParams', 'DuplicatedRestaurantPopup', 'SimpleLocalStorage', '$log', '$q', function (
        $scope,
        CuisineManager,
        RestaurantManager,
        Loader,
        Analytics,
        EventDispatcher,
        $state,
        $stateParams,
        DuplicatedRestaurantPopup,
        SimpleLocalStorage,
        $log,
        $q
    ) {
        var ctrl = this;
        ctrl.cuisines = [];
        ctrl.form = {};
        ctrl.save = save;
        ctrl.loading = true;

        initialize();

        function initialize () {
            $log.debug('[CONTROLLER] Initialize');
            CuisineManager.findAll().then(function (cuisines) {
                ctrl.cuisines = cuisines;
            });
            if ($stateParams.placeId) {
                importRestaurantFromGooglePlace();
            } else {
                createNewRestaurant();
            }
            $scope.$on('navbar.done', onNavbarDone);
        }

        function onNavbarDone () {
            ctrl.form.execIfValid(ctrl.save);
        }

        function createNewRestaurant () {
            $log.debug('[CONTROLLER] Create New restaurant');
            ctrl.restaurant = RestaurantManager.buildRestmodResource();
            ctrl.restaurant.geoname = SimpleLocalStorage.getObject('restoSearchGeoname');
            if ($stateParams.name) {
                ctrl.restaurant.name = $stateParams.name;
            }

            ctrl.loading = false;
        }

        function importRestaurantFromGooglePlace () {
            $log.debug('[CONTROLLER] Import from google place');
            RestaurantManager.buildFromPlaceId($stateParams.placeId)
                .then(function (restaurant) {
                    $log.debug('[CONTROLLER] Restaurant imported');
                    ctrl.restaurant = restaurant;
                    ctrl.restaurant.geoname = SimpleLocalStorage.getObject('restoSearchGeoname');
                    ctrl.loading = false;
                });
        }

        function checkDuplicated () {
            $log.debug('[CONTROLLER] Check duplicated');
            var deferred = $q.defer();
            $log.debug('[CONTROLLER] Name not encoded ' + ctrl.restaurant.name);
            $log.debug('[CONTROLLER] Name encoded ' + encodeURIComponent(ctrl.restaurant.name) );
            var params = {
                lat: ctrl.restaurant.lat,
                lng: ctrl.restaurant.lng,
                name: ctrl.restaurant.name,
                orderBy: 'distance',
                maxDistance: 0
            };
            params.name.replace('\'', '%27');
            RestaurantManager.findAll(params)
                .then(function(restaurants){
                    if (restaurants.length === 0) {
                        deferred.resolve();
                    } else {
                        popup(restaurants);
                        deferred.reject();
                    }
                });

            return deferred.promise;
        }

        function popup(restaurants) {
            DuplicatedRestaurantPopup.create(restaurants)
                .then(function (response) {
                    if (response === 'continue') {
                        persist();
                    }
                });
        }

        function save() {
            $log.debug('[CONTROLLER] Save');
            checkDuplicated()
                .then(persist);
        }

        function persist() {
            EventDispatcher.broadcast(EventDispatcher.event.RESTAURANT_CREATE);
            var promise = RestaurantManager.save(ctrl.restaurant);
            Loader.track(promise).then(onSaveSuccess);
        }

        function onSaveSuccess (restaurant) {
            $log.debug('[CONTROLLER] On Save success');
            Analytics.trackEvent('restaurant', 'create');
            return $state.go('restaurantView', {
                    restaurantId : restaurant.id
                });
        }

    }]);


'use strict';

angular
    .module('states.restaurant')

    .controller('RestaurantEditCtrl', ['Loader', 'Analytics', 'EventDispatcher', 'CuisineManager', 'RestaurantManager', '$stateParams', 'FlashMessageManager', function (
        Loader,
        Analytics,
        EventDispatcher,
        CuisineManager,
        RestaurantManager,
        $stateParams,
        FlashMessageManager
    ) {
        var ctrl = this;

        ctrl.cuisines = [];
        ctrl.form = {};

        initialize();

        function initialize () {
            loadCuisines();
            loadRestaurant();
        }

        function loadCuisines () {
            CuisineManager.findAll()
                .then(function (cuisines) {
                    ctrl.cuisines = cuisines;
                });
        }

        function loadRestaurant () {
            RestaurantManager.findOneById($stateParams.restaurantId)
                .then(function (r) {
                    ctrl.restaurant = r;
                });
        }

        ctrl.save = function () {
            EventDispatcher.broadcast(EventDispatcher.event.RESTAURANT_CREATE);
            var promise = ctrl.restaurant.$save().$asPromise();
            Loader.track(promise);
            promise.then(function(){
                FlashMessageManager.push('flash_message.restaurant_updated', 'success');
            });
        };

    }]);


'use strict';

angular.module('states.restaurant')

    .controller('NoticeErrorCtrl', ['$scope', '$state', 'MessageHelper', 'restaurant', 'Loader', function (
        $scope,
        $state,
        MessageHelper,
        restaurant,
        Loader
    ) {
        var self = this;

        $scope.error = {};

        $scope.sendError = function () {
            return Loader
                .track(MessageHelper.sendRestaurantError(restaurant.id, $scope.error.content))
                .then(function (response) {

                    $state.go('restaurantView', {
                        restaurantId : restaurant.id
                    });
                    return response;
                });

        };
    }]);

'use strict';


angular
    .module('states.restaurant')
    .controller('RestaurantSearchCtrl', ['$scope', '$ionicModal', '$state', 'RestaurantManager', 'GeonameManager', 'SimpleLocalStorage', '$translate', 'GeonameModal', 'UserGeolocation', '$log', 'Analytics', '$ionicScrollDelegate', 'MapDistance', function (
        $scope,
        $ionicModal,
        $state,
        RestaurantManager,
        GeonameManager,
        SimpleLocalStorage,
        $translate,
        GeonameModal,
        UserGeolocation,
        $log,
        Analytics,
        $ionicScrollDelegate,
        MapDistance
    ) {

        var ctrl = this;
        ctrl.restaurants = [];
        ctrl.isAroundMe = false;
        ctrl.loading = true;
        ctrl.loadingCoordinates = true;
        ctrl.searchCriteria  = {
            name: ''
        };
        ctrl.noResult = noResult;
        ctrl.noMoreResult = noMoreResult;
        ctrl.changeGeoname = changeGeoname;
        ctrl.loadMore = loadMore;
        ctrl.viewRestaurant = viewRestaurant;
        ctrl.addNew = addNew;
        ctrl.cancel = cancel;
        ctrl.activateAroundMe = activateAroundMe;
        ctrl.disableAroundMe = disableAroundMe;
        ctrl.getDistance = getDistance;
        ctrl.search = _.debounce(searchRestaurants, 300);
        ctrl.userLocation = {
            lat: 0,
            lng: 0
        };

        initialize();

        function initialize () {
            $log.debug('[CONTROLLER] Initialize');
            ctrl.geoname = SimpleLocalStorage.getObject('restoSearchGeoname');
            $scope.$on('$ionicView.afterLeave', onLeave);
            $scope.$on('$ionicView.enter', onEnter);
            UserGeolocation.getCurrentPosition().then(function(location){
                ctrl.userLocation = location;
                ctrl.loadingCoordinates = false;
                if (ctrl.isAroundMe) {
                    searchRestaurants();
                }
            });
        }

        function onEnter () {
            ctrl.search();
        }

        function onLeave () {
            ctrl.searchCriteria.name = '';
            ctrl.restaurants = [];
        }

        function searchRestaurants() {
            $log.debug('[CONTROLLER] Search restaurants', ctrl.searchCriteria.name);
            ctrl.loading = true;
            ctrl.restaurants.length = 0;
            if (ctrl.isAroundMe) {
                if (ctrl.loadingCoordinates) {
                    return;
                }
                searchRestaurantsAroundMe();
            } else if (ctrl.searchCriteria.name.trim() === '') {
                searchTopRestaurants();
            } else {
                searchRestaurantsByName();
            }
        }

        function searchRestaurantsAroundMe() {
            RestaurantManager.findNearLocation(ctrl.userLocation.lat, ctrl.userLocation.lng, ctrl.searchCriteria.name)
                .then(function (restaurants) {
                    ctrl.restaurants = restaurants;
                    ctrl.loading = false;
                });
        }

        function searchTopRestaurants () {
            $log.debug('[CONTROLLER] Search top restaurants');
            RestaurantManager.findTopRestaurants(ctrl.geoname.id)
                .then(function(restaurants){
                    ctrl.loading = false;
                    ctrl.restaurants = restaurants;
                });
        }

        function searchRestaurantsByName () {
            $log.debug('[CONTROLLER] Search by name');
            var restaurantSearch = RestaurantManager.findByName(ctrl.searchCriteria.name, ctrl.geoname.id);
            restaurantSearch.then(function(restaurants) {
                ctrl.loading = false;
                ctrl.restaurants = restaurants;
            });
        }

        function noMoreResult () {
            $log.debug('[CONTROLLER] No more result', ctrl.restaurant.$metadata.hasNextPage === false);
            if (ctrl.loading) {
                return false;
            }

            return ctrl.restaurant.$metadata.hasNextPage === false;
        }

        function noResult () {
            return ctrl.restaurants.length === 0 &&
                ctrl.searchCriteria.name !== '' &&
                ctrl.loading === false;
        }

        function cancel () {
            ctrl.searchCriteria.name = '';
        }

        function loadMore () {
            $log.debug('[CONTROLLER] Load more');
            return ctrl.restaurants.$fetchMore().$asPromise()
                .finally(function () {
                    $scope.$broadcast('scroll.infiniteScrollComplete');
                });
        }

        function viewRestaurant (restaurant) {
            $state.go('restaurantView', {restaurantId: restaurant.id});
        }

        function addNew (place) {
            var params = {};

            if (place && place.id) {
                params.placeId = place.id;
            } else {
                params.name = ctrl.searchCriteria.name;
            }

            return $state.go('restaurantCreate', params);
        }

        function changeGeoname() {
            GeonameModal.create()
                .then(function(geoname) {
                    ctrl.geoname = {};
                    angular.copy(geoname, ctrl.geoname);
                    SimpleLocalStorage.setObject('restoSearchGeoname', geoname);
                    ctrl.cancel();
                    ctrl.search();
                    Analytics.trackEvent('restaurant', 'change_geoname_on_search');
                    return geoname;
                });
            }

        function activateAroundMe () {
            Analytics.trackView('restaurantSearchAroundMe');
            ctrl.isAroundMe = true;
            $ionicScrollDelegate.scrollTop();
            searchRestaurants();
        }

        function disableAroundMe () {
            ctrl.isAroundMe = false;
            $ionicScrollDelegate.scrollTop();
            searchRestaurants();
        }

        function getDistance (restaurant) {
            if (!ctrl.isAroundMe) {
                return false;
            }

            return MapDistance.getFormattedDistance(restaurant, ctrl.userLocation);
        }

    }]);

'use strict';


angular
    .module('states.restaurant')
    .controller('RestaurantSearchWebCtrl', ['$scope', '$ionicModal', '$state', 'RestaurantManager', 'PlaceManager', 'GeonameManager', 'SimpleLocalStorage', '$translate', 'GeonameModal', 'UserGeolocation', '$log', 'Analytics', '$ionicScrollDelegate', 'MapDistance', '$stateParams', function (
        $scope,
        $ionicModal,
        $state,
        RestaurantManager,
        PlaceManager,
        GeonameManager,
        SimpleLocalStorage,
        $translate,
        GeonameModal,
        UserGeolocation,
        $log,
        Analytics,
        $ionicScrollDelegate,
        MapDistance,
        $stateParams
    ) {

        var ctrl = this;
        ctrl.places = [];

        ctrl.loading = true;
        ctrl.searchCriteria  = {
            name: ''
        };
        ctrl.noResult = noResult;
        ctrl.changeGeoname = changeGeoname;
        ctrl.viewRestaurant = viewRestaurant;
        ctrl.addNew = addNew;
        ctrl.search = _.debounce(searchRestaurants, 300);

        initialize();

        function initialize () {
            $log.debug('[CONTROLLER] Initialize');
            ctrl.searchCriteria.name = $stateParams.name;
            ctrl.geoname = SimpleLocalStorage.getObject('restoSearchGeoname');
            $scope.$on('$ionicView.afterLeave', onLeave);
            $scope.$on('$ionicView.enter', onEnter);
        }

        function onEnter () {
            ctrl.search();
        }

        function onLeave () {
            ctrl.searchCriteria.name = '';
            ctrl.places = [];
        }

        function searchRestaurants() {
            $log.debug('[CONTROLLER] Search restaurants', ctrl.searchCriteria.name);
            ctrl.loading = true;
            ctrl.places.length = 0;
            $log.debug('[CONTROLLER] Search by name');
            var placesSearch = PlaceManager.findAll(ctrl.geoname.lat, ctrl.geoname.lng, ctrl.searchCriteria.name);
            placesSearch.then(function(places){
                $log.debug('[CONTROLLER] Place results', places);
                ctrl.places = PlaceManager.removeDuplicates(places);
                $log.debug('[CONTROLLER] Filtered places', ctrl.places);
                ctrl.loading = false;
            });

        }

        function noResult () {
            return ctrl.places.length === 0 &&
                ctrl.loading === false;
        }

        function viewRestaurant (restaurant) {
            $state.go('restaurantView', {restaurantId: restaurant.id});
        }

        function addNew (place) {
            var params = {};

            if (place && place.id) {
                params.placeId = place.id;
            } else {
                params.name = ctrl.searchCriteria.name;
            }

            return $state.go('restaurantCreate', params);
        }

        function changeGeoname() {
            GeonameModal.create()
                .then(function(geoname) {
                    ctrl.geoname = {};
                    angular.copy(geoname, ctrl.geoname);
                    SimpleLocalStorage.setObject('restoSearchGeoname', geoname);
                    ctrl.searchCriteria.name = '';
                    ctrl.search();
                    Analytics.trackEvent('restaurant', 'change_geoname_on_search');
                    return geoname;
                });
        }

    }]);

'use strict';

angular
    .module('states.restaurant')
    .controller('RestaurantViewCtrl', ['$scope', '$stateParams', 'me', 'Analytics', '$cordovaSocialSharing', '$state', '$ionicModal', 'MyWishedHelper', 'EventDispatcher', 'ShareService', 'ReviewManager', '$translate', 'ReviewExtraFields', 'MyReviewedHelper', 'RestaurantManager', 'FlashMessageManager', 'MultipleUsersModal', 'ReviewExtraFieldsModal', 'PriceManager', 'CuisineModal', '$rootScope', '$log', 'LayoutManager', 'TagModal', 'TagManager', 'InputTextModal', 'InputDateModal', 'TextareaModal', function (
        $scope,
        $stateParams,
        me,
        Analytics,
        $cordovaSocialSharing,
        $state,
        $ionicModal,
        MyWishedHelper,
        EventDispatcher,
        ShareService,
        ReviewManager,
        $translate,
        ReviewExtraFields,
        MyReviewedHelper,
        RestaurantManager,
        FlashMessageManager,
        MultipleUsersModal,
        ReviewExtraFieldsModal,
        PriceManager,
        CuisineModal,
        $rootScope,
        $log,
        LayoutManager,
        TagModal,
        TagManager,
        InputTextModal,
        InputDateModal,
        TextareaModal
    ) {
        var ctrl = this;
        var
            removeRankingReorderListener,
            removeWishDeleteListener,
            removeReviewDeleteListener,
            removeWishCreateListener,
            removeStateChangeSuccessListener,
            removeReviewCreateListener;
        ctrl.getRangeLabel = getRangeLabel;
        ctrl.getReviewCost = getReviewCost;
        ctrl.getAddressWithCity = getAddressWithCity;
        ctrl.editPrice = editPrice;
        ctrl.saveMyReview = _.debounce(saveMyReview, 300);
        ctrl.goToRanking = goToRanking;
        ctrl.goToReviews = goToReviews;
        ctrl.goToGoogleMaps = goToGoogleMaps;
        ctrl.goToWebsite = goToWebsite;
        ctrl.onPhotoUpload = onPhotoUpload;
        ctrl.onPhotoDelete = onPhotoDelete;
        ctrl.changeCuisine = changeCuisine;
        ctrl.addReviewExtraFields = addReviewExtraFields;
        ctrl.editInputText = editInputText;
        ctrl.tagFriends = tagFriends;
        ctrl.editInputTextByKey = editInputTextByKey;
        ctrl.editTextareaByKey = editTextareaByKey;
        ctrl.incrementVisitCount = incrementVisitCount;
        ctrl.decrementVisitCount = decrementVisitCount;
        ctrl.editLastVisited = editLastVisited;
        ctrl.getField = getField;
        ctrl.trans = $translate;

        initialize();

        function initialize () {
            $log.debug('[CONTROLLER] Initialize');
            ctrl.myLeadersReviews = [];
            ctrl.costRange = '';
            ctrl.myLeadersReviewsPromise = getMyLeadersReviews();
            ctrl.reviewedByMe = isReviewedByMe();
            ctrl.wishedByMe = isWishedByMe();
            ctrl.restaurantPromise = getRestaurant();
            ctrl.myReviewsPromise = getMyReviews();

            removeRankingReorderListener = $rootScope.$on('ranking.reorder', onRankingReorder);
            removeReviewCreateListener = $scope.$on('review.create', onReviewCreate);
            removeReviewDeleteListener = $scope.$on('review.delete', onReviewDelete);
            removeWishCreateListener = $scope.$on('wish.create', onReviewDelete);
            removeWishDeleteListener = $scope.$on('wish.delete', onReviewDelete);
            removeStateChangeSuccessListener = $scope.$on('$stateChangeSuccess', onStateChangeSuccess);

            $scope.$on("$destroy", onDestroy);
            $scope.$on('$ionicView.beforeEnter', onBeforeEnter);

            ctrl.restaurantPromise.then(function (restaurant) {
                ctrl.restaurant = restaurant;
                LayoutManager.setTitle(ctrl.restaurant.name);
                configShare();
            });
            ctrl.myLeadersReviewsPromise.then(function (reviews) {
                ctrl.myLeadersReviews = reviews;
            });
            ctrl.myReviewsPromise.then(function (reviews) {
                ctrl.myReview = reviews[0];
                updateReviewTagFields();
            });
        }

        function onBeforeEnter() {
            if (ctrl.restaurant) {
                LayoutManager.setTitle(ctrl.restaurant.name);
            }
        }

        function onStateChangeSuccess (event, toState) {
            if ((toState.name === 'restaurantView') && ctrl.user) {
                LayoutManager.setTitle(ctrl.restaurant.name);
            }
        }

        function onDestroy () {
            $log.debug('[CONTROLLER] On $destroy');
            if (removeRankingReorderListener) {
                removeRankingReorderListener();
            }
            if (removeReviewCreateListener) {
                removeReviewCreateListener();
            }
            if (removeReviewDeleteListener) {
                removeReviewDeleteListener();
            }
            if (removeWishCreateListener) {
                removeWishCreateListener();
            }
            if (removeWishDeleteListener) {
                removeWishDeleteListener();
            }
            if (removeStateChangeSuccessListener) {
                removeStateChangeSuccessListener();
            }
        }

        function onReviewCreate (event, review) {
            $log.debug('[CONTROLLER] On Review Create', review);
            review.photos = [];
            ctrl.myReview = review;
        }

        function onReviewDelete (event) {
            ctrl.myReview = null;
        }

        function onRankingReorder (event, ranking) {
            $log.debug('[CONTROLLER] On Ranking Reorder', ranking);
            ReviewManager.updatePositionWithRanking(ctrl.myReview, ranking);
        }

        function getRestaurant () {
            return RestaurantManager.findOneById($stateParams.restaurantId)
        }

        function isReviewedByMe () {
            return MyReviewedHelper.get($stateParams.restaurantId);
        }

        function isWishedByMe () {
            return MyWishedHelper.get($stateParams.restaurantId);
        }

        function getMyLeadersReviews () {
            return ReviewManager.findAll({
                leadersOf: me.id,
                restaurant: $stateParams.restaurantId,
                serializationGroups: 'reviewOwner'
            });
        }

        function getMyReviews () {
            return ReviewManager.findAll({
                user: me.id,
                restaurant: $stateParams.restaurantId
            });
        }

        function getRangeLabel () {
            return PriceManager.getRangeLabel(ctrl.restaurant);
        }

        function getReviewCost () {
            return PriceManager.convertAndRound(ctrl.myReview.cost, ctrl.restaurant.geoname);
        }

        function configShare () {
            var message = 'Hey there! The restaurantâ€™s details are: ' +
                ctrl.restaurant.name + ', ' +
                ctrl.restaurant.address + ', ' +
                ctrl.restaurant.geoname.asciiName;

            if (ctrl.restaurant.website) {
                message += ', ' + ctrl.restaurant.website;
            }

            if (ctrl.restaurant.phone) {
                message += ', ' + ctrl.restaurant.phone+ '. ';
            } else {
                message += '. ';
            }

            message += 'Donâ€™t forget to follow me on Tastd!';

            ShareService.config({
                title: 'Check out Tastd',
                message: message,
                link: 'https://tastdapp.com'
            });
        }

        function changeCuisine () {
            CuisineModal.create()
                .then(function(cuisine){
                    ReviewManager.changeCuisine(ctrl.myReview, cuisine)
                        .then(function(newReview){
                            Analytics.trackEvent('review', 'change_cuisine');
                            $scope.$emit('review.cuisineChange');
                            FlashMessageManager.push('flash_message.review.cuisine_updated', 'success');
                            ctrl.myReview = newReview;
                        });
                });
        }

        function getAddressWithCity () {
            // 24, test street
            // 24, test street, New York
            // New York
            // No address
            if(!ctrl.restaurant){
                return null;
            }
            if(ctrl.restaurant.address && ctrl.restaurant.geoname.asciiName){
                return ctrl.restaurant.address + ', ' + ctrl.restaurant.geoname.asciiName;
            }
            return ctrl.restaurant.address || ctrl.restaurant.geoname.asciiName;
        }

        function editPrice () {
            $ionicModal.fromTemplateUrl('js/states/restaurant/review-edit/edit-price.html', {
                scope : angular.extend($scope.$new(), {
                    review : ctrl.myReview,
                    translateSliderValue: function (value) {
                        return PriceManager.getSliderLabel(value, ctrl.myReview.geoname);
                    }
                }),
                animation : 'slide-in-up'
            })
                .then(function (m) {
                    var modalScope = m.scope;
                    modalScope.done = function () {
                        m.remove();
                        Analytics.trackEvent('review', 'change_price');
                        FlashMessageManager.push('flash_message.review.price_updated', 'success');
                        ctrl.saveMyReview();
                    };
                    modalScope.cancel = function () {
                        m.remove();
                    };
                    m.show();
                });
        }

        function saveMyReview () {
            $log.debug('[CONTROLLER] Save my review');
            ctrl.myReview.$save();
        }

        function goToRanking () {
            $state.go('rankingReorder', {
                userId : me.id,
                cityId : ctrl.restaurant.geoname.id,
                cuisineId : ctrl.myReview.cuisine.id
            });
        }

        function goToReviews () {
            $state.go('restaurantReviews', {restaurantId : ctrl.restaurant.id});
        }

        function goToGoogleMaps () {
            window.open('http://www.google.com/maps/place/'+
                ctrl.restaurant.lat + ',' +
                ctrl.restaurant.lng, '_system');
        }

        function goToWebsite () {
            window.open(ctrl.restaurant.website, '_system');
        }

        function onPhotoUpload () {
            Analytics.trackEvent('review', 'photo_upload');
            FlashMessageManager.push('flash_message.review.photo_uploaded', 'success');
        }

        function onPhotoDelete (deletedPhotos) {
            Analytics.trackEvent('review', 'photo_delete');
            FlashMessageManager.push('flash_message.review.photo_deleted', 'success');
        }

        function tagFriends () {
            MultipleUsersModal.create(me.id, ctrl.myReview.taggedFriends)
                .then(function(taggedFriends){
                    ctrl.myReview.taggedFriends = taggedFriends;
                    ctrl.saveMyReview();
                    FlashMessageManager.push('flash_message.review.tag_friends', 'success');
                });
        }

        function addReviewExtraFields () {
            $log.debug('[CONTROLLER] Add review extra field');
            ReviewExtraFieldsModal.create(ctrl.myReview)
                .then(function(action){
                    $log.debug('[CONTROLLER] Resolve add review extra field with action', action);
                    if (action.name === 'ADD') {
                        editExtraField(action.field);
                    } else if (action.name === 'REMOVE') {
                        deleteExtraField(action.field);

                        ctrl.saveMyReview();
                        FlashMessageManager.push('flash_message.review.extra_field_removed', 'success');
                    }
                });
        }

        function editExtraField (field) {
            if (field.modal === 'TEXTAREA') {
                editTextarea(field);
            } else if (field.modal === 'INPUT_TEXT') {
                editInputText(field);
            } else if (field.modal === 'TAGS') {
                editExtraTags(field);
            }
        }

        function editExtraTags (field) {
            $log.debug('[REVIEW_TAGS_PROPERTY_DIRECTIVE] Edit');
            TagModal.create(field.groupId, ctrl.myReview, field.canCreateNewTags)
                .then(function(tags){
                    ReviewManager.replaceTagsWithGroupId(ctrl.myReview, tags, field.groupId);
                    ReviewManager.updateReviewTagFields(ctrl.myReview);
                    ctrl.myReview.$save();
                });
        }

        function deleteExtraField (field) {
            if (field.modal === 'TEXTAREA' || field.modal === 'INPUT_TEXT') {
                ctrl.myReview[field.propertyName] = '';
            } else if (field.modal === 'TAGS') {
                ctrl.myReview = ReviewManager.replaceTagsWithGroupId(ctrl.myReview, [], field.groupId);
                ctrl.myReview = ReviewManager.updateReviewTagFields(ctrl.myReview);
            }
        }

        function editTextarea (field) {
            $log.debug('[CONTROLLER] Edit textarea');
            var fieldName = field.propertyName;
            var title = field.title;
            TextareaModal.create(ctrl.myReview[fieldName], title)
                .then(function(response){
                    $log.debug('[CONTROLLER] Set my review.' + fieldName + ' with value ' + response);
                    ctrl.myReview[fieldName] = response;
                    ctrl.saveMyReview();
                });
        }

        function updateReviewTagFields () {
            ctrl.myReview.bestFor = getTagsWithGroupId(TagManager.BEST_FOR);
            ctrl.myReview.drinks = getTagsWithGroupId(TagManager.DRINKS);
            ctrl.myReview.location = getTagsWithGroupId(TagManager.LOCATION);
            ctrl.myReview.vibe = getTagsWithGroupId(TagManager.VIBE);
            ctrl.myReview.entertainment = getTagsWithGroupId(TagManager.ENTERTAINMENT);
            ctrl.myReview.specialMention = getTagsWithGroupId(TagManager.SPECIAL_MENTION);
            ctrl.myReview.otherTags = getTagsWithGroupId(TagManager.OTHER);
        }

        function getTagsWithGroupId (id) {
            return _.filter(ctrl.myReview.tags, function(t){
                return t.groupId === id;
            });
        }

        function editInputText (field) {
            $log.debug('[CONTROLLER] Edit input text');
            var fieldName = field.propertyName;
            var title = field.title;
            InputTextModal.create(ctrl.myReview[fieldName], title)
                .then(function(response){
                    $log.debug('[CONTROLLER] Set my review.' + fieldName + ' with value ' + response);
                    ctrl.myReview[fieldName] = response;
                    ctrl.saveMyReview();
                });
        }

        function editLastVisited () {
            $log.debug('[CONTROLLER] Edit last visited');
            InputDateModal.create(new Date(ctrl.myReview.lastVisited))
                .then(function(result){
                    $log.debug('[CONTROLLER] Last visited result', result);
                    ctrl.myReview.lastVisited = moment(result).format('YYYY-MM-DD');
                    saveMyReview();
                });
        }

        function editInputTextByKey (key) {
            $log.debug('[CONTROLLER] Edit input text by key');
            var field = ReviewExtraFields.getByKey(key);
            editInputText(field);
        }

        function editTextareaByKey (key) {
            $log.debug('[CONTROLLER] Edit textarea by key');
            var field = ReviewExtraFields.getByKey(key);
            editTextarea(field);
        }

        function getField (key) {
            return ReviewExtraFields.getByKey(key);
        }

        function decrementVisitCount () {
            $log.debug('[CONTROLLER] Decrement visit count');
            ctrl.myReview.visitCount = ctrl.myReview.visitCount > 1 ? ctrl.myReview.visitCount - 1 : 0;
            ctrl.saveMyReview();
        }

        function incrementVisitCount () {
            $log.debug('[CONTROLLER] Increment visit count');
            ctrl.myReview.visitCount ++;
            ctrl.saveMyReview();
        }

    }]);

'use strict';

angular
    .module('states.restaurant')
    .controller('ReviewsCtrl', ['ReviewManager', 'me', '$scope', '$state', '$stateParams', function (
        ReviewManager,
        me,
        $scope,
        $state,
        $stateParams
    ) {
        var ctrl = this;
        ctrl.$state = $state;
        ctrl.loading = true;
        ctrl.myFollowingReviews = [];
        ctrl.loadMore = loadMore;
        initialize();

        function initialize () {
            ReviewManager.findAll({
                leadersOf:me.id,
                restaurant: $stateParams.restaurantId,
                serializationGroups: 'reviewOwner'
            }).then(function(reviews){
                ctrl.restaurant = reviews[0].restaurant;
                ctrl.myFollowingReviews = reviews;
                ctrl.loading = false;
            });
        }

        function loadMore () {
            ctrl.myFollowingReviews.$fetchMore().$then(function () {
                $scope.$broadcast('scroll.infiniteScrollComplete');
            });
        }

    }]);

'use strict';

angular
    .module('states.settings', [
        'entities.message',
        'services.security',
        'entities.user'
    ])

    .config(['$stateProvider', function ($stateProvider) {

        $stateProvider.state('settings', {
            url : '/settings',
            parent : 'private',
            templateUrl : 'js/states/settings/settings.html',
            layout: {
                'main-menu-profile': true,
                'navbar-back-button': true
            },
            controller : 'SettingsCtrl as ctrl',
            title: 'settings.page_title'
        });

        $stateProvider.state('settings.account', {
            url : '/settings/account',
            parent : 'private',
            templateUrl : 'js/states/settings/account.html',
            controller : 'AccountCtrl as ctrl',
            title: 'settings.edit_account.page_title',
            layout: {
                'navbar-back-button': true,
                'navbar-done-button': true,
                'main-menu-profile': true
            }
        });

        $stateProvider.state('settings.notifications', {
            url : '/settings/notifications',
            parent : 'private',
            templateUrl : 'js/states/settings/notifications.html',
            controller : 'NotificationsCtrl as ctrl',
            title: 'settings.notification.page_title',
            layout: {
                'navbar-back-button': true,
                'main-menu-profile': true
            },
            resolve : {
                notifications : ['OptionManager', function (OptionManager) {
                    return OptionManager.get('notifications');
                }]
            }
        });

        $stateProvider.state('settings.language', {
            url : '/settings/language',
            parent : 'private',
            templateUrl : 'js/states/settings/language.html',
            controller : 'LanguageCtrl as ctrl',
            layout: {
                'navbar-back-button': true,
                'main-menu-profile': true
            },
            title: 'settings.language.page_title',
            resolve : {
                language : ['OptionManager', function (OptionManager) {
                    return OptionManager.get('language');
                }]
            }
        });

        $stateProvider.state('settings.password', {
            url : '/settings/password',
            parent : 'private',
            layout: {
                'navbar-back-button': true,
                'main-menu-profile': true,
                'navbar-done-button': true
            },
            templateUrl : 'js/states/settings/password.html',
            controller : 'PasswordCtrl as ctrl',
            title: 'settings.password.page_title'
        });

        $stateProvider.state('settings.feedback', {
            url : '/settings/feedback',
            parent : 'private',
            templateUrl : 'js/states/settings/feedback.html',
            layout: {
                'navbar-back-button': true,
                'main-menu-profile': true
            },
            controller : 'FeedbackCtrl',
            title: 'settings.feedback.page_title'
        });

        $stateProvider.state('settings.log', {
            url : '/settings/log',
            parent : 'private',
            templateUrl : 'js/states/settings/log.html',
            layout: {
                'navbar-back-button': true,
                'main-menu-profile': true
            },
            controller : 'LogCtrl as ctrl',
            title: 'Log'
        });


    }]);

'use strict';

angular
    .module('states.settings')
    .controller('AccountCtrl', ['ConfirmPopup', 'Loader', '$state', '$scope', 'me', 'ValidatorManager', 'FlashMessageManager', function (
        ConfirmPopup,
        Loader,
        $state,
        $scope,
        me,
        ValidatorManager,
        FlashMessageManager
    ) {

        var ctrl = this;
        ctrl.user = me;
        ctrl.form = {};
        ctrl.save = save;
        ctrl.delete = deleteAccount;
        $scope.$on('navbar.done', function(){
            ctrl.save();
        });

        function deleteAccount () {
            ConfirmPopup.create('popup.delete_account.title','popup.delete_account.text')
                .then(function (res) {
                    if (res) {
                        return Loader.track(
                            ctrl.user.$destroy()
                                .then(function () {
                                    $state.go('signin');
                                    Loader.$loading.hide();
                                }));
                    }
                });
        }

        function save () {
            ValidatorManager.validate(ctrl.form, $scope)
                .then(function(){
                    Loader.track(
                        ctrl.user.$save().$asPromise()
                            .then(function () {
                                FlashMessageManager.push('flash_message.account_updated', 'success');
                                $state.go('settings');
                            })
                    );
                });
        }



    }]);

'use strict';

angular
    .module('states.settings')
    .controller('LogCtrl', ['LogStack', function LogCtrl(
        LogStack
    ) {

        var ctrl = this;
        ctrl.copy = copy;
        ctrl.logStack = LogStack;
        ctrl.logData = LogStack.getFullStack();

        function copy () {

        }


    }]);

'use strict';

angular
    .module('states.settings')

    .controller('FeedbackCtrl', ['$scope', 'MessageHelper', 'Loader', '$state', 'FlashMessageManager', function (
        $scope,
        MessageHelper,
        Loader,
        $state,
        FlashMessageManager
    ) {

        var ctrl = this;
        $scope.feedback = {};

        $scope.sendFeedback = function () {
            var msg = {};
            angular.extend(msg, $scope.feedback, {
                category : 'INFO'
            });
            return Loader.track(MessageHelper.sendMessage(msg))
                .then(function (response) {
                    FlashMessageManager.push('flash_message.feedback_sent', 'success');
                    $state.go('settings');
                    Loader.$loading.hide();
                    return response;
                });
            };

    }]);

'use strict';

angular
    .module('states.settings')

    .controller('PasswordCtrl', ['$scope', 'me', '$state', 'Loader', 'FlashMessageManager', function (
        $scope,
        me,
        $state,
        Loader,
        FlashMessageManager
    ) {

        var ctrl = this;
        ctrl.user = me;
        ctrl.validateOptions = {
            'password.old' : {
                minlength : {
                    min : 6
                }
            },
            'password.new' : {
                minlength : {
                    min : 6
                }
            },
            'password.newConfirm': {
                minlength : {
                    min : 6
                }
            }
        };

        $scope.password = {};

        $scope.$on('navbar.done', function(){
            ctrl.validateAndSubmit();
        });

        ctrl.validateAndSubmit = function () {
            ctrl.form.validateAndSubmit(ctrl.change, ctrl.validateOptions);
        };

        ctrl.change = function () {
            // validation client side?
            if ($scope.password.newConfirm === $scope.password.new) {
                var promise = ctrl.user.changePassword.$build({
                    oldPassword : $scope.password.old,
                    password : $scope.password.new
                }).$save().$asPromise();

                Loader.track(promise).then(function () {
                    FlashMessageManager.push('flash_message.password_updated', 'success');
                    $state.go('settings');
                });

            } else {
                $scope.password.newConfirm = '';
                $scope.password.new = '';
            }
        };

    }]);

'use strict';

angular
    .module('states.settings')

    .controller('SettingsCtrl', ['Security', 'ConfirmPopup', 'Loader', '$state', function (
        Security,
        ConfirmPopup,
        Loader,
        $state
    ) {

        var ctrl = this;

        ctrl.goToPrivacy = function() {
            window.open('https://s3.amazonaws.com/tasted/email/tastdapp-privacy.pdf', '_system');
        };

        ctrl.goToTerms = function() {
            window.open('https://s3.amazonaws.com/tasted/email/tastdapp-terms.pdf', '_system');
        };

        ctrl.logout = function () {
            ConfirmPopup.create('popup.logout.title','popup.logout.text')
                .then(function (res) {
                if (res) {
                    return Loader.track(Security.logout()
                        .then(function () {
                            Loader.$loading.hide();
                            $state.go('landing');
                        }));
                }
            });
        };
    }]);

'use strict';

angular
    .module('states.settings')

    .controller('NotificationsCtrl', ['Loader', 'notifications', function (
        Loader,
        notifications
    ) {

        var ctrl = this;

        ctrl.notifications = notifications;
        if(notifications.recap === undefined){
            notifications.recap = true;
        }

        ctrl.save = function(){
            Loader.track(notifications.$save());
        };

    }]);

'use strict';

angular
    .module('states.settings')

    .controller('LanguageCtrl', ['Loader', 'language', 'Config', '$translate', function (
        Loader,
        language,
        Config,
        $translate
    ) {

        var ctrl = this;

        // fallback on default device language if no language has been set by the user
        var usedLanguageId = language.id || Config.PARAMETERS.LANGUAGE;

        ctrl.languages = Config.PARAMETERS.LANGUAGES;
        ctrl.language = _.find(ctrl.languages, function(lan){
            return usedLanguageId === lan.id;
        });

        ctrl.save = function(){
            $translate.use(ctrl.language.id);
            language.id = ctrl.language.id;
            Loader.track(language.$save());
        };

    }]);

'use strict';

angular
    .module('states.signin', ['services.security.signin'])

    .config(['$stateProvider', function ($stateProvider) {

        $stateProvider.state('signin', {
            url: '/signin',
            parent: 'public',
            templateUrl: 'js/states/signin/signin.html',
            controller: 'SigninCtrl as ctrl'
        });

    }]);

'use strict';

angular
    .module('states.signin')
    .controller('SigninCtrl', ['Security', 'TastdEmailSignUpCredential', 'Loader', '$state', '$timeout', '$scope', 'ValidatorManager', function (
        Security,
        TastdEmailSignUpCredential,
        Loader,
        $state,
        $timeout,
        $scope,
        ValidatorManager
    ) {
        var ctrl = this;
        ctrl.signin = signin;
        ctrl.submit = submit;
        ctrl.goForgot = goForgot;
        ctrl.credential = TastdEmailSignUpCredential;

        function goForgot () {
            if ($scope.modal) {
                $scope.modal.cancel();
            }
            $state.go('user.passwordReset');
        }

        function submit () {
            ValidatorManager.validate(ctrl.emailSigninForm, $scope).then(function(){
                ctrl.signin();
            });
        }

        function signin () {
            return Loader.track(Security.login(ctrl.credential)
                .then(function () {
                    return $state.go('wall');
                }), {name: 'emailSigninLogin'});
        }
    }]);

'use strict';

angular
    .module('states.signup', [
        'services.security',
        'states.user'
    ])
    .config(['$stateProvider', function ($stateProvider) {

        $stateProvider.state('signup', {
            url: '/signup?firstName&lastName&email&geoname',
            parent: 'public',
            templateUrl: 'js/states/signup/signup.html',
            controller: 'SignupCtrl as ctrl'
        });

        $stateProvider.state('signupFb', {
            url: '/signup-fb?firstName&lastName&email&externalId&token&geoname',
            parent: 'public',
            templateUrl: 'js/states/signup/signup.html',
            controller: 'SignupFbCtrl as ctrl'
        });

    }]);

'use strict';

angular
    .module('states.signup')
    .controller('SignupCtrl', ['Security', 'TastdEmailSignUpCredential', 'Loader', '$state', '$rootScope', 'AlertPopup', '$stateParams', 'GeonameModal', 'SimpleLocalStorage', 'GeonameManager', '$log', function (
        Security,
        TastdEmailSignUpCredential,
        Loader,
        $state,
        $rootScope,
        AlertPopup,
        $stateParams,
        GeonameModal,
        SimpleLocalStorage,
        GeonameManager,
        $log
    ) {
        var ctrl = this;
        ctrl.credential = TastdEmailSignUpCredential;
        ctrl.validateOptions = getValidateOptions();
        ctrl.signup = signup;
        ctrl.submit = submit;
        ctrl.changeGeoname = changeGeoname;

        initialize();

        function initialize () {
            if ($stateParams.firstName) {
                ctrl.credential.firstName = $stateParams.firstName;
            }
            if ($stateParams.lastName) {
                ctrl.credential.lastName = $stateParams.lastName;
            }
            if ($stateParams.email) {
                ctrl.credential.email = $stateParams.email;
            }
            if ($stateParams.geoname) {
                GeonameManager.findOneById($stateParams.geoname).then(function (geoname) {
                    ctrl.credential.geoname = geoname;
                });
            }
        }

        function submit () {
            $log.debug('[CONTROLLER] Submit');
            if (!ctrl.credential.geoname) {
                return AlertPopup.create('user.select_a_city.title', 'user.select_a_city.text');
            }

            ctrl.emailSignupForm.validateAndSubmit(ctrl.signup, ctrl.validateOptions);
        }

        function changeGeoname () {
            $log.debug('[CONTROLLER] Change Geoname');
            GeonameModal.create().then(function(geoname) {
                ctrl.credential.geoname = geoname.id;
                SimpleLocalStorage.setObject('lastGeoname', geoname);
                SimpleLocalStorage.setObject('restoSearchGeoname', geoname);
            });
        }

        function signup () {
            $log.debug('[CONTROLLER] Signup');
            var promise = Security
                .signup(ctrl.credential).then(function() {
                    $log.debug('[CONTROLLER] Signup Success go to onboarding');
                    return $state.go('onBoardingIntro');
                });

            return Loader.track(promise);
        }

        function getValidateOptions () {
            return {
                firstName: {
                    position: 1,
                    minlength : {
                        min : 2
                    },
                    maxlength : {
                        max : 24
                    }
                },
                lastName: {
                    position: 2,
                    minlength : {
                        min : 2
                    },
                    maxlength : {
                        min : 24
                    }
                },
                email : {
                    position: 3
                },
                password : {
                    position: 4,
                    minlength : {
                        min : 6
                    }
                },
                confirmPassword: {
                    position: 5
                }
            };
        }
    }]);

'use strict';

angular
    .module('states.signup')
    .controller('SignupFbCtrl', ['GeonameModal', 'SimpleLocalStorage', 'GeonameManager', '$stateParams', 'TastdFacebookCredential', 'AlertPopup', 'Security', '$log', '$state', function (
        GeonameModal,
        SimpleLocalStorage,
        GeonameManager,
        $stateParams,
        TastdFacebookCredential,
        AlertPopup,
        Security,
        $log,
        $state
    ) {
        var ctrl = this;
        ctrl.credential = TastdFacebookCredential;
        ctrl.signup = signup;
        ctrl.submit = submit;
        ctrl.changeGeoname = changeGeoname;
        ctrl.validateOptions = getValidateOptions();

        initialize();

        function initialize () {
            if ($stateParams.firstName) {
                ctrl.credential.firstName = $stateParams.firstName;
            }
            if ($stateParams.lastName) {
                ctrl.credential.lastName = $stateParams.lastName;
            }
            if ($stateParams.externalId) {
                ctrl.credential.externalId = $stateParams.externalId;
            }
            if ($stateParams.token) {
                ctrl.credential.token = $stateParams.token;
            }
            if ($stateParams.email) {
                ctrl.credential.email = $stateParams.email;
            }
            if ($stateParams.geoname) {
                GeonameManager.findOneById($stateParams.geoname).then(function (geoname) {
                    ctrl.credential.geoname = geoname;
                });
            }
            if (!$stateParams.token || !$stateParams.externalId) {
                $log.debug('[CONTROLLER] Token or external id missing in state params.');
                return goToEmailSignup();
            }
        }

        function submit () {
            $log.debug('[CONTROLLER] Submit.');
            if (!ctrl.credential.geoname) {
                return AlertPopup.create('user.select_a_city.title', 'user.select_a_city.text');
            }

            ctrl.emailSignupForm.validateAndSubmit(ctrl.signup, ctrl.validateOptions);
        }

        function signup () {
            $log.debug('[CONTROLLER] Signup');
            return Security.signup(ctrl.credential)
                .then(onSignupSuccess, onSignupError);
        }

        function onSignupSuccess () {
            $log.debug('[CONTROLLER] On Signup success');
            return $state.go('onBoardingIntro');
        }

        function onSignupError (e) {
            $log.debug('[CONTROLLER] On Sign up error', e);
            if (e.data && e.data.id === 'AlreadyRegisteredWithEmailException') {
                AlertPopup.create(
                    'popup.already_registered_with_email.title',
                    'popup.already_registered_with_email.text'
                );
            } else {
                $log.debug(e.data);
            }
        }

        function changeGeoname () {
            $log.debug('[CONTROLLER] Change Geoname');
            GeonameModal.create().then(function(geoname) {
                ctrl.credential.geoname = geoname;
                SimpleLocalStorage.setObject('lastGeoname', geoname);
                SimpleLocalStorage.setObject('restoSearchGeoname', geoname);
            });
        }

        function getValidateOptions () {
            return {
                firstName: {
                    position: 1,
                    minlength : {
                        min : 2
                    },
                    maxlength : {
                        max : 24
                    }
                },
                lastName: {
                    position: 2,
                    minlength : {
                        min : 2
                    },
                    maxlength : {
                        min : 24
                    }
                },
                email : {
                    position: 3
                }
            };
        }

        function goToEmailSignup () {
            $log.debug('[CONTROLLER] Go to email sign up');
            $state.go('signup', {
                firstName: ctrl.credential.firstName,
                lastName: ctrl.credential.lastName,
                email: ctrl.credential.email,
                geoname: ctrl.credential.geoname
            });
        }

    }]);

'use strict';

angular
    .module('states.user', [
        'services.security'
    ])

    .config(['$stateProvider', function ($stateProvider) {

        $stateProvider.state('me', {
            url: '/me',
            parent: 'private',
            templateUrl: 'js/states/user/user.html',
            controller: 'UserCtrl as ctrl',
            layout: {
                'navbar-edit-button': true,
                'navbar-settings-button': true,
                'main-menu-profile': true
            }
        });

        $stateProvider.state('user', {
            url: '/user/:userId/show',
            parent:'private',
            templateUrl: 'js/states/user/user.html',
            controller: 'UserCtrl as ctrl',
            layout: {
                'main-menu-news': 'inherit',
                'main-menu-restaurants': 'inherit',
                'main-menu-add': 'inherit',
                'main-menu-gurus': 'inherit',
                'main-menu-profile': 'inherit',
                'navbar-back-button': true
            }
        });

        $stateProvider.state('userEdit', {
            url: '/user/edit',
            parent: 'private',
            templateUrl: 'js/states/user/user-edit.html',
            controller: 'UserEditCtrl as ctrl',
            title: 'user.edit_profile',
            layout: {
                'main-menu-profile': true,
                'navbar-back-button': true,
                'navbar-done-button': true
            }
        });

        $stateProvider.state('userFollowing', {
            url: '/user/:userId/following',
            parent:'private',
            templateUrl: 'js/states/user/user-follow-list.html',
            controller: 'UserFollowingCtrl as ctrl',
            title: 'user.following.page_title',
            layout: {
                'main-menu-news': 'inherit',
                'main-menu-restaurants': 'inherit',
                'main-menu-add': 'inherit',
                'main-menu-gurus': 'inherit',
                'main-menu-profile': 'inherit',
                'navbar-back-button': true
            }
        });

        $stateProvider.state('userFollowers', {
            url: '/user/:userId/followers',
            parent:'private',
            templateUrl: 'js/states/user/user-follow-list.html',
            controller: 'UserFollowersCtrl as ctrl',
            title: 'user.follower.page_title',
            layout: {
                'main-menu-news': 'inherit',
                'main-menu-restaurants': 'inherit',
                'main-menu-add': 'inherit',
                'main-menu-gurus': 'inherit',
                'main-menu-profile': 'inherit',
                'navbar-back-button': true
            }
        });

        $stateProvider.state('userSearch', {
            url: '/user/search/?geoname',
            parent:'private',
            title: 'user.add_gurus.page_title',
            templateUrl: 'js/states/user/user-search.html',
            controller: 'UserSearchCtrl as ctrl',
            layout: {
                'main-menu-gurus': true
            }
        });

        $stateProvider.state('user.passwordReset', {
            url : '/user/password-reset',
            parent : 'public',
            templateUrl : 'js/states/user/user-password-reset.html',
            controller : 'PasswordResetCtrl as ctrl',
            layout: {
                'main-menu-profile': true,
                'navbar-done-button': true,
                'navbar-back-button': true
            }
        });

        $stateProvider.state('user.passwordConfirm', {
            url : '/user/password-confirm?token',
            parent : 'public',
            templateUrl : 'js/states/user/user-password-confirm.html',
            controller : 'PasswordConfirmCtrl as ctrl',
            layout: {
                'main-menu-profile': true,
                'navbar-back-button': true
            }
        });

    }]);

'use strict';

angular
    .module('states.user')
    .controller('UserSearchCtrl', ['$scope', '$ionicLoading', '$timeout', 'GeonameManager', '$stateParams', '$translate', '$state', 'GeonameModal', 'UserManager', '$log', 'ContactManager', 'MD5Util', 'FacebookConnect', 'FriendManager', 'ValidatorViolatedContext', 'IonicValidateOnSubmitPopup', '$q', 'AlertPopup', '$cordovaSocialSharing', 'me', 'Analytics', '$ionicScrollDelegate', function (
        $scope,
        $ionicLoading,
        $timeout,
        GeonameManager,
        $stateParams,
        $translate,
        $state,
        GeonameModal,
        UserManager,
        $log,
        ContactManager,
        MD5Util,
        FacebookConnect,
        FriendManager,
        ValidatorViolatedContext,
        IonicValidateOnSubmitPopup,
        $q,
        AlertPopup,
        $cordovaSocialSharing,
        me,
        Analytics,
        $ionicScrollDelegate
    ) {
        var ctrl = this;
        var podium = [];
        ctrl.$state = $state;
        ctrl.searchCriteria = {
            query : null,
            notUsers: null,
            geoname : null
        };
        ctrl.isPodium = isPodium;
        ctrl.user = me;
        ctrl.users = [];
        ctrl.loading = false;
        ctrl.emailsLength = 0;
        ctrl.chunksLength = 0;
        ctrl.loadedChunks = 0;

        ctrl.loadMore = loadMore;
        ctrl.changeGeoname = changeGeoname;
        ctrl.enableGeoFilter = enableGeoFilter;
        ctrl.disableGeoFilter = disableGeoFilter;
        ctrl.cancel = cancel;
        ctrl.search = _.debounce(searchUsers, 200);
        ctrl.searchContacts = searchContacts;
        ctrl.searchFriends = searchFriends;
        ctrl.getProgress = getProgress;
        ctrl.publishOnFb = publishOnFb;

        initialize();

        function initialize () {
            $log.debug('[CONTROLLER] Initialize');
            if ($stateParams.geoname) {
                GeonameManager.findOneById($stateParams.geoname)
                    .then(function (geoname) {
                        $log.debug('[CONTROLLER] On geoname find');
                        ctrl.searchCriteria.geoname = geoname;
                        searchUsers();
                    });
            } else {
                searchUsers();
            }
        }

        function searchUsers () {
            $log.debug('[CONTROLLER] Search users');
            ctrl.loading = true;
            ctrl.isFacebookSearch = false;
            ctrl.isTastdSearch = true;
            ctrl.isContactsSearch = false;
            ctrl.users = [];
            $ionicScrollDelegate.scrollTop();
            UserManager.findAll(getSearchParameters())
                .then(function(users){
                    ctrl.loading = false;
                    ctrl.users = users;
                    refreshPodium();
                });
        }

        function refreshPodium () {
            $log.debug('[CONTROLLER] Refresh podium');
            if (ctrl.users.length < 3) {
                return resetPodium();
            }
            if(!ctrl.searchCriteria.query || !ctrl.searchCriteria.query.length){
                podium[0] = ctrl.users[0].id;
                podium[1] = ctrl.users[1].id;
                podium[2] = ctrl.users[2].id;
            }
        }

        function resetPodium () {
            podium.length = 0;
        }

        function cancel () {
            ctrl.searchCriteria.query = null;
        }

        function disableGeoFilter () {
            ctrl.searchCriteria.geoname = null;
            ctrl.searchCriteria.query = null;
            ctrl.search();
        }

        function enableGeoFilter (geoname) {
            ctrl.searchCriteria.geoname = geoname;
            ctrl.searchCriteria.query = null;
            ctrl.search();
        }

        function changeGeoname () {
            GeonameModal.createWithAllCities()
                .then(function(geoname) {
                    $log.debug('[CONTROLLER] Geoname modal result', geoname);
                    geoname === 'all' ? disableGeoFilter() : enableGeoFilter(geoname);
                });
        }

        function loadMore () {
            return ctrl.users.$fetchMore().$asPromise()
                .finally(function (data) {
                    $scope.$broadcast('scroll.infiniteScrollComplete');
                    return data;
                });
        }

        function getSearchParameters () {
            if (ctrl.searchCriteria.query==='') {
                ctrl.searchCriteria.query = null;
            }
            if (ctrl.searchCriteria.geoname) {
                ctrl.searchCriteria.orderBy = 'geoScore';
                return _.extend(_.omit(ctrl.searchCriteria, 'geoname'), {
                    geoname: ctrl.searchCriteria.geoname.id,
                    orderBy: 'geoScore',
                    notUsers: me.id
                });
            } else {
                ctrl.searchCriteria.orderBy = 'score';
                ctrl.searchCriteria.notUsers = me.id;
                return ctrl.searchCriteria;
            }

        }

        function isPodium (user) {
            return _.contains(podium, user.id);
        }

        // CONTACTS

        function searchContacts () {
            Analytics.trackView('userSearchFromContacts');
            // Ios trigger two times searchContacts!
            if (ctrl.isContactsSearch) {
                return;
            }
            ctrl.isFacebookSearch = false;
            ctrl.isTastdSearch = false;
            ctrl.isContactsSearch = true;
            ctrl.loadedChunks = 0;
            ctrl.users = [];
            $ionicScrollDelegate.scrollTop();
            ctrl.loading = true;
            ctrl.searchCriteria.geoname = null;
            ContactManager.findUniqueEmails().then(function(contacts) {
                ctrl.emailsLength = contacts.length;
                var contactsChunks = chunkArray(contacts);
                ctrl.chunksLength = contactsChunks.length;
                _.each(contactsChunks, loadContacts);
            }, function() {
                ctrl.loading = false;
                AlertPopup.create(
                    'popup.contacts_not_available.title',
                    'popup.contacts_not_available.text'
                );
            });
        }

        function getProgress() {
            if (!ctrl.chunksLength || ctrl.chunksLength === 0) {
                return 0;
            }
            var result = parseInt((ctrl.loadedChunks / ctrl.chunksLength) * 100)
            result = result > 100 ? 100 : result;

            return result;
        }

        function loadContacts (contacts) {
            $log.debug('[CONTROLLER] Load chunk', contacts);
            ctrl.loading = true;
            return UserManager.findAll({
                emails: buildQueryString(contacts),
                notUsers: me.id
            }).then(function(users){
                $log.debug('[CONTROLLER] On Load chunk', users);
                ctrl.loadedChunks++;
                appendResults(users);
                sortUsersByAlphabetically();
                if (ctrl.loadedChunks === ctrl.chunksLength) {
                    ctrl.loading = false;
                }
            });
        }

        function chunkArray (contacts) {
            var i,j,temporaryArray,chunk = 20,results=[];
            for (i=0,j=contacts.length; i<j; i+=chunk) {
                temporaryArray = contacts.slice(i,i+chunk);
                results.push(temporaryArray);
            }
            return results;
        }

        function buildQueryString (contacts) {
            return _(contacts).map(function(c) {
                return MD5Util.md5(c);
            }).value().join(',');
        }

        function sortUsersByAlphabetically() {
            ctrl.users.sort(
                function(a, b) {
                    if (a.firstName.toLowerCase() < b.firstName.toLowerCase()) return -1;
                    if (a.firstName.toLowerCase() > b.firstName.toLowerCase()) return 1;
                    return 0;
                }
            );
        }

        function appendResults (users) {
            if (ctrl.users.length===0) {
                ctrl.users= users;
            } else {
                _.each(users, function(user){
                    ctrl.users.push(user);
                });
            }
        }

        // Facebook

        function searchFriends () {
            Analytics.trackView('userSearchFromFacebook');
            if (ctrl.isFacebookSearch) {
                return;
            }
            ctrl.isFacebookSearch = true;
            ctrl.isTastdSearch = false;
            ctrl.isContactsSearch = false;
            ctrl.users = [];
            $ionicScrollDelegate.scrollTop();
            ctrl.loading = true;
            ctrl.searchCriteria.geoname = null;
            FacebookConnect.ensureHasCredential(me)
                .then(function() {
                    FriendManager.findAll()
                        .then(onGetFriendsSuccess, onGetFriendsError);
                });
        }

        function onGetFriendsSuccess(friends) {
            ctrl.users = friends;
            ctrl.loading = false;
        }

        function onGetFriendsError(restResponse) {
            if(restResponse.$response.data.id === 'Facebook') {
                return FacebookConnect.loginWithUpdateCredential(me).then(function(){
                    searchFriends();
                });
            }
            var context = ValidatorViolatedContext.getContextByRestResponse(restResponse);
            new IonicValidateOnSubmitPopup(context).alert();
        }

        function publishOnFb () {
            var url = 'https://tastdapp.com?invite&user=' + me.id;
            var title = $translate.instant('invite.share.title');
            var message = $translate.instant('invite.share.message');

            if (!window.plugins) {
                return window.alert('Share this link ' + url);
            }

            Analytics.trackEvent('share', 'invite');

            return $cordovaSocialSharing
                .share(message, title, null, url);
        }

    }]);

'use strict';

angular
    .module('states.user')
    .controller('UserEditCtrl', ['$scope', 'me', 'Loader', 'meEditValidateOptions', '$state', 'Geoname', '$cordovaCamera', '$log', '$stateParams', '$ionicActionSheet', 'SimpleLocalStorage', 'GeonameManager', 'PhotoUpload', 'GeonameModal', function (
            $scope,
            me,
            Loader,
            meEditValidateOptions,
            $state,
            Geoname,
            $cordovaCamera,
            $log,
            $stateParams,
            $ionicActionSheet,
            SimpleLocalStorage,
            GeonameManager,
            PhotoUpload,
            GeonameModal
    ) {

        var ctrl = this;

        ctrl.user            = me;
        ctrl.validateOptions = meEditValidateOptions;
        ctrl.geonames        = Geoname.$collection();
        ctrl.years           = _.range(2015,1910,-1);

        $scope.$on('navbar.done', function(){
            ctrl.submit();
        });

        ctrl.submit = function() {
            ctrl.editProfileForm.validateAndSubmit(function(){
                ctrl.update(ctrl.user);
            }, ctrl.validateOptions);
        };

        ctrl.update = function (user) {
            var promise = user.$save().$asPromise();

            promise.then(function () {
                $state.go('me');
            });

            Loader.track(promise);

            return promise;
        };

        ctrl.changeGeoname = function() {
            GeonameModal.create()
                .then(function(geoname) {
                    ctrl.user.geoname = geoname;
                    // also overwrite the setting for the map
                    SimpleLocalStorage.setObject('lastGeoname', geoname);
                    SimpleLocalStorage.setObject('restoSearchGeoname', geoname);
                });
        };

        ctrl.uploadPhoto = PhotoUpload.uploadPhotoFactory(function(imageData){
            ctrl.user.uploadedAvatar =  imageData;
            Loader.track(me.$save().$asPromise());
        });

        return ctrl;
    }])

    .value('meEditValidateOptions',{
        firstName : {
            minlength : {
                min : 2
            }
        },
        lastName : {
            minlength : {
                min : 2
            }
        },
        headline : {
            minlength : {
                min : 5
            }
        },
        about : {
            minlength : {
                min : 5
            }
        }
    });

'use strict';

angular
    .module('states.user')
    .controller('UserCtrl', ['me', '$q', 'UserManager', '$state', '$scope', 'Loader', '$http', '$stateParams', 'MyLeadersHelper', 'ReviewManager', 'ExpertiseManager', 'ConfirmPopup', 'LayoutManager', function (
        me,
        $q,
        UserManager,
        $state,
        $scope,
        Loader,
        $http,
        $stateParams,
        MyLeadersHelper,
        ReviewManager,
        ExpertiseManager,
        ConfirmPopup,
        LayoutManager
    ) {

        var ctrl = this;
        ctrl.me = me;
        ctrl.isMe = ($stateParams.userId === undefined) || me.id === parseInt($stateParams.userId);
        ctrl.reviews = [];
        ctrl.showWall = false;
        ctrl.expertise = null;
        ctrl.user = null;
        ctrl.loading = true;
        ctrl.expertiseLoading = true;
        ctrl.toggleFollow = toggleFollow;
        ctrl.goToCity = goToCity;
        ctrl.doRefresh = doRefresh;

        initialize();

        function initialize () {
            loadData();
            $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
            $scope.$on('navbar.edit', onNavBarEdit);
        }

        function loadData () {
            var id = $stateParams.userId || me.id;
            loadExpertise(id);
            loadUser(id);
            loadReviews(id);
        }

        function onBeforeEnter () {
            if (ctrl.user) {
                LayoutManager.setTitle(ctrl.user.fullName);
            }
        }

        function onNavBarEdit () {
            $state.go('userEdit')
        }

        function loadExpertise (id) {
            return ExpertiseManager.findAll(id).then(function(expertise){
                ctrl.expertise = _.sortBy(expertise, 'count').reverse();
                ctrl.expertiseLoading = false;
            });
        }

        function loadUser (id) {
            return UserManager.findOneById(id).then(function(user){
                ctrl.user = user;
                ctrl.loading = false;
                LayoutManager.setTitle(user.fullName);
            });
        }

        function toggleFollow () {
            if (MyLeadersHelper.get(ctrl.user.id)) {
                unfollowPopup();
            } else {
                Loader.track(MyLeadersHelper.add(ctrl.user.id));
            }
        }

        function unfollowPopup () {
            ConfirmPopup.create('popup.unfollow.title','popup.unfollow.text')
                .then(function(res) {
                    if (res) {
                        return Loader.track(MyLeadersHelper.remove(ctrl.user.id));
                    }
                });
        }

        function loadReviews (id) {
            return ReviewManager.getWallByUserId(id).then(function(reviews){
                ctrl.reviews = reviews;
            });
        }

        function goToCity(city) {
            var params = {
                userId: ctrl.user.id,
                userFirstName: ctrl.user.firstName,
                userLastName: ctrl.user.lastName,
                userFullName: ctrl.user.fullName,
                cityId: city.id,
                cityName: city.name,
                lat: city.lat,
                lng: city.lng
            };

            $state.go('rankingList', params);
        }

        function doRefresh () {
            var id = $stateParams.userId || me.id;
            var p1 = loadExpertise(id);
            var p2 = loadUser(id);
            var p3 = loadReviews(id);

            $q.all([p1, p2, p3]).finally(function(){
                $scope.$broadcast('scroll.refreshComplete');
            });
        }

    }]);

'use strict';

angular
    .module('states.user')
    .controller('UserFollowersCtrl', ['$scope', 'UserManager', '$stateParams', '$state', function (
        $scope,
        UserManager,
        $stateParams,
        $state
    ) {

        var ctrl = this;
        ctrl.$state = $state;
        ctrl.query = {
            name : ''
        };
        ctrl.users = [];
        ctrl.findMore = false;
        ctrl.noUsersMessage = 'user.no_followers';
        ctrl.loadMore = loadMore;
        ctrl.search = search;
        ctrl.loading = true;
        ctrl.title = 'user.follower.page_title';

        initialize();

        function initialize () {
            search();
        }

        function search () {
            ctrl.loading = true;
            ctrl.users.length = 0;
            UserManager.findFollowersOf($stateParams.userId, ctrl.query.name)
                .then(function(users){
                    ctrl.users = users;
                    ctrl.loading = false;
                });
        }

        function loadMore () {
            return ctrl.users
                .$fetchMore()
                .$asPromise().then(function () {
                    $scope.$broadcast('scroll.infiniteScrollComplete');
                });
        }

    }]);

'use strict';

angular
    .module('states.user')
    .controller('UserFollowingCtrl', ['$scope', 'Analytics', '$state', 'UserManager', '$stateParams', function (
        $scope,
        Analytics,
        $state,
        UserManager,
        $stateParams
    ) {
        var ctrl = this;
        ctrl.$state = $state;
        ctrl.loading = true;
        ctrl.users = [];
        ctrl.findMore = findMore;
        ctrl.query = {
            name : ''
        };
        ctrl.findMore = findMore;
        ctrl.noUsersMessage = 'user.no_followings';
        ctrl.loadMore = loadMore;
        ctrl.search = search;
        ctrl.title = 'user.following.page_title';

        initialize();

        function initialize () {
            search();
        }

        function search () {
            ctrl.loading = true;
            ctrl.users.length = 0;
            return UserManager.findLeadersOf($stateParams.userId, ctrl.query.name)
                .then(function (users) {
                    ctrl.users = users;
                    ctrl.loading = false;
                });
        }

        function loadMore () {
            return ctrl.users
                .$fetchMore()
                .$asPromise().then(function (users) {
                    $scope.$broadcast('scroll.infiniteScrollComplete');
                    return users;
                });
        }

        function findMore() {
            $state.go('userSearch');
        }

    }]);

'use strict';

angular
    .module('states.user')
    .controller('PasswordResetCtrl', ['Security', 'Loader', '$state', '$scope', 'ConfirmPopup', 'FlashMessageManager', function (
        Security,
        Loader,
        $state,
        $scope,
        ConfirmPopup,
        FlashMessageManager
    ) {

        var ctrl = this;

        $scope.reset = {
            email : ''
        };

        ctrl.reset = function () {
            ConfirmPopup.create('popup.reset_password.title', 'popup.reset_password.text')
                .then(function (res) {
                if (res) {
                    return Loader.track(Security.resetPassword({
                        email : $scope.reset.email
                    })
                        .then(function () {
                            FlashMessageManager.push('flash_message.password_sent', 'success');
                            $state.go('signin');
                        }));
                }
            });

        };

        return ctrl;
    }]);

'use strict';

angular
    .module('states.user')
    .controller('PasswordConfirmCtrl', ['Security', '$scope', '$stateParams', function (
        Security,
        $scope,
        $stateParams
    ) {

        var ctrl = this;

        $scope.password = {};

        ctrl.confirm = function () {
            // validation client side?
            if ($scope.password.new === $scope.password.retype) {
                // TODO: bind the service: does the exposed API have such a service?

                Loader.track(Security.confirmResetPassword({
                    password : $scope.password.new,
                    'confirmation-token' : $stateParams.token
                })
                    .then(function () {
                        $state.go('me');
                    }, function (res) {

                    }));
            } else {
                $scope.password.new = '';
                $scope.password.retype = '';
            }
        };

        return ctrl;
    }]);

'use strict';

angular
    .module('states.wall', [
        'entities.review'
    ])

    .config(['$stateProvider', function ($stateProvider) {

        $stateProvider.state('wall', {
            url: '/wall',
            parent: 'private',
            layout: {
                'main-menu-news': true,
                'navbar-notification-button': true
            },
            cache: false,
            title: 'wall.page_title',
            templateUrl: 'js/states/wall/wall.html',
            controller: 'WallCtrl as ctrl'
        });
    }]);

'use strict';

angular
    .module('states.wall')
    .controller('WallCtrl', ['me', 'Loader', 'ReviewManager', '$scope', function (
        me,
        Loader,
        ReviewManager,
        $scope
    ) {
        var ctrl = this;
        ctrl.reviews = [];
        ctrl.me = me;
        ctrl.loading = true;
        ctrl.doRefresh = doRefresh;

        initialize();

        function initialize () {
            loadReviews().then(function () {
                ctrl.loading = false;
            });
        }

        function loadReviews () {
            var parameters = {
                leadersOf: me.id,
                user: me.id,
                orderBy : 'created',
                serializationGroups : 'reviewOwner'
            };
            return ReviewManager.findAll(parameters).then(function(reviews){
                ctrl.reviews = reviews;
            });
        }

        function doRefresh () {
            loadReviews().finally(function(){
                $scope.$broadcast('scroll.refreshComplete');
            });
        }
    }]);

angular.module('services.templates', ['js/directives/cuisine/select-cuisine.html', 'js/directives/flash-message/flash-message.html', 'js/directives/loader/list-loader.html', 'js/directives/loader/progress-bar.html', 'js/directives/notification/notification.html', 'js/directives/photo/gallery.html', 'js/directives/photo/photo.html', 'js/directives/quickadd/quickadd.html', 'js/directives/restaurant/restaurant-edit.html', 'js/directives/restaurant/restaurant-list.html', 'js/directives/restaurant/restaurant.html', 'js/directives/review/review-tags-property.html', 'js/directives/review/review-text-property.html', 'js/directives/tag/add-tags.html', 'js/directives/tag/tag-list.html', 'js/directives/tag/tag-selector.html', 'js/directives/user/user-modal-content.html', 'js/directives/user/user-signature.html', 'js/directives/wall/wall.html', 'js/modals/address/address-modal.html', 'js/modals/autocomplete/autocomplete-modal.html', 'js/modals/cuisine/cuisine-modal.html', 'js/modals/cuisine/multiple-cuisines-modal.html', 'js/modals/fields/input-date-modal.html', 'js/modals/fields/input-text-modal.html', 'js/modals/fields/textarea-modal.html', 'js/modals/filters/filters-modal.html', 'js/modals/geo-guru/geo-guru-modal.html', 'js/modals/geoname/geoname-modal.html', 'js/modals/review/review-extra-fields-modal.html', 'js/modals/tag/tag-modal.html', 'js/modals/user/multiple-users-modal.html', 'js/popups/duplicated-restaurant-popup.html', 'js/services/security/signin/email-signin.html', 'js/services/security/signin/facebook-signin.html', 'js/services/security/signin/signin-modal.html', 'js/services/security/signup/facebook-signup.html', 'js/services/utility/debug-json-directive.html', 'js/states/invite/invite-home.html', 'js/states/landing/landing.html', 'js/states/map/map.html', 'js/states/notification/notification.html', 'js/states/on-boarding/on-boarding-friends.html', 'js/states/on-boarding/on-boarding-intro.html', 'js/states/on-boarding/on-boarding-suggestions.html', 'js/states/on-boarding/on-boarding-top-gurus.html', 'js/states/on-boarding/on-boarding-top-restaurants.html', 'js/states/private/filtersbar.html', 'js/states/private/headerbar.html', 'js/states/private/map.html', 'js/states/private/menu.html', 'js/states/private/private.html', 'js/states/public/public.html', 'js/states/ranking/ranking-reorder.html', 'js/states/restaurant/restaurant-create.html', 'js/states/restaurant/restaurant-edit.html', 'js/states/restaurant/restaurant-error.html', 'js/states/restaurant/restaurant-search-web.html', 'js/states/restaurant/restaurant-search.html', 'js/states/restaurant/restaurant-view.html', 'js/states/restaurant/review-edit/edit-price.html', 'js/states/restaurant/reviews.html', 'js/states/settings/account.html', 'js/states/settings/feedback.html', 'js/states/settings/language.html', 'js/states/settings/log.html', 'js/states/settings/notifications.html', 'js/states/settings/password.html', 'js/states/settings/settings.html', 'js/states/signin/signin.html', 'js/states/signup/signup-fb.html', 'js/states/signup/signup.html', 'js/states/user/user-edit.html', 'js/states/user/user-follow-list.html', 'js/states/user/user-password-confirm.html', 'js/states/user/user-password-reset.html', 'js/states/user/user-search.html', 'js/states/user/user.html', 'js/states/wall/wall.html']);

angular.module("js/directives/cuisine/select-cuisine.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/cuisine/select-cuisine.html",
    "<ion-list class=\"select-cuisine padless list-cuisines\" ng-click=openModal()><span class=\"input-label-full font-size-base\">Cuisine <span class=\"required-marker color-red\">*</span></span><div class=\"item no-border\"><div class=item-content><cuisine icon=true cuisine-model=item.cuisine></cuisine><div ng-if=!item.cuisine class=\"fake-input placeholder\"><div class=cuisine-icon-box><i class=\"icon icon-cuisine\"></i></div>Select cuisine <span class=\"required-marker color-red\">*</span></div><input type=hidden name=cuisine ng-disabled=true ng-required=true ng-model=item.cuisine placeholder=\"Select a cuisine\"></div></div></ion-list>");
}]);

angular.module("js/directives/flash-message/flash-message.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/flash-message/flash-message.html",
    "<div ng-if=ctrl.manager.active class=flash-messages-container><div class=flash-messages-container-inner><div class=flash-messages-reset ng-click=ctrl.reset($event)><i class=\"icon icon-circle-close\"></i></div><div ng-class=message.category class=flash-message ng-repeat=\"message in ctrl.manager.messages\"><div>{{ message.content }}</div></div></div></div>");
}]);

angular.module("js/directives/loader/list-loader.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/loader/list-loader.html",
    "<ion-list ng-if=loading><ion-item><span translate=message.loading></span> <span class=position-relative><ion-spinner class=ion-item-spinner></ion-spinner></span></ion-item></ion-list>");
}]);

angular.module("js/directives/loader/progress-bar.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/loader/progress-bar.html",
    "<div class=\"progress-bar item\"><div class=loading-bar-wrapper><div class=loading-bar style=\"width: {{ progress }}%\"></div></div><div class=text>{{ progress }}% loaded</div></div>");
}]);

angular.module("js/directives/notification/notification.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/notification/notification.html",
    "<div class=\"item item-avatar item-notification\" ng-class=\"{seen: pushMessage.seen}\"><img ng-src=\"{{pushMessage.notification.content.image}}\"><article ng-if=\"pushMessage.notification.name=='leader.review'\"><h3><a ui-sref=\"user({userId: pushMessage.notification.content.user})\">{{pushMessage.notification.content.userFullName}}</a></h3><p>{{ 'notification.added' | translate }} <a ui-sref=\"restaurantView({restaurantId: pushMessage.notification.content.restaurant})\">{{pushMessage.notification.content.restaurantName}}</a> {{ 'notification.to_favorites' | translate }}</p></article><article ng-if=\"pushMessage.notification.name=='leader.wish'\"><h3><a ui-sref=\"user({userId: pushMessage.notification.content.user})\">{{pushMessage.notification.content.userFullName}}</a></h3><p>{{ 'notification.added' | translate }} <a ui-sref=\"restaurantView({restaurantId: pushMessage.notification.content.restaurant})\">{{pushMessage.notification.content.restaurantName}}</a> {{ 'notification.to_wishlist' | translate }}</p></article><article ng-if=\"pushMessage.notification.name=='new.follower'\"><h3><a ui-sref=\"user({userId: pushMessage.notification.content.follower})\">{{pushMessage.notification.content.followerFullName}}</a></h3><p>{{ 'notification.started_following_you' | translate }}</p></article><article ng-if=\"pushMessage.notification.name=='new.facebook.friend'\"><h3><a ui-sref=\"user({userId: pushMessage.notification.content.user})\">{{pushMessage.notification.content.userFullName}}</a></h3><p>{{ 'notification.started_using_tastd' | translate }}</p></article><article ng-if=\"pushMessage.notification.name=='leader.follows'\"><h3><a ui-sref=\"user({userId: pushMessage.notification.content.follower})\">{{pushMessage.notification.content.followerFullName}}</a></h3><p>{{ 'notification.started_following' | translate }} <a ui-sref=\"user({userId: pushMessage.notification.content.leader})\">{{pushMessage.notification.content.leaderFullName}}</a></p></article><div class=\"color-gray font-size-xsmall\" am-time-ago=pushMessage.notification.created></div></div>");
}]);

angular.module("js/directives/photo/gallery.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/photo/gallery.html",
    "<div class=gallery-container><ion-list ng-if=\"photos.length == 0\"><ion-item class=\"display-block add-item-link\" ng-click=ctrl.uploadPhoto()><div style=\"padding-left: 5px\"><div class=\"add-item-icon ion-plus-circled resto-avatar\"></div><div class=add-item-label>{{'Add photo' | translate}}</div></div><div><div class=row style=\"padding: 0 10px\"><div class=\"col col-33\" style=\"padding: 0 5px\"><div class=square-box><div class=square-content><div><span><i class=\"icon icon-camera\"></i></span></div></div></div></div><div class=\"col col-33\" style=\"padding: 0 5px\"><div class=square-box><div class=square-content><div><span><i class=\"icon icon-camera\"></i></span></div></div></div></div><div class=\"col col-33\" style=\"padding: 0 5px\"><div class=square-box><div class=square-content><div><span><i class=\"icon icon-camera\"></i></span></div></div></div></div></div><div class=space-10></div></div></ion-item></ion-list><div class=photo-block ng-repeat=\"(key, group) in ctrl.groupedPhotos track by $index\"><span class=photo-container ng-class=\"{'selected' : ctrl.selected[(key*3)+$index], 'photo-l' : ($index==0), 'photo-r' : ($index==2), 'add-remove' : photo._isAddRemove}\" on-hold=ctrl.select((key*3)+$index) ng-repeat=\"photo in group track by $index\" ng-click=ctrl.onClick((key*3)+$index)><img ng-if=!photo._isAddRemove class=gallery-photo ng-src={{photo.src}}> <span ng-if=!photo._isAddRemove class=icon-circle-check></span> <span ng-if=photo._isAddRemove class=gallery-add-button><span class=add-button-background><span ng-class=\"{'icon-circle-add' : ctrl.numberSelected == 0, 'icon-delete' : ctrl.numberSelected > 0}\"></span></span></span></span> <span ng-if=ctrl.needFakeBlock(key) class=photo-container></span></div><div style=clear:both></div></div>");
}]);

angular.module("js/directives/photo/photo.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/photo/photo.html",
    "<ion-modal-view class=photo-modal-template><ion-content scroll=false><span class=\"close-photo-modal icon-close\" ng-click=close()></span><div class=slider-container><user-signature ng-if=user user=user light-theme=true hide-quick-follow=true></user-signature><ion-slide-box on-slide-changed=slideHasChanged($index) show-pager=false active-slide=photoIndex><ion-slide ng-repeat=\"photo in photos\"><img ng-src={{::photo.src}}> <span class=icon-delete ng-if=delete ng-click=delete(photo)></span></ion-slide></ion-slide-box></div></ion-content></ion-modal-view>");
}]);

angular.module("js/directives/quickadd/quickadd.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/quickadd/quickadd.html",
    "<span class=quickadd-container ng-class=\"{'extended' : extendedVersion}\"><span ng-if=!ctrl.isReviewActive(ctrl.restaurantId) class=\"icon icon-bookmark\" ng-click=\"ctrl.toggleWish(ctrl.restaurantId);  $event.stopPropagation(); ctrl.quickAddDone();\" ng-class=\"{'active' : ctrl.isWishActive(ctrl.restaurantId)}\"><span ng-if=extendedVersion class=extended-text>{{ctrl.isWishActive(ctrl.restaurantId)? 'restaurant.added_to_wishlist' : 'restaurant.add_to_my_wishlist' | translate}}</span></span> <span class=\"icon icon-heart\" ng-click=\"ctrl.toggleReview(ctrl.restaurantId);  $event.stopPropagation(); ctrl.quickAddDone();\" ng-class=\"{'active' : ctrl.isReviewActive(ctrl.restaurantId)}\"><span ng-if=extendedVersion class=extended-text>{{ctrl.isReviewActive(ctrl.restaurantId)? 'restaurant.added_to_favorites' : 'restaurant.add_to_my_favorites' | translate}}</span></span></span>");
}]);

angular.module("js/directives/restaurant/restaurant-edit.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/restaurant/restaurant-edit.html",
    "<form name=restaurantEditForm><div ng-if=!hidePhoto class=\"restaurant-header-picture text-center\" ng-style=ctrl.getPhotoStyle()><div ng-if=!restaurant.uploadedPicture ng-click=ctrl.uploadPhoto()></div><button type=button id=restoUploadBtn class=\"button icon ion-camera\" ng-click=ctrl.uploadPhoto()></button></div><ion-list><select-cuisine cuisines=cuisines item=restaurant></select-cuisine><label class=\"item item-input\"><input name=name ng-model=restaurant.name ng-required=true placeholder=Name></label><div class=\"item item-input\" ng-click=ctrl.city()><div class=fake-input ng-class=\"{'placeholder' : !restaurant.geoname.formattedName}\">{{ restaurant.geoname.formattedName || 'Select city' }}</div></div><div class=\"item item-input\" ng-click=\"ctrl.address(restaurant.geoname, restaurant.address)\"><div class=fake-input ng-class=\"{'placeholder' : !restaurant.address}\">{{Â restaurant.address || 'Select address' }}</div></div><label class=\"item item-input\"><input name=website ng-blur=ctrl.prependProtocol() ng-model=restaurant.website placeholder=Website></label><label class=\"item item-input\"><input type=tel name=tel ng-model=restaurant.phone placeholder=\"Phone number\"></label></ion-list></form>");
}]);

angular.module("js/directives/restaurant/restaurant-list.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/restaurant/restaurant-list.html",
    "<div class=restaurant-list-wrapper><div ng-repeat=\"(cuisine, group) in list | purgeScope | groupBy:'cuisineName' | toArray:true | orderBy: '$key' track by $index\"><ion-item ng-if=group class=item-divider><span ng-style=\"{color: '#'+group[0].color }\">{{group.$key}}</span> <span class=edit-ranking-button ng-if=\"reorder && group.length > 1\" ui-sref=\"rankingReorder({cityId: geoname.id, cuisineId: group[0].cuisineId})\"><i class=\"icon icon-edit\"></i></span></ion-item><restaurant item=rest page={{page}} ng-repeat=\"rest in group track by $index\" show-address=showAddress hide-quickadd=hideQuickadd show-fallback-picture=showFallbackPicture prevent-select=preventSelect></restaurant></div></div>");
}]);

angular.module("js/directives/restaurant/restaurant.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/restaurant/restaurant.html",
    "<div class=\"item-wrapper border-color-cuisine\" ng-style=\"{'border-left-color': '#'+item.color }\"><ion-item ng-click=ctrl.onClick() ng-class=\"{'with-distance': !!distance }\" ng-if=!showQuickadd><div ng-if=!fromWeb class=resto-avatar ng-style=\"{'background-image': 'url(' + ctrl.getBackgroundImageString () + ')'}\"></div><div ng-if=fromWeb class=resto-avatar ng-style=\"{'background-image': 'url(img/thumb_web.png)'}\"></div><div class=\"resto-name text-ellipsis\"><span ng-if=\"item.position != undefined\" ng-style=\"{color: '#'+item.color }\">{{item.position}}.</span> <span>{{item.name}}</span></div><div ng-if=!showAddress class=\"resto-cuisine text-ellipsis\" ng-style=\"{color: '#'+(item.color || item.cuisine.color)}\">{{item.cuisineName || item.cuisine.name}}</div><div ng-if=showAddress class=\"resto-address text-ellipsis\">{{item.geoname ? item.geoname.asciiName + ',' : ''}} {{item.address || item.formattedaddress}}</div><div class=distance ng-if=distance>({{distance}})</div><span ng-if=(!hideQuickadd) class=\"badge icon active ignore-empty\" ng-click=ctrl.toggleQuickadd($event); ng-class=ctrl.getIconClass()></span></ion-item><ion-item ng-if=showQuickadd class=quickadd-block><quickadd ng-if=(!hideQuickadd) restaurant=restaurant page={{page}} extended-version=true></quickadd><span class=\"badge icon\" ng-class=\"{'icon-minus':showQuickadd, 'icon-plus': !showQuickadd}\" ng-click=ctrl.toggleQuickadd($event);><span></span></span></ion-item></div>");
}]);

angular.module("js/directives/review/review-tags-property.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/review/review-tags-property.html",
    "<div><ion-item class=\"review-tags-property no-padding\" ng-if=\"visible || review[field.propertyName].length > 0\" ng-click=edit()><div><div class=\"title-wrapper white-space-normal\"><span class=title>{{ field.title }}</span></div><div class=\"tags-wrapper white-space-normal\"><span class=\"new-tastd-tag tag-group-{{ field.key }}\" ng-repeat=\"tag in review[field.propertyName] track by tag.id\">{{ tag.name }}</span> <span ng-if=\"visible && review[field.propertyName].length === 0\" class=color-gray>{{ field.description }}</span></div></div></ion-item></div>");
}]);

angular.module("js/directives/review/review-text-property.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/review/review-text-property.html",
    "<div><ion-item class=\"review-text-property no-padding\" ng-if=review[field.propertyName] ng-click=edit()><div><div class=\"title-wrapper white-space-normal\"><span class=title>{{ field.title }}</span></div><div class=\"text-wrapper white-space-normal\"><span class=text>{{review[field.propertyName]}}</span></div></div></ion-item></div>");
}]);

angular.module("js/directives/tag/add-tags.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/tag/add-tags.html",
    "<ion-modal-view><ion-header-bar class=\"bar bar-header bar-positive\"><div class=buttons><button class=button ng-click=done()>{{'button.cancel' | translate }}</button></div><h1 class=title>{{'ADD TAGS' | translate}}</h1><div class=buttons><button class=button ng-click=done()>{{'button.done' | translate }}</button></div></ion-header-bar><ion-content class=has-header><tag-selector tags=tags selected-tags=selectedTags enable-add=true></tag-selector></ion-content></ion-modal-view>");
}]);

angular.module("js/directives/tag/tag-list.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/tag/tag-list.html",
    "<div class=tag-list><div ng-if=\"(!tags || tags.length==0) && showButton && enableEdit\" class=add-item-link ng-class=buttonClass ng-click=ctrl.editTags()><div class=\"add-item-icon ion-plus-circled resto-avatar\"></div><div class=add-item-label>{{'Add tags' | translate}}</div></div><div ng-if=\"!showButton && (!tags || tags.length==0) && enableEdit\" ng-click=ctrl.editTags() ng-class=listClass><span class=empty-field>{{\"Add tags\" | translate}}</span> <i class=\"icon icon-edit icon-right\"></i></div><div ng-if=\"tags.length>0\" ng-click=ctrl.editTags() ng-class=listClass><span class=multiple-lines><span ng-repeat=\"group in groupedTags\" class=tag-group><span class=group-name><b>{{group[0].groupName}}</b>:</span> <span ng-repeat=\"tag in group\">{{::tag.name}}{{$last? '' : ', '}}</span></span></span> <i ng-if=enableEdit class=\"icon icon-edit icon-right\"></i></div></div>");
}]);

angular.module("js/directives/tag/tag-selector.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/tag/tag-selector.html",
    "<span class=tag-selector><div ng-repeat=\"(groupId, group) in grouped track by $index\" class=tags-group-wrapper><div class=group-name>{{group.groupName}}</div><div class=tags-group><span class=tag-item ng-class=\"{active: isActive(tag)}\" ng-click=select(tag) ng-repeat=\"tag in group track by $index\"><span class=tag-item-inner>{{tag.name}} <span ng-if=!tag.highlight class=custom></span></span></span> <span ng-if=enableAdd class=\"tag-item tag-add\"><input ng-blur=addTag(group) ng-keyup=\"keyup($event, group)\" ng-focus=\"newItems[groupId].focused=true\" ng-model=newItems[groupId].name ng-class=\"{focused : newItems[groupId].focused}\" name=new-tag placeholder=...></span></div><div><div class=silver-line></div></div></div><div debug-json=tags></div><div debug-json=selectedTags></div></span>");
}]);

angular.module("js/directives/user/user-modal-content.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/user/user-modal-content.html",
    "<ion-item ng-if=\"$pending && !$results.length\"><span translate=searching></span> <span class=position-relative><ion-spinner class=ion-item-spinner></ion-spinner></span></ion-item><ion-item ng-if=$noResult translate=no.results></ion-item><user-signature class=bottom-border ng-repeat=\"user in $results\" ng-click=$choose(user) user=user hide-quick-follow=true current-geoname=$options.currentGeoname></user-signature>");
}]);

angular.module("js/directives/user/user-signature.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/user/user-signature.html",
    "<div class=\"item item-avatar user-signature\"><ion-user-avatar user=user></ion-user-avatar><div class=\"user-info vertical-centered\" ng-class=\"{light : lightTheme}\"><span class=user-name>{{user.fullName}}</span><div class=user-badge ng-if=!currentGeoname><ion-user-score user=user></ion-user-score></div><div ng-if=currentGeoname class=user-badge><ion-user-geoscore ng-show=::currentGeoname user=::user geoname=currentGeoname></ion-user-geoscore>&nbsp;<span class=geoname-info>in {{currentGeoname.formattedName}}</span></div><span ng-if=!hideHeadline class=user-headline>{{user.headline}}</span></div><ion-quickfollow ng-if=\"!hideQuickFollow && (me.id !== user.id)\" user=user me=me post-follow-hook=postFollowHook post-unfollow-hook=postUnfollowHook></ion-quickfollow></div>");
}]);

angular.module("js/directives/wall/wall.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/directives/wall/wall.html",
    "<span><div class=\"wall-element color-oil\" ng-repeat=\"review in reviews\"><div class=wall-inner ng-style=\"{'border-left-color': '#' + review.cuisine.color}\"><div ng-if=!hideSignature><div ng-if=\"$index === 0 || (reviews[$index-1].user.id !== review.user.id)\" class=wall-user><user-signature user=review.user me=me hide-quick-follow=true class=no-item ui-sref=\"user({userId : review.user.id })\"></user-signature></div></div><div class=wall-event><span ng-if=hideSignature><span ng-if=\"me.id === review.user.id\">{{'notification.you_added' | translate}}</span> <span ng-if=\"me.id !== review.user.id\">{{review.user.firstName}} {{'notification.added' | translate}}</span></span> <span ng-if=!hideSignature>{{ 'notification.added' | translate }}</span> <a ui-sref=\"restaurantView({restaurantId: review.restaurant.id})\">{{::review.restaurant.name}}</a> in {{::review.geoname.formattedName}}<br><span class=\"color-gray font-size-xsmall\" am-time-ago=::review.created></span></div><div ng-if=review.photos.length class=space-10></div><div class=clearfix><dynlayout-gallery ng-if=review.photos.length photos=review.photos user=review.user></dynlayout-gallery></div><p class=wall-position ng-style=\"{'color': '#' + review.cuisine.color}\">{{::review.position}}{{::review.position | ordinal}} {{'restaurant.place_in' | translate}} {{::review.cuisine.name}}</p><tag-list tags=review.tags list-class=\"'wall-tags'\"></tag-list><p ng-if=\"review.comment !== ''\" class=wall-comment>{{::review.comment}}</p><div class=divider><div class=silver-line></div></div><quickadd restaurant=review.restaurant page={{page}} extended-version=true></quickadd></div></div><ion-infinite-scroll ng-if=reviews.$metadata.hasNextPage on-infinite=ctrl.loadMore() distance=1%></ion-infinite-scroll></span>");
}]);

angular.module("js/modals/address/address-modal.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/modals/address/address-modal.html",
    "<ion-modal-view><ion-header-bar class=\"bar bar-header bar-positive\"><button class=\"button button-clear button-primary\" ng-click=cancel() translate>button.cancel</button><h1 class=title>{{ 'modal.address.title' | translate }}</h1><button ng-if=chosenAddress class=\"button button-clear button-primary\" ng-click=done() translate>button.done</button></ion-header-bar><ion-header-bar class=\"header-modal-address bar-subheader bar-positive no-padding height-auto\"><div class=header-modal-address-inner><div class=position-relative><div class=\"fake-modal-input top-input\" ng-if=!editing ng-click=edit()><div class=fake-modal-input-inner>{{ getInputLabel() }}</div></div><label ng-if=editing class=\"real-modal-input item item-input search-box\"><input type=search focus-me=editing placeholder=\"{{ ('search' ) | translate }}\" autocomplete=off autocorrect=off ng-change=search() autocapitalize=off spellcheck ng-model=parameters.name> <i class=\"icon ion-search placeholder-icon\"></i></label></div></div></ion-header-bar><div ng-show=!editing id=modal-address-map></div><div ng-click=centerOnMe() class=\"icon ion-navigate center-on-me center-on-me-address\"></div><ion-content class=\"padding has-search-header\" ng-click=stopEdit()><list-loader loading=loading></list-loader><ion-list ng-show=editing><ion-item ng-repeat=\"address in addresses\" ng-click=choose(address)><p><span style=\"padding-right: 8px\"><i ng-if=!address.streetNumber class=\"icon icon-circle-close color-yellow-star\"></i> <i ng-if=address.streetNumber class=\"icon icon-circle-check color-tastd-green\"></i></span> {{ address.formattedAddress }}</p></ion-item></ion-list></ion-content><div class=map-pan-loading><div class=bar></div></div></ion-modal-view>");
}]);

angular.module("js/modals/autocomplete/autocomplete-modal.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/modals/autocomplete/autocomplete-modal.html",
    "<ion-modal-view><ion-header-bar class=\"bar bar-header bar-positive\"><h1 class=title>{{ $options.title || 'Search' }}</h1><button class=\"button button-clear button-primary\" ng-click=$cancel() translate>button.cancel</button></ion-header-bar><ion-header-bar class=\"bar-subheader bg-silver no-padding height-auto\"><div class=padding><label class=\"item item-input search-box\"><input type=search placeholder=\"{{ ( $options.searchPlaceholder || 'search' ) | translate }}\" autocomplete=off autocorrect=off autocapitalize=off spellcheck ng-model=$options.$q> <i class=\"icon ion-search placeholder-icon\"></i></label></div></ion-header-bar><ion-content class=\"padding has-search-header\"><div debug-json=$results></div><button ng-if=$options.button class=\"button button-positive button-block bg-gray\" ng-click=$buttonCallback()>{{$options.button.title | translate}}</button><ion-list class=padless ng-class=$options.listClass ng-include=$options.templateUrl></ion-list><ion-infinite-scroll ng-if=\"$options.infiniteScroll && $results.$metadata.hasNextPage\" on-infinite=$loadMore() distance=1%></ion-infinite-scroll></ion-content></ion-modal-view>");
}]);

angular.module("js/modals/cuisine/cuisine-modal.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/modals/cuisine/cuisine-modal.html",
    "<ion-modal-view><ion-header-bar class=\"bar bar-header bar-positive\"><button class=\"button button-clear button-primary\" ng-click=cancel() translate>button.cancel</button><h1 class=title>Search</h1></ion-header-bar><ion-header-bar class=\"bar-subheader bg-silver no-padding height-auto\"><div class=standard-search-box><label class=\"item item-input search-box\"><input type=search placeholder=\"{{ ('search' ) | translate }}\" autocomplete=off autocorrect=off autocapitalize=off spellcheck ng-model=parameters.name> <i class=\"icon ion-search placeholder-icon\"></i></label></div></ion-header-bar><ion-content><list-loader loading=loading></list-loader><ion-list><ion-item class=no-padding ng-repeat=\"cuisine in cuisines | filter:{ name: parameters.name}\"><cuisine disabled ng-click=choose(cuisine) cuisine-model=cuisine></cuisine></ion-item></ion-list></ion-content></ion-modal-view>");
}]);

angular.module("js/modals/cuisine/multiple-cuisines-modal.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/modals/cuisine/multiple-cuisines-modal.html",
    "<ion-modal-view class=multiple-cuisines-modal><ion-header-bar class=\"bar bar-header bar-positive\"><button class=\"button button-clear button-primary\" ng-click=cancel() translate>button.cancel</button><h1 class=title>Search</h1><button class=\"button button-clear button-primary\" ng-click=done() translate>button.done</button></ion-header-bar><ion-content class=\"padding has-header\"><ion-list><ion-item class=\"no-padding select-all-cuisines\" ng-click=selectAll()><div><div class=cuisine-avatar ng-class=\"{'disabled' : !isAllSelected()}\"><i class=icon ng-class=\"!isAllSelected() ? {'icon-cuisine':true}: {'icon-checkmark-round':true}\"></i></div><div class=\"cuisine-name ng-binding\" translate>filter.all_cuisines</div></div></ion-item></ion-list><list-loader loading=loading></list-loader><ion-list><ion-item class=no-padding ng-repeat=\"cuisine in cuisines\" ng-click=toggle(cuisine)><div class=cuisine><div class=cuisine-avatar ng-style=\"!cuisine.selected? {} : {background:'#'+ cuisine.color }\"><i ng-class=\"!cuisine.selected || icon ? {'icon-cuisine':true}: {'icon-checkmark-round':true}\" class=icon></i></div><div class=cuisine-name>{{ cuisine.nameÂ }}</div></div></ion-item></ion-list></ion-content></ion-modal-view>");
}]);

angular.module("js/modals/fields/input-date-modal.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/modals/fields/input-date-modal.html",
    "<ion-modal-view><ion-header-bar class=\"bar bar-header bar-positive\"><button class=\"button button-clear button-primary\" ng-click=cancel() translate>button.cancel</button><h1 class=title>Edit</h1><button class=\"button button-clear button-primary\" ng-click=done() translate>button.done</button></ion-header-bar><ion-content><div class=padding><h3 class=modal-field-title>{{ title }}</h3><form id=inputDateModalForm><label><input placeholder=yyyy-MM-dd class=modal-input-text type=date name=modalDateInput ng-model=parameters.text> <span class=error ng-show=inputDateModalForm.modalDateInput.$error.date>Not a valid date!</span></label></form></div></ion-content></ion-modal-view>");
}]);

angular.module("js/modals/fields/input-text-modal.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/modals/fields/input-text-modal.html",
    "<ion-modal-view><ion-header-bar class=\"bar bar-header bar-positive\"><button class=\"button button-clear button-primary\" ng-click=cancel() translate>button.cancel</button><h1 class=title>Edit</h1><button class=\"button button-clear button-primary\" ng-click=done() translate>button.done</button></ion-header-bar><ion-content><div class=padding><h3 class=modal-field-title>{{ title }}</h3><form><label><input class=modal-input-text ng-model=parameters.text></label></form></div></ion-content></ion-modal-view>");
}]);

angular.module("js/modals/fields/textarea-modal.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/modals/fields/textarea-modal.html",
    "<ion-modal-view><ion-header-bar class=\"bar bar-header bar-positive\"><button class=\"button button-clear button-primary\" ng-click=cancel() translate>button.cancel</button><h1 class=title>Edit</h1><button class=\"button button-clear button-primary\" ng-click=done() translate>button.done</button></ion-header-bar><ion-content><div class=padding><h3 class=modal-field-title>{{ title }}</h3><form><label><textarea class=modal-textarea ng-model=parameters.text></textarea></label></form></div></ion-content></ion-modal-view>");
}]);

angular.module("js/modals/filters/filters-modal.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/modals/filters/filters-modal.html",
    "<ion-modal-view class=filters-modal><ion-nav-bar class=\"bar bar-positive\"><ion-nav-title>{{ 'home.filter' | translate }}</ion-nav-title><ion-nav-buttons side=left replace=true><a ng-click=cancel() class=\"button button-clear\">{{ 'button.cancel' | translate }}</a></ion-nav-buttons><ion-nav-buttons side=right replace=true><a ng-click=done() class=\"button button-clear\">{{ 'button.done' | translate }}</a></ion-nav-buttons></ion-nav-bar><ion-content class=\"has-header has-footer\"><div class=\"padding color-oil font-size-small\"><div ng-click=chooseCuisines()><div><span class=header-text>{{'home.filter.cuisine' | translate}}</span> <span class=color-gray>({{'button.tap.to.change' | translate}})</span></div><div class=space-10></div><div ng-if=getCuisinesString() class=\"padding cuisines-list padding-top-10\">{{ getCuisinesString() }}</div><div ng-if=!getCuisinesString() class=\"padding cuisines-list padding-top-10\">{{ 'filter.all_cuisines' | translate }}</div></div><div class=\"divider padding-bt-10\"><div class=slate-blue-line></div></div><p translate class=\"no-margin header-text\">home.average_cost_per_person</p><div class=\"padding-top padding-bottom\"><rzslider rz-slider-floor=0 rz-slider-ceil=200 rz-slider-step=1 rz-slider-model=filters.minCost rz-slider-high=filters.maxCost rz-slider-translate=translate></rzslider></div><div class=\"divider padding-top-10\"><div class=slate-blue-line></div></div></div><p class=\"no-margin padding-lr-10 header-text\">{{ 'home.filter.tags' | translate }}</p><tag-selector tags=filters.proposedTags selected-tags=filters.tags></tag-selector></ion-content><ion-footer-bar class=padless><button ng-click=resetAll() class=\"button button-block bg-gray\">{{\"button.reset_all\" | translate}}</button></ion-footer-bar></ion-modal-view>");
}]);

angular.module("js/modals/geo-guru/geo-guru-modal.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/modals/geo-guru/geo-guru-modal.html",
    "<ion-modal-view><ion-header-bar class=\"bar bar-header bar-positive\"><button class=\"button button-clear button-primary\" ng-click=cancel()>{{ 'button.cancel' | translate }}</button> <button class=button ng-if=\"!editingGeoname && !editingGuru\" ng-click=done()>{{ 'button.done' | translate }}</button></ion-header-bar><ion-header-bar class=\"bar-subheader bar-positive no-padding height-auto\"><div class=geo-guru-modal-form-wrapper><div class=geo-guru-modal-form-wrapper-inner><div class=\"fake-modal-input top-input\" ng-if=!editingGeoname ng-click=editGeoname()><div class=fake-modal-input-inner>{{ result.geoname.asciiName }}</div></div><label ng-if=editingGeoname class=\"real-modal-input top-input item item-input search-box\"><input type=search focus-me=editingGeoname placeholder=\"{{ ('search' ) | translate }}\" autocomplete=off autocorrect=off autocapitalize=off ng-change=searchGeoname() spellcheck ng-model=parameters.geoname> <i class=\"icon ion-search placeholder-icon\"></i></label><div class=\"fake-modal-input bottom-input\" ng-if=!editingGuru ng-click=editGuru()><div class=fake-modal-input-inner>{{ result.guru.fullName || ('user.all_gurus'| translate) }}</div></div><label ng-if=editingGuru class=\"real-modal-input bottom-input item item-input search-box\"><input type=search focus-me=editingGuru placeholder=\"{{ ('search' ) | translate }}\" autocomplete=off autocorrect=off autocapitalize=off ng-change=searchGuru() spellcheck ng-model=parameters.guru> <i class=\"icon ion-search placeholder-icon\"></i></label></div></div></ion-header-bar><ion-content class=\"padding top-0\"><div class=geo-modal-guru-top-margin></div><ion-list ng-if=editingGeoname><ion-item ng-repeat=\"geoname in geonames\" ng-click=chooseGeoname(geoname)>{{geoname.formattedName}}</ion-item></ion-list><ion-list ng-if=editingGuru><ion-item ng-if=\"gurus.length > 0\" ng-click=chooseAllGurus()>{{ 'user.all_gurus' | translate }}</ion-item><user-signature class=bottom-border ng-repeat=\"guru in gurus\" hide-quick-follow=true ng-click=chooseGuru(guru) user=guru current-geoname=result.geoname></user-signature><div ng-if=\"gurus.length === 0 && !guruLoading\"><p>{{ 'modal.geo_guru.no_gurus.text' | translate }}</p><button class=\"button button-block button-positive bg-gray\" ng-click=addNewGuru()>{{'modal.geo_guru.no_gurus.button' | translate}}</button></div></ion-list><list-loader loading=isLoading()></list-loader><ion-infinite-scroll ng-if=thereIsNextPage() on-infinite=loadMore() distance=1%></ion-infinite-scroll></ion-content></ion-modal-view>");
}]);

angular.module("js/modals/geoname/geoname-modal.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/modals/geoname/geoname-modal.html",
    "<ion-modal-view><ion-header-bar class=\"bar bar-header bar-positive\"><button class=\"button button-clear button-primary\" ng-click=cancel() translate>button.cancel</button><h1 class=title>Search</h1></ion-header-bar><ion-header-bar class=\"bar-subheader bg-silver no-padding height-auto\"><div class=standard-search-box><label class=\"item item-input search-box\"><input type=search placeholder=\"{{ ('search' ) | translate }}\" autocomplete=off autocorrect=off autocapitalize=off ng-change=search() spellcheck ng-model=parameters.name> <i class=\"icon ion-search placeholder-icon\"></i></label></div></ion-header-bar><ion-content><list-loader loading=loading></list-loader><ion-list><ion-item ng-if=allCities ng-click=chooseAll()>{{ 'button.all_cities' | translate}}</ion-item><ion-item ng-repeat=\"geoname in geonames\" ng-click=choose(geoname)>{{geoname.formattedName}}</ion-item></ion-list><ion-infinite-scroll ng-if=geonames.$metadata.hasNextPage on-infinite=loadMore() distance=1%></ion-infinite-scroll></ion-content></ion-modal-view>");
}]);

angular.module("js/modals/review/review-extra-fields-modal.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/modals/review/review-extra-fields-modal.html",
    "<ion-modal-view><ion-header-bar class=\"bar bar-header bar-positive\"><button class=\"button button-clear button-primary\" ng-click=cancel()>{{ 'button.cancel' | translate }}</button><h1 class=title>{{ 'modal.review.add_field' | translate }}</h1><button class=\"button button-clear button-primary\" ng-click=done()>{{ 'button.done' | translate }}</button></ion-header-bar><ion-content><ion-list><div ng-repeat=\"category in reviewExtraFields.categories\"><div ng-if=\"category.required===false\"><div class=extra-field-title>{{ category.name }}</div><ion-item class=extra-field-item ng-class=\"{ 'active': field.active}\" ng-repeat=\"field in category.fields\" ng-click=toggle(field)><span class=title>{{ field.title }}</span> <span class=description>{{ field.description }}</span> <span class=\"sign plus\">+</span> <span class=\"sign minus\">-</span></ion-item></div></div></ion-list></ion-content></ion-modal-view>");
}]);

angular.module("js/modals/tag/tag-modal.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/modals/tag/tag-modal.html",
    "<ion-modal-view><ion-header-bar class=\"bar bar-header bar-positive\"><button class=\"button button-clear button-primary\" ng-click=cancel() translate>button.cancel</button><h1 class=title>Search</h1><button class=\"button button-clear button-primary\" ng-click=done() translate>button.done</button></ion-header-bar><ion-content><div class=padding><list-loader loading=loading></list-loader><span class=new-tastd-tag ng-class=\"{ 'selected': isSelected(tag) }\" ng-click=toggle(tag) ng-repeat=\"tag in tags track by tag.id\">{{ tag.name }}</span><div ng-if=canCreateNewTags><div class=space-20></div><div class=gray-line></div><div class=space-20></div><p>{{ 'modal.tag.new_tag' | translate }}</p><div class=\"list list-inset\"><label class=\"item item-input\"><input placeholder=\"{{ 'modal.tag.new_tag.placeholder' | translate }}\" name=newTag class=input ng-model=newTag.name></label></div><div ng-if=\"newTag.name.trim() !== ''\" ng-click=saveNewTag() class=\"button button-block\">{{ 'button.save' | translate }}</div></div></div></ion-content></ion-modal-view>");
}]);

angular.module("js/modals/user/multiple-users-modal.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/modals/user/multiple-users-modal.html",
    "<ion-modal-view><ion-header-bar class=\"bar bar-header bar-positive\"><button class=\"button button-clear button-primary\" ng-click=cancel() translate>button.cancel</button><h1 class=title>Search</h1><button class=\"button button-clear button-primary\" ng-click=done() translate>button.done</button></ion-header-bar><ion-header-bar class=\"bar-subheader bg-silver no-padding height-auto\"><div class=standard-search-box><label class=\"item item-input search-box\"><input type=search placeholder=\"{{ ('search' ) | translate }}\" autocomplete=off autocorrect=off autocapitalize=off ng-change=search() spellcheck ng-model=parameters.name> <i class=\"icon ion-search placeholder-icon\"></i></label></div></ion-header-bar><ion-content><list-loader loading=loading></list-loader><ion-list><ion-item ng-click=reset()>{{ 'button.reset' | translate}}</ion-item><div class=user-select-wrapper ng-class=\"{ 'selected': isSelected(user) }\" ng-repeat=\"user in users\" ng-click=toggle(user)><user-signature user=user hide-quick-follow=true></user-signature><div class=user-selected-overlay><i class=\"icon-checkmark-round icon\"></i></div></div></ion-list><ion-infinite-scroll ng-if=users.$metadata.hasNextPage on-infinite=loadMore() distance=1%></ion-infinite-scroll></ion-content></ion-modal-view>");
}]);

angular.module("js/popups/duplicated-restaurant-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/popups/duplicated-restaurant-popup.html",
    "<p class=font-size-base>{{ 'restaurant.duplicated_text' | translate }}</p><div class=space-20></div><div class=list><div class=\"item item-icon-right\" ng-repeat=\"restaurant in duplicatedRestaurants\" ng-click=chooseRestaurant(restaurant.id)><h2 class=font-size-base>{{ restaurant.name }}</h2><p class=font-size-small>{{ restaurant.address }}</p><i class=\"icon icon-chevron-right\"></i></div></div>");
}]);

angular.module("js/services/security/signin/email-signin.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/services/security/signin/email-signin.html",
    "<form name=emailSignInForm ng-controller=\"EmailSigninCtrl as emailSigninCtrl\" novalidate ionic-validate-on-submit=emailSigninCtrl.login()><div class=list><label class=\"item item-input\"><input name=email type=email placeholder=\"{{ 'user.email' | translate }}\" ng-model=emailSigninCtrl.credential.email ng-required=true></label><label class=\"item item-input\"><input name=password type=password placeholder=\"{{Â 'user.password' | translate }}\" ng-model=emailSigninCtrl.credential.password ng-required=true></label></div><div class=\"padding-bottom text-right\"><a translate class=secondary-link ng-click=emailSigninCtrl.goForgot()>user.forgot_password</a></div></form>");
}]);

angular.module("js/services/security/signin/facebook-signin.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/services/security/signin/facebook-signin.html",
    "<div ng-controller=\"FacebookSignInCtrl as facebookSignInCtrl\"><button class=\"button button-facebook block-button\" ng-click=facebookSignInCtrl.login() type=button translate=button.login_with_facebook></button></div>");
}]);

angular.module("js/services/security/signin/signin-modal.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/services/security/signin/signin-modal.html",
    "<ion-modal-view><ion-header-bar class=\"bar bar-header bar-positive\"><h1 class=title translate>Login</h1><button class=\"button button-clear button-primary\" ng-click=modal.cancel() translate>button.cancel</button></ion-header-bar><ion-content class=padding ng-controller=\"SigninModalCtrl as signinModalCtrl\"><div class=\"padding text-center\" ng-include=\"'js/services/security/signin/facebook-signin.html'\"></div><div class=\"padding-horizontal padding-bottom\"><div class=\"text-divider color-oil\" translate>or</div></div><div class=padding-horizontal ng-include=\"'js/services/security/signin/email-signin.html'\"></div></ion-content></ion-modal-view>");
}]);

angular.module("js/services/security/signup/facebook-signup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/services/security/signup/facebook-signup.html",
    "<div ng-controller=\"FacebookSignUpCtrl as facebookSignUpCtrl\"><button class=\"button button-facebook block-button\" ng-click=facebookSignUpCtrl.signup() type=button translate=button.sign_up_with_facebook></button></div>");
}]);

angular.module("js/services/utility/debug-json-directive.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/services/utility/debug-json-directive.html",
    "<div class=debug-json ng-if=DebugJson.options.debug style=\"margin-top: 8px; margin-bottom:8px\"><a class=debug-json-toggle ng-click=\"hide = !hide\"><span ng-show=hide>show debug for \"{{ label }}\"</span> <span ng-show=!hide>hide debug for \"{{ label }}\"</span><br></a><div ng-hide=hide><div class=debug-json-content-info><span ng-bind=contentInfo.__toString()></span></div><div class=debug-json-content><pre>{{ content | customJsonFilter }}</pre></div></div></div>");
}]);

angular.module("js/states/invite/invite-home.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/invite/invite-home.html",
    "<ion-view><ion-content scroll=true><div class=invite-image-wrapper><img src=\"img/become-guru.jpg\"></div><div class=score-legend><article><h1>+2 <i class=\"icon icon-crown\"></i></h1><p translate>invite.follower_rule</p></article><article><h1>+5 <i class=\"icon icon-crown\"></i></h1><p translate>invite.common_restaurants_rule</p></article></div><div style=\"padding: 0 15px\"><button class=\"button button-block bg-gray\" ng-click=ctrl.publishOnFb()><span translate>button.share.tastd</span></button></div></ion-content></ion-view>");
}]);

angular.module("js/states/landing/landing.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/landing/landing.html",
    "<ion-view hide-nav-bar=true><ion-content scroll=false id=landing-content><div class=landing-logo-wrapper><div id=landing-logo></div></div><div class=display-table><div class=\"display-cell center\"><div id=landing-buttons><div class=space-50></div><div ng-click=ctrl.login() class=\"composite-button facebook-button\"><i class=\"icon icon-facebook\"></i> <span class=vertical-line></span> <span class=label>{{ 'button.continue_with_facebook' | translate }}</span></div><div class=space-10></div><div ui-sref=signup class=\"composite-button transparent-dark-button\"><i class=\"icon icon-email\"></i> <span class=vertical-line></span> <span class=label>{{ 'button.signup_using_email' | translate }}</span></div></div></div></div><div class=landing-bottom-buttons><div class=transparent-button ui-sref=signin><span>{{'button.have_an_account' | translate }}</span> <span class=color-tastd-green>{{'button.login' | translate }}</span></div></div></ion-content></ion-view>");
}]);

angular.module("js/states/map/map.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/map/map.html",
    "<ng-include src=\"'js/states/private/filtersbar.html'\"></ng-include><ion-view class=mapList><div ng-class=\"{'filter-list-active': ctrl.flagParametersBag.isDirty()}\"><ion-content padding=false class=map-has-header><div ng-if=!ctrl.mapMode><ion-refresher pulling-text=\"Pull to refresh...\" on-refresh=ctrl.doRefresh()></ion-refresher><list-loader loading=ctrl.loading></list-loader><div class=map-list-no-results ng-if=!ctrl.loading><div class=no-results-inner ng-if=\"ctrl.flags.length === 0 && ctrl.noResultMessageIsFilter()\"><div><p>{{'home.no_result_with_filters' | translate}}</p></div></div><div class=no-results-inner ng-if=\"ctrl.flags.length === 0 && !ctrl.noResultMessageIsFilter()\"><div><p>{{'home.no_result_without_filters' | translate}}</p><button class=\"button button-block bg-gray\" ui-sref=userSearch>{{ 'home.no_result_without_filters.button' | translate }}</button></div></div></div><ion-list ng-if=ctrl.entered can-swipe=false class=\"padless list-restaurants\"><restaurant-list page={{ctrl.page}} list=ctrl.flags reorder=ctrl.isReordable geoname=ctrl.flagParametersBag.geoname show-address=true></restaurant-list></ion-list><ion-infinite-scroll ng-if=ctrl.flags.$metadata.hasNextPage on-infinite=ctrl.loadMoreItems() distance=1%></ion-infinite-scroll></div></ion-content></div></ion-view>");
}]);

angular.module("js/states/notification/notification.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/notification/notification.html",
    "<ion-view><ion-content><ion-refresher pulling-text=\"Pull to refresh...\" on-refresh=ctrl.doRefresh()></ion-refresher><div ng-if=\"!ctrl.loading && ctrl.pushMessages.length === 0\" class=padding><p class=color-oil>{{ 'notification.no_result' | translate }}</p></div><list-loader loading=ctrl.loading></list-loader><ion-list><notification ng-repeat=\"pushMessage in ctrl.pushMessages\" push-message=pushMessage></notification></ion-list><ion-infinite-scroll ng-if=ctrl.pushMessages.$metadata.hasNextPage on-infinite=ctrl.loadMore() distance=1%></ion-infinite-scroll></ion-content></ion-view>");
}]);

angular.module("js/states/on-boarding/on-boarding-friends.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/on-boarding/on-boarding-friends.html",
    "<ion-view class=quick-add-gurus><ion-content><ion-list class=\"padless new-list list-users\"><div class=\"text-center padding color-oil bg-white\" ng-show=\"!ctrl.friends.length && !ctrl.friendsLoading\" translate=on_boarding.no_facebook_friends></div><list-loader loading=ctrl.friendsLoading></list-loader><user-signature class=item-icon-right ng-repeat=\"user in ctrl.friends\" user=user></user-signature></ion-list></ion-content><button ng-click=ctrl.done() class=\"button standard-bottom-button\">{{ 'button.next' | translate }}</button></ion-view>");
}]);

angular.module("js/states/on-boarding/on-boarding-intro.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/on-boarding/on-boarding-intro.html",
    "<ion-view class=on-boarding-intro><ion-content><div class=table-wrapper><table><tr><td class=vertical-align-middle><h1>{{ 'on_boarding.intro.title' | translate }}<br>{{ ctrl.name }}</h1><img src=img/tutorial01.png><p>{{ 'on_boarding.intro.description' | translate }}</p></td></tr></table></div><button ng-click=ctrl.next() class=\"button standard-bottom-button\">{{ 'button.next' | translate }}</button></ion-content></ion-view>");
}]);

angular.module("js/states/on-boarding/on-boarding-suggestions.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/on-boarding/on-boarding-suggestions.html",
    "<ion-view class=quick-add-restaurants><ion-content class=has-footer><div class=\"text-center padding color-oil\" ng-show=\"!ctrl.flags.length && !ctrl.loading\" translate=on_boarding.no_restaurants></div><ion-list class=\"padless list-restaurants\"><restaurant item=flag page=on_boarding ng-repeat=\"flag in ctrl.flags\" show-address=true prevent-select=true></restaurant></ion-list><ion-infinite-scroll ng-if=ctrl.flags.$metadata.hasNextPage on-infinite=ctrl.loadMore() distance=1%></ion-infinite-scroll></ion-content><button ng-click=ctrl.done() class=\"button standard-bottom-button\">{{ 'button.next' | translate }}</button></ion-view>");
}]);

angular.module("js/states/on-boarding/on-boarding-top-gurus.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/on-boarding/on-boarding-top-gurus.html",
    "<ion-view class=quick-add-gurus><ion-content><ion-list class=\"padless new-list list-users\"><div class=\"text-center padding color-oil bg-white\" ng-show=\"!ctrl.gurus.length && !ctrl.loading\" translate=on_boarding.no_gurus></div><list-loader loading=ctrl.loading></list-loader><user-signature class=item-icon-right ng-repeat=\"user in ctrl.gurus\" user=user current-geoname=ctrl.me.geoname></user-signature></ion-list><div debug-json=ctrl.gurus></div><ion-infinite-scroll ng-if=ctrl.gurus.$metadata.hasNextPage on-infinite=ctrl.loadMore() distance=1%></ion-infinite-scroll></ion-content><button ng-click=ctrl.done() class=\"button standard-bottom-button\">{{ 'button.next' | translate }}</button></ion-view>");
}]);

angular.module("js/states/on-boarding/on-boarding-top-restaurants.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/on-boarding/on-boarding-top-restaurants.html",
    "<ion-view class=quick-add-restaurants><div class=\"bar-subheader-inside-view bg-silver\"><label class=\"item item-input search-box\"><input type=search placeholder={{ctrl.placeholder}} ng-change=ctrl.search() autocomplete=off autocorrect=off autocapitalize=off spellcheck ng-model=ctrl.searchCriteria.name> <i class=\"icon ion-search placeholder-icon\"></i></label></div><ion-content class=\"has-footer has-subheader-inside-view\"><div ng-if=\"!ctrl.restaurants.length && !ctrl.loading\"><div class=\"text-center padding color-oil\" ng-if=\"ctrl.searchCriteria.name.trim() === ''\" translate=on_boarding.no_restaurants></div><ion-list ng-if=\"ctrl.searchCriteria.name.trim() !== ''\"><ion-item class=\"bg-silver color-gray\"><span>{{ 'no.results' | translate }}</span></ion-item></ion-list></div><ion-list class=\"padless list-restaurants\"><restaurant item=rest page=on_boarding ng-repeat=\"rest in ctrl.restaurants\" show-address=true prevent-select=true></restaurant></ion-list><ion-infinite-scroll ng-if=ctrl.restaurants.$metadata.hasNextPage on-infinite=ctrl.loadMore() distance=1%></ion-infinite-scroll></ion-content><button ng-click=ctrl.done() class=\"button standard-bottom-button\">{{ 'button.next' | translate }}</button></ion-view>");
}]);

angular.module("js/states/private/filtersbar.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/private/filtersbar.html",
    "<div class=\"bar filters-bar\" ng-class=\"{'filter-list-active':ctrl.flagParametersBag.isDirty()}\"><div class=filters-bar-inner><div ng-click=ctrl.toggleReviewFilter() ng-class=\"{ 'active': ctrl.flagParametersBag.reviewedBy }\" class=\"filter-bar-button favourite-button\"><i class=\"icon icon-heart\"></i></div><div ng-click=ctrl.toggleWishFilter() ng-class=\"{ 'active': ctrl.flagParametersBag.wishedBy }\" class=\"filter-bar-button wishlist-button\"><i class=\"icon icon-bookmark\"></i></div><div ng-click=ctrl.openFiltersModal() class=\"filter-bar-button filter-button\"><i class=\"icon icon-filter\"></i></div><div class=filters-recap-wrapper>{{ ctrl.flagParametersBag.getFiltersLabel() }}</div></div></div>");
}]);

angular.module("js/states/private/headerbar.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/private/headerbar.html",
    "<div class=main-header><div class=left-block><back class=\"header-button navbar-back-button\"></back><div class=\"header-button navbar-settings-button\" ui-sref=settings><i class=\"icon icon-settings\"></i></div></div><div class=center-block><div class=\"header-title navbar-page-title\">{{ layoutManager.title }}</div><div ng-click=changeGeoGuru() class=\"header-title navbar-geo-guru\"><div class=navbar-geo-guru-inner>{{ flagParametersBag.getGeoGuruLabel() }}</div></div><div class=\"header-title navbar-ranking-title\"><div class=geoname>{{ flagParametersBag.getGeonameTitle() }}</div><div class=guru>{{ flagParametersBag.getGuruTitle() }}</div></div></div><div class=right-block><div class=\"header-button navbar-done-button\" ng-click=done()>{{ 'button.done' | translate }}</div><div class=\"header-button navbar-share-button\" ng-click=share()><i class=\"icon icon-share\"></i></div><div class=\"header-button navbar-edit-button\" ng-click=edit()><i class=\"icon icon-edit\"></i></div><div class=\"header-button navbar-map-button\" ng-click=map()><i ng-if=!mapMode class=\"icon icon-map\"></i> <i ng-if=mapMode class=\"icon icon-list\"></i></div><div class=\"header-button navbar-notification-button\" ui-sref=notifications><div ng-if=\"notificationBadge.counter > 0\" class=notification-badge-counter>{{notificationBadge.counter}}</div><i class=\"icon icon-notifications\"></i></div></div></div>");
}]);

angular.module("js/states/private/map.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/private/map.html",
    "<div class=map-global-wrapper><div class=map-fake-shadow></div><div id=map data-tap-disabled=true></div><ion-spinner icon=android id=map-spinner class=spinner-light ng-if=mapIsLoading></ion-spinner><div ng-click=centerOnMe() class=\"icon ion-navigate center-on-me\"></div></div>");
}]);

angular.module("js/states/private/menu.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/private/menu.html",
    "<div class=main-menu><div class=\"main-menu-button main-menu-news\" ui-sref=wall><i class=\"icon icon-news\"></i></div><div class=\"main-menu-button main-menu-restaurants\" ui-sref=map><i class=\"icon icon-tips\"></i></div><div class=\"main-menu-button rounded-icon main-menu-add\" ui-sref=restaurantSearch><i class=\"icon icon-plus\"></i></div><div class=\"main-menu-button main-menu-gurus\" ui-sref=userSearch><i class=\"icon icon-add-gurus\"></i></div><div class=\"main-menu-button main-menu-profile\" ui-sref=me><i class=\"icon icon-profile\"></i></div></div>");
}]);

angular.module("js/states/private/private.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/private/private.html",
    "<div class=private-state><ng-include src=\"'js/states/private/headerbar.html'\"></ng-include><ion-nav-view class=ion-view-container-with-extra-bar animation=slide-left-right></ion-nav-view><flash-message></flash-message><ng-include src=\"'js/states/private/map.html'\"></ng-include><ng-include src=\"'js/states/private/menu.html'\"></ng-include></div>");
}]);

angular.module("js/states/public/public.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/public/public.html",
    "<ion-nav-bar class=bar-positive><ion-nav-buttons side=left><back id=backButton></back></ion-nav-buttons></ion-nav-bar><ion-nav-view animation=slide-left-right></ion-nav-view><flash-message></flash-message>");
}]);

angular.module("js/states/ranking/ranking-reorder.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/ranking/ranking-reorder.html",
    "<ion-view class=ranking-view><ion-header-bar class=\"bar-subheader bar-positive subheader-cuisine top-0\" align-title=left style=\"background-color: #{{ ctrl.cuisine.color }}\"><h1 class=title>{{ctrl.cuisine.name}}</h1></ion-header-bar><ion-content class=has-subheader-inside-view><ion-spinner class=page-spinner ng-if=ctrl.pageLoading></ion-spinner><div class=\"padding text-center color-oil\" ng-if=!ctrl.ranking.length>{{ 'ranking.reorder.no_results' | translate }}</div><ion-list ng-if=ctrl.ranking.length show-reorder=ctrl.view.showItemReorder class=\"padless list-restaurants\"><ion-item class=transparent-reorder ng-repeat=\"review in ctrl.ranking track by review.id\"><div class=resto-avatar ng-style=\"{'background-image': 'url({{review.restaurant.thumb}})'}\"></div><div class=resto-name>{{review.restaurant.name | limitTo: 18}}{{review.restaurant.name.length > 18 ? '..' : ''}}</div><div class=resto-address>{{review.restaurant.address}}</div><ion-reorder-button class=ion-navicon on-reorder=\"ctrl.moveItem(review, $fromIndex, $toIndex)\"></ion-reorder-button><span class=\"badge badge-assertive restaurant-position-badge\" ng-if=review.position style=\"background-color: #{{ ::review.cuisine.color }}\">{{review.position}}</span></ion-item></ion-list><ion-infinite-scroll ng-if=ctrl.ranking.$metadata.hasNextPage on-infinite=ctrl.loadMore() distance=1%></ion-infinite-scroll></ion-content></ion-view>");
}]);

angular.module("js/states/restaurant/restaurant-create.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/restaurant/restaurant-create.html",
    "<ion-view class=restaurant-create><ion-content><list-loader loading=ctrl.loading></list-loader><restaurant-edit ng-if=ctrl.restaurant hide-photo=true restaurant=ctrl.restaurant form=ctrl.form cuisines=ctrl.cuisines></restaurant-edit></ion-content></ion-view>");
}]);

angular.module("js/states/restaurant/restaurant-edit.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/restaurant/restaurant-edit.html",
    "<ion-view class=restaurant-edit><ion-content><div ng-if=ctrl.restaurant><restaurant-edit form=ctrl.form restaurant=ctrl.restaurant cuisines=ctrl.cuisines></restaurant-edit></div><div class=space></div><button class=\"button button-positive button-block bg-gray\" ng-click=ctrl.form.execIfValid(ctrl.save)>save</button><div style=\"height: 44px\"></div></ion-content></ion-view>");
}]);

angular.module("js/states/restaurant/restaurant-error.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/restaurant/restaurant-error.html",
    "<ion-view><ion-content><div class=padding><form name=newError ionic-validate-on-submit=sendError()><div class=list><label class=\"item item-input\"><textarea class=textarea-height-base name=\"error description\" ng-model=error.content ng-required=true placeholder=\"{{ 'restaurant.report_error.description' | translate }}\"></textarea></label></div><button translate class=\"button button-block button-positive button-width-base bg-gray\" type=submit>restaurant.report_error.send</button></form><div debug-json=error></div></div></ion-content></ion-view>");
}]);

angular.module("js/states/restaurant/restaurant-search-web.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/restaurant/restaurant-search-web.html",
    "<ion-view><ion-content><ion-list class=standard-list><ion-item class=standard-item ng-click=ctrl.changeGeoname()><span>{{ctrl.geoname.asciiName}}</span> <span class=tastd-item-title>({{'button.city.change' | translate}})</span></ion-item></ion-list><div class=standard-search-box><label class=\"item item-input search-box\"><input type=search placeholder=\"{{ 'restaurant.restaurant_name' | translate }}\" ng-change=ctrl.search() ng-model=ctrl.searchCriteria.name autocomplete=off autocorrect=off autocapitalize=off spellcheck> <i class=\"icon ion-search placeholder-icon\"></i></label></div><div class=\"text-center padding color-oil\" ng-show=\"!ctrl.places.length && !ctrl.searchCriteria.name\"><span translate>restaurant.search.select_city_and_search</span></div><list-loader loading=ctrl.loading></list-loader><ion-list ng-if=\"ctrl.places.length === 0 && !ctrl.loading\"><ion-item class=\"bg-silver color-gray\"><span>{{ 'no.results' | translate }}</span></ion-item></ion-list><ion-list class=\"padless list-restaurants list\"><restaurant item=place page=restaurant_search ng-repeat=\"place in ctrl.places\" hide-quickadd=true show-fallback-picture=true from-web=true on-click=ctrl.addNew(place)></restaurant></ion-list><ion-list ng-if=!ctrl.loading><div ng-click=ctrl.addNew() class=\"item item-icon-right\"><span>{{ 'restaurant.search.not_in_list' | translate }}</span> <i class=\"icon icon-chevron-right\"></i></div></ion-list><div style=height:44px></div></ion-content></ion-view>");
}]);

angular.module("js/states/restaurant/restaurant-search.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/restaurant/restaurant-search.html",
    "<div style=\"z-index: 10\" class=\"restaurant-tabs tabs-striped position-relative tabs-only-icons tabs-top tabs-background-light tabs-color-positive\"><div class=\"tabs tabs-static no-border\"><a class=tab-item ng-click=ctrl.disableAroundMe() ng-class=\"{active: !ctrl.isAroundMe }\">{{ 'restaurant.top' | translate }}</a> <a class=tab-item ng-click=ctrl.activateAroundMe() ng-class=\"{active: ctrl.isAroundMe }\">{{ 'restaurant.around_you' | translate }}</a></div></div><ion-view><ion-content class=has-subheader-inside-view><ion-list class=standard-list ng-if=!ctrl.isAroundMe><ion-item class=standard-item ng-click=ctrl.changeGeoname()><span>{{ctrl.geoname.asciiName}}</span> <span class=tastd-item-title>({{'button.city.change' | translate}})</span></ion-item></ion-list><div class=standard-search-box><label class=\"item item-input search-box\"><input type=search placeholder=\"{{ 'restaurant.restaurant_name' | translate }}\" ng-change=ctrl.search() ng-model=ctrl.searchCriteria.name autocomplete=off autocorrect=off autocapitalize=off spellcheck> <i class=\"icon ion-search placeholder-icon\"></i></label></div><ion-list class=\"padless list-restaurants list\"><restaurant item=rest distance=ctrl.getDistance(rest) page=restaurant_search ng-repeat=\"rest in ctrl.restaurants track by rest.id\" show-address=true></restaurant></ion-list><ion-list ng-if=\"!ctrl.loading && ctrl.restaurants && !ctrl.restaurants.$metadata.hasNextPage\"><div ui-sref=restaurantSearchWeb({name:ctrl.searchCriteria.name}) class=\"item item-icon-right\"><span>{{ 'restaurant.search_on_the_web' | translate }}</span> <i class=\"icon icon-chevron-right\"></i></div></ion-list><list-loader loading=\"ctrl.loading || (ctrl.isAroundMe && ctrl.loadingCoordinates)\"></list-loader><ion-list ng-if=\"ctrl.restaurants.length === 0 && !ctrl.loading\"><ion-item class=\"bg-silver color-gray\"><span>{{ 'no.results' | translate }}</span></ion-item></ion-list><ion-infinite-scroll ng-if=ctrl.restaurants.$metadata.hasNextPage on-infinite=ctrl.loadMore() distance=1%></ion-infinite-scroll><div style=height:44px></div></ion-content></ion-view>");
}]);

angular.module("js/states/restaurant/restaurant-view.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/restaurant/restaurant-view.html",
    "<ion-view class=restaurant-view><div>{{ctrl.restaurant.name}}</div><ion-content><ion-list ng-if=ctrl.restaurant><ion-item class=no-padding><quickadd class=\"badge quickadd-center\" restaurant=ctrl.restaurant page=restaurant_detail extended-version=true></quickadd></ion-item><section><div class=list-section-title><h1>{{'restaurant.info' | translate }}</h1><a translate ui-sref=\"restaurantError({restaurantId: ctrl.restaurant.id})\" class=\"list-section-title-aside secondary-link\">restaurant.report_an_error</a></div><div class=restaurant-info-wrapper><ion-item ng-click=ctrl.goToGoogleMaps()><i class=\"icon icon-right-space icon-marker color-tastd-green\"></i> <span>{{::ctrl.getAddressWithCity() || \"No address\"}}</span> <i ng-if=::ctrl.restaurant.address class=\"icon icon-direction icon-right\"></i></ion-item><ion-item class=map ng-click=\"mapExpanded=!mapExpanded\" ng-class=\"{expanded : mapExpanded}\"><static-map size=1024x300 color={{ctrl.restaurant.cuisine.color}} lat={{ctrl.restaurant.lat}} lng={{ctrl.restaurant.lng}}></static-map></ion-item><ion-item ng-if=\"ctrl.restaurant.phone || ctrl.restaurant.website\" class=no-padding><div class=\"row ion-item-row\"><div class=col ng-if=ctrl.restaurant.phone><i class=\"icon icon-right-space icon-call color-tastd-green\"></i> <span>{{::ctrl.restaurant.phone}}</span></div><div class=col ng-if=ctrl.restaurant.website ng-click=ctrl.goToWebsite()><i class=\"icon icon-right-space icon-world color-tastd-green\"></i> <span>{{ ::ctrl.restaurant.website | cleanUrl }}</span></div></div></ion-item><ion-item class=no-padding><div class=\"row ion-item-row\"><div class=col ng-if=ctrl.restaurant.cuisine><i class=\"icon icon-right-space icon-cuisine color-tastd-green\"></i> <span>{{::ctrl.restaurant.cuisine.name }}</span></div><div class=col ng-if=ctrl.restaurant.averageCost><i class=\"icon icon-right-space icon-dollar color-tastd-green\"></i> <span ng-if=ctrl.restaurant.averageCost>{{ ctrl.getRangeLabel() }}</span></div></div></ion-item><ion-item ng-if=\"ctrl.restaurant.chef || ctrl.restaurant.instagram\" class=no-padding><div class=\"row ion-item-row\"><div class=col ng-if=ctrl.restaurant.chef><i class=\"icon icon-right-space icon-chef color-tastd-green\"></i> <span>{{ ::ctrl.restaurant.chef }}</span></div><div class=col ng-if=ctrl.restaurant.instagram><i class=\"icon icon-right-space icon-instagram color-tastd-green\"></i> <span>{{ ::ctrl.restaurant.instagram }}</span></div></div></ion-item><ion-item ng-if=ctrl.restaurant.awards><i class=\"icon icon-right-space icon-awards color-tastd-green\"></i> <span>{{:: ctrl.restaurant.awards }}</span></ion-item></div></section><section ng-if=ctrl.myReview><div class=list-section-title><h1>{{'restaurant.my_review' | translate }}</h1></div><div><review-tags-property review=ctrl.myReview visible field=\"ctrl.getField('best_for')\"></review-tags-property><ion-item class=review-visit-item><div class=\"row ion-item-row\"><div class=col ng-click=ctrl.editLastVisited()><div class=\"review-text-property last-visited\"><div class=title>{{ 'restaurant.review.last_visited' | translate }}</div><div class=date>{{ ctrl.myReview.lastVisited }}</div></div></div><div class=col><div class=\"review-text-property visit-count\"><div><div class=title>{{ 'restaurant.review.visit_count' | translate }}</div></div><div><div class=control ng-click=ctrl.decrementVisitCount()>-</div><div class=number>{{ ctrl.myReview.visitCount }}</div><div class=control ng-click=ctrl.incrementVisitCount()>+</div></div></div></div></div></ion-item><ion-item class=no-padding><gallery photos=ctrl.myReview.photos restaurant-id=ctrl.restaurant.id on-upload-photo=ctrl.onPhotoUpload on-delete-photo=ctrl.onPhotoDelete></gallery></ion-item><ion-item class=no-padding><div class=\"row ion-item-row\"><div class=col ng-click=ctrl.goToRanking()><div class=review-text-property><div class=title>{{ 'restaurant.review.my_opinion' | translate }}</div><div class=text><span ng-style=\"{color : '#' + ctrl.myReview.cuisine.color}\">{{ctrl.myReview.position}}{{ctrl.myReview.position | ordinal}} {{ 'restaurant.place' | translate }}</span></div></div></div><div ng-click=ctrl.changeCuisine() class=col><div class=review-text-property><div class=title>{{ 'restaurant.ranked_in' | translate }}</div><div class=text ng-style=\"{color : '#' + ctrl.myReview.cuisine.color}\">{{ctrl.myReview.cuisine.name}}</div></div></div></div></ion-item><ion-item class=\"review-text-property no-padding\" ng-click=ctrl.editPrice()><div class=title-wrapper><span class=title>{{'restaurant.review.cost_per_person' | translate }}</span></div><div class=text-wrapper><span class=text ng-if=!ctrl.getReviewCost()>N/A</span> <span class=text ng-if=ctrl.getReviewCost()>{{ ctrl.getReviewCost() }}{{ ctrl.restaurant.geoname.currencySymbol }}</span></div></ion-item><ion-item class=tag-friends-wrapper ng-click=ctrl.tagFriends()><div class=review-item-inner-wrapper><div class=review-item-label>{{ 'restaurant.review.tag_friends' | translate }}</div><div class=review-item-content><span ng-if=\"ctrl.myReview.taggedFriends.length === 0\">{{ 'restaurant.review.tag_friends_placeholder' | translate }}</span><ion-user-avatar ng-repeat=\"friend in ctrl.myReview.taggedFriends\" user=friend></ion-user-avatar></div></div></ion-item><review-text-property textarea=false review=ctrl.myReview field=\"ctrl.getField('must_have')\"></review-text-property><review-text-property textarea=false review=ctrl.myReview field=\"ctrl.getField('place')\"></review-text-property><review-text-property textarea=false review=ctrl.myReview field=\"ctrl.getField('dress_code')\"></review-text-property><review-text-property textarea=false review=ctrl.myReview field=\"ctrl.getField('discovered_on')\"></review-text-property><review-text-property textarea=true review=ctrl.myReview field=\"ctrl.getField('dishes')\"></review-text-property><review-text-property textarea=true review=ctrl.myReview field=\"ctrl.getField('comment')\"></review-text-property><review-tags-property review=ctrl.myReview field=\"ctrl.getField('drinks')\"></review-tags-property><review-tags-property review=ctrl.myReview field=\"ctrl.getField('location')\"></review-tags-property><review-tags-property review=ctrl.myReview field=\"ctrl.getField('vibe')\"></review-tags-property><review-tags-property review=ctrl.myReview field=\"ctrl.getField('entertainment')\"></review-tags-property><review-tags-property review=ctrl.myReview field=\"ctrl.getField('special_mention')\"></review-tags-property><review-tags-property review=ctrl.myReview field=\"ctrl.getField('other_tags')\"></review-tags-property><ion-item class=add-extra-field-button ng-click=ctrl.addReviewExtraFields()><div><span class=\"vertical-align-middle plus\">+</span> <span class=vertical-align-middle>{{ 'restaurant.review.add_field' | translate }}</span></div></ion-item></div></section><section ng-if=\"ctrl.myLeadersReviews.length > 0\"><div class=list-section-title><h1>{{'restaurant.gurus_who_like_this' | translate }}</h1></div><div><ion-item ng-click=ctrl.goToReviews() class=guru-images><img ng-repeat=\"review in ctrl.myLeadersReviews | limitTo:6\" class=user-avatar ng-src=\"{{ review.user.avatar }}\"> <img ng-if=\"ctrl.myLeadersReviews.length == 7\" class=user-avatar ng-src=\"{{ ctrl.myLeadersReviews[6].user.avatar }}\"> <span ng-if=\"ctrl.myLeadersReviews.length > 7\" class=\"more-avatar user-avatar\"><i class=\"icon icon-three_points\"></span></ion-item></div></section><button has-roles=ROLE_EDITOR class=\"button button-positive button-block bg-gray\" ui-sref=\"restaurantEdit({restaurantId: ctrl.restaurant.id})\">{{'restaurant.edit_restaurant' | translate}}</button></ion-list><div style=\"height: 88px\"></div></ion-content></ion-view>");
}]);

angular.module("js/states/restaurant/review-edit/edit-price.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/restaurant/review-edit/edit-price.html",
    "<ion-modal-view><ion-header-bar class=\"bar bar-header bar-positive\"><div class=buttons><button class=button ng-click=cancel()>{{'button.cancel' | translate }}</button></div><h1 class=title>{{'restaurant.edit_price' | translate}}</h1><div class=buttons><button class=button ng-click=done()>{{'button.done' | translate }}</button></div></ion-header-bar><ion-content><div class=padding><div id=cost-box-input-label><span translate class=\"input-label-full font-size-base\">restaurant.review.cost_per_person</span><br><span translate class=\"font-size-small color-gray\">restaurant.review.whole_meal_including_tax</span></div><div class=space></div><rzslider rz-slider-floor=0 rz-slider-ceil=200 rz-slider-step=1 rz-slider-model=review.cost rz-slider-translate=translateSliderValue></rzslider></div></ion-content></ion-modal-view>");
}]);

angular.module("js/states/restaurant/reviews.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/restaurant/reviews.html",
    "<ion-view class=reviews-view><ion-content><list-loader loading=ctrl.loading></list-loader><span ng-repeat=\"review in ctrl.myFollowingReviews\" class=review-block><div class=padding><user-signature user=review.user hide-quick-follow=true class=no-item ng-click=\"ctrl.$state.go('user', {userId : review.user.id })\"></user-signature></div><dynlayout-gallery photos=review.photos user=review.user></dynlayout-gallery><div class=padding><span ng-style=\"{color : '#' + review.cuisine.color}\">{{::review.position}}{{::review.position | ordinal}} {{'restaurant.place_in' | translate}} {{::review.cuisine.name}}</span><tag-list tags=review.tags list-class=\"'tags'\"></tag-list><span class=comment>{{::review.comment}}</span></div></span><ion-infinite-scroll ng-if=ctrl.myFollowingReviews.$metadata.hasNextPage on-infinite=ctrl.loadMore() distance=1%></ion-infinite-scroll></ion-content></ion-view>");
}]);

angular.module("js/states/settings/account.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/settings/account.html",
    "<ion-view><ion-content><form name=ctrl.form><label class=\"item item-input\"><input name=\"first name\" ng-model=ctrl.user.firstName ng-required=true placeholder=\"{{ 'user.first_name' | translate }}\"></label><label class=\"item item-input\"><input name=\"last name\" ng-model=ctrl.user.lastName ng-required=true placeholder=\"{{ 'user.last_name' | translate }}\"></label><label class=\"item item-input\"><input name=email ng-model=ctrl.user.email ng-required=true placeholder=\"{{ 'user.email' | translate }}\"></label></form><div class=\"padding text-right\"><a translate class=secondary-link ng-click=ctrl.delete()>{{'settings.delete_account' | translate}}</a></div></ion-content></ion-view>");
}]);

angular.module("js/states/settings/feedback.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/settings/feedback.html",
    "<ion-view><ion-content><div class=padding><form name=newFeedback ionic-validate-on-submit=sendFeedback()><div class=list><label class=\"item item-input\"><input name=title ng-model=feedback.title ng-required=true placeholder=\"{{'settings.feedback.message_title' | translate }}\"></label><label class=\"item item-input\"><textarea class=textarea-height-base name=feedback ng-model=feedback.content ng-required=true placeholder=\"{{'settings.feedback.message_content' | translate }}\">\n" +
    "                          </textarea></label></div><button class=\"button button-block button-positive button-width-base bg-gray\" type=submit>{{'button.send' | translate }}</button></form></div></ion-content></ion-view>");
}]);

angular.module("js/states/settings/language.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/settings/language.html",
    "<ion-view class=language-settings-view><ion-content><div class=color-oil><label class=\"item item-input item-select\"><select ng-model=ctrl.language ng-change=ctrl.save() class=\"ltr full-width\" ng-options=\"option.label for option in ctrl.languages track by option.id\"></select></label></div></ion-content></ion-view>");
}]);

angular.module("js/states/settings/log.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/settings/log.html",
    "<ion-view><ion-content><label><textarea style=\"width: 100%; height: 1000px; font-family: monospace; font-size: 8px\" ng-model=ctrl.logData name=logData>\n" +
    "        </textarea></label></ion-content></ion-view>");
}]);

angular.module("js/states/settings/notifications.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/settings/notifications.html",
    "<ion-view><ion-content><div class=color-oil><ion-toggle ng-model=ctrl.notifications.recap ng-checked=ctrl.notifications.recap ng-change=ctrl.save()>{{ 'settings.notifications.weekly_email_update' | translate }}</ion-toggle></div></ion-content></ion-view>");
}]);

angular.module("js/states/settings/password.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/settings/password.html",
    "<ion-view><ion-content><form name=ctrl.form ionic-validate-on-submit=ctrl.change()><div class=list><label class=\"item item-input\"><input type=password name=password ng-model=password.old ng-required=true placeholder=\"{{'settings.password.old_password' | translate }}\"></label><label class=\"item item-input\"><input type=password name=\"new password\" ng-model=password.new ng-required=true placeholder=\"{{'settings.password.new_password' | translate }}\"></label><label class=\"item item-input\"><input type=password name=\"password confirmation\" ng-model=password.newConfirm ng-required=true placeholder=\"{{'settings.password.retype_password' | translate }}\"></label></div></form></ion-content></ion-view>");
}]);

angular.module("js/states/settings/settings.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/settings/settings.html",
    "<ion-view><ion-content><div has-roles=ROLE_EDITOR><div class=settings-header><p translate>settings.menu.extra_editor</p></div><a ui-sref=settings.log ion-item nav-clear class=\"item item-icon-right\"><span translate class=color-oil>log</span> <i class=\"icon icon-chevron-right\"></i></a></div><div class=settings-header><p translate>settings.menu.account</p></div><div class=color-oil><a ui-sref=settings.account ion-item nav-clear class=\"item item-icon-right\"><span translate>settings.edit_account.page_title</span> <i class=\"icon icon-chevron-right\"></i></a> <a ui-sref=settings.password ion-item nav-clear class=\"item item-icon-right\"><span translate>settings.password.page_title</span> <i class=\"icon icon-chevron-right\"></i></a> <a ui-sref=settings.notifications ion-item nav-clear class=\"item item-icon-right\"><span translate>settings.notification.page_title</span> <i class=\"icon icon-chevron-right\"></i></a> <a ui-sref=settings.language ion-item nav-clear class=\"item item-icon-right\"><span translate>settings.language.page_title</span> <i class=\"icon icon-chevron-right\"></i></a></div><div class=settings-header><p translate>settings.menu.information_and_support</p></div><div class=color-oil><a ui-sref=settings.feedback ion-item nav-clear class=\"item item-icon-right\"><span translate>settings.feedback.page_title</span> <i class=\"icon icon-chevron-right\"></i></a> <a ng-click=ctrl.goToTerms() ion-item nav-clear class=\"item item-icon-right\"><span translate>settings.terms_and_conditions</span> <i class=\"icon icon-chevron-right\"></i></a> <a ng-click=ctrl.goToPrivacy() ion-item nav-clear class=\"item item-icon-right\"><span translate>settings.privacy_policy</span> <i class=\"icon icon-chevron-right\"></i></a></div><div class=small-settings-header></div><div class=color-oil><a href=itms-apps://itunes.apple.com/app/id982825377 ion-item nav-clear class=\"item item-icon-right\"><span translate>settings.rate_tastd</span> <i class=\"icon icon-chevron-right\"></i></a></div><div class=small-settings-header></div><div class=color-oil><a ng-click=ctrl.logout() ion-item nav-clear class=item><span translate>button.logout</span></a></div><div style=\"height: 128px\"></div></ion-content></ion-view>");
}]);

angular.module("js/states/signin/signin.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/signin/signin.html",
    "<ion-view view-title=\"{{ 'user.login.page_title' | translate }}\"><ion-nav-bar class=\"bar bar-positive\"><ion-nav-buttons side=left><a ui-sref=landing class=button translate>button.cancel</a></ion-nav-buttons><ion-nav-buttons side=right><a ng-click=ctrl.submit() class=button translate>button.done</a></ion-nav-buttons></ion-nav-bar><ion-content><div class=\"padding text-center\" ng-include=\"'js/services/security/signin/facebook-signin.html'\"></div><div class=\"padding-horizontal padding-bottom\"><div class=\"text-divider color-oil\" translate>or</div></div><div class=padding><form name=ctrl.emailSigninForm><div class=list><label class=\"item item-input\"><input name=email type=email placeholder=\"{{ 'user.email' | translate }}\" ng-model=ctrl.credential.email ng-required=true></label><label class=\"item item-input\"><input name=password type=password placeholder=\"{{Â 'user.password' | translate }}\" ng-model=ctrl.credential.password ng-required=true></label></div><div class=\"padding-bottom text-right\"><a translate class=secondary-link ng-click=ctrl.goForgot()>user.forgot_password</a></div></form></div></ion-content></ion-view>");
}]);

angular.module("js/states/signup/signup-fb.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/signup/signup-fb.html",
    "<ion-view view-title=\"{{ 'user.create_account.page_title' | translate }}\"><ion-nav-bar class=\"bar bar-positive\"><ion-nav-buttons side=left><a ui-sref=landing class=button translate>button.cancel</a></ion-nav-buttons><ion-nav-buttons side=right><a ng-click=ctrl.submit() class=button translate>button.done</a></ion-nav-buttons></ion-nav-bar><ion-content><div class=space-20></div><div class=padding-horizontal><form name=ctrl.emailSignupForm ionic-validate-on-submit=ctrl.signup() ionic-validate-on-submit-options=ctrl.validateOptions><div class=list><div class=\"row ion-item-row no-min-height\"><div class=\"col no-padding\"><label class=\"item item-input\"><input name=firstName autocomplete=off autocorrect=off autocapitalize=on spellcheck placeholder=\"{{Â 'user.first_name' | translate }}\" ng-model=ctrl.credential.firstName ng-required=true ng-minlength=2 ng-maxlength=24></label></div><div class=\"col no-padding\"><label class=\"item item-input\"><input name=lastName autocomplete=off autocorrect=off autocapitalize=on spellcheck placeholder=\"{{Â 'user.last_name' | translate }}\" ng-model=ctrl.credential.lastName ng-minlength=2 ng-maxlength=24 ng-required=true></label></div></div><div ng-class=\"{'color-oil': ctrl.credential.geoname.formattedName, 'color-gray': !ctrl.credential.geoname.formattedName}\" class=\"item item-input\" ng-click=ctrl.changeGeoname()><div class=fake-input-text>{{Â ctrl.credential.geoname.formattedName || 'user.where_do_you_live' | translate}}</div></div><label class=\"item item-input border-width-1\"><input type=email name=email placeholder=\"{{Â 'user.email' | translate }}\" ng-model=ctrl.credential.email ng-required=true></label></div></form></div></ion-content></ion-view>");
}]);

angular.module("js/states/signup/signup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/signup/signup.html",
    "<ion-view view-title=\"{{ 'user.create_account.page_title' | translate }}\"><ion-nav-bar class=\"bar bar-positive\"><ion-nav-buttons side=left><a ui-sref=landing class=button translate>button.cancel</a></ion-nav-buttons><ion-nav-buttons side=right><a ng-click=ctrl.submit() class=button translate>button.done</a></ion-nav-buttons></ion-nav-bar><ion-content><div class=space-20></div><div class=padding-horizontal><form name=ctrl.emailSignupForm ionic-validate-on-submit=ctrl.signup() ionic-validate-on-submit-options=ctrl.validateOptions><div class=list><div class=\"row ion-item-row no-min-height\"><div class=\"col no-padding\"><label class=\"item item-input\"><input name=firstName autocomplete=off autocorrect=off autocapitalize=on spellcheck placeholder=\"{{Â 'user.first_name' | translate }}\" ng-model=ctrl.credential.firstName ng-required=true ng-minlength=2 ng-maxlength=24></label></div><div class=\"col no-padding\"><label class=\"item item-input\"><input name=lastName autocomplete=off autocorrect=off autocapitalize=on spellcheck placeholder=\"{{Â 'user.last_name' | translate }}\" ng-model=ctrl.credential.lastName ng-minlength=2 ng-maxlength=24 ng-required=true></label></div></div><div ng-class=\"{'color-oil': ctrl.credential.geoname.formattedName, 'color-gray': !ctrl.credential.geoname.formattedName}\" class=\"item item-input\" ng-click=ctrl.changeGeoname()><div class=fake-input-text>{{Â ctrl.credential.geoname.formattedName || 'user.where_do_you_live' | translate}}</div></div><label class=\"item item-input border-width-1\"><input type=email name=email placeholder=\"{{Â 'user.email' | translate }}\" ng-model=ctrl.credential.email ng-required=true></label><label class=\"item item-input border-width-1\"><input type=password name=password placeholder=\"{{Â 'user.password' | translate }}\" ng-model=ctrl.credential.password ng-minlength=6 ng-required=true></label><label class=\"item item-input border-width-1\"><input type=password name=confirmPassword placeholder=\"{{Â 'user.confirm_password' | translate }}\" ng-model=ctrl.credential.confirmPassword ui-validate=\"{ confirmPassword : '$value==ctrl.credential.password' }\" ui-validate-watch=\"'ctrl.credential.password'\" ng-required=true></label></div></form></div></ion-content></ion-view>");
}]);

angular.module("js/states/user/user-edit.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/user/user-edit.html",
    "<ion-view class=user-edit><ion-content><div class=\"padding text-center userEditAvatar\"><ion-user-avatar user=ctrl.user></ion-user-avatar><button type=button class=\"button icon ion-camera\" ng-click=ctrl.uploadPhoto()></button></div><form id=editProfileForm name=ctrl.editProfileForm ionic-validate-on-submit=ctrl.update(ctrl.user) ionic-validate-on-submit-options=ctrl.validateOptions><div class=padding><div class=list><label class=\"item item-input\"><input name=firstName autocomplete=off autocorrect=off autocapitalize=on spellcheck placeholder=\"{{ 'user.first_name' | translate }}*\" ng-model=ctrl.user.firstName ng-minlength=2 ng-required=true></label><label class=\"item item-input\"><input name=lastName autocomplete=off autocorrect=off autocapitalize=on spellcheck placeholder=\"{{ 'user.last_name' | translate }}*\" ng-model=ctrl.user.lastName ng-minlength=2 ng-required=true></label><div class=\"item item-input\" ng-click=ctrl.changeGeoname()><div class=fake-input-text>{{Â ctrl.user.geoname.formattedName || 'user.choose_a_city'|translate}}</div></div><label class=\"item item-input item-select\"><select name=birthYear class=\"ltr full-width\" ng-class=\"{placeholder: !ctrl.user.birthYear }\" ng-options=\"year for year in ctrl.years\" ng-model=ctrl.user.birthYear><option value=\"\">{{ 'user.birth_year' | translate }}</option></select></label><label class=\"item item-input\"><input maxlength=30 name=headline placeholder=\"{{ 'user.how_i_define_myself' | translate }}\" ng-minlength=5 ng-model=ctrl.user.headline></label><input ng-show=false ng-model=Â ctrl.user.geoname name=city ng-required=true><label class=\"item item-input\"><textarea name=about placeholder=\"{{ 'user.about_me' | translate }}\" ng-minlength=1 class=textarea-height-base ng-model=ctrl.user.about></textarea></label></div></div></form><div class=padding debug-json=ctrl.user></div></ion-content></ion-view>");
}]);

angular.module("js/states/user/user-follow-list.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/user/user-follow-list.html",
    "<ion-view><ion-content><div class=padding><label class=\"item item-input search-box\"><input autocomplete=off autocorrect=off autocapitalize=off spellcheck ng-model=ctrl.query.name ng-change=ctrl.search() ng-model-options=\"{ debounce: 800 }\"> <i class=\"icon ion-search placeholder-icon\"></i></label></div><list-loader loading=ctrl.loading></list-loader><ion-list class=\"padless new-list list-users\"><ion-item ng-if=\"ctrl.users.length === 0 && !ctrl.loading\">{{ctrl.noUsersMessage | translate}}</ion-item><user-signature class=item-icon-right ng-repeat=\"user in ctrl.users track by user.id\" ng-click=\"ctrl.$state.go('user', {userId : user.id })\" user=user></user-signature></ion-list><div style=\"height: 88px\"></div><ion-infinite-scroll ng-if=ctrl.users.$metadata.hasNextPage on-infinite=ctrl.loadMore() distance=1%></ion-infinite-scroll></ion-content></ion-view>");
}]);

angular.module("js/states/user/user-password-confirm.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/user/user-password-confirm.html",
    "<ion-view><ion-content><form name=resetPassword ionic-validate-on-submit=ctrl.confirm()><div class=list><label class=\"item item-input\"><input type=password name=password ng-model=password.new ng-required=true placeholder=password></label><label class=\"item item-input\"><input type=password name=\"retype password\" ng-model=password.retype ng-required=true placeholder=\"retype password\"></label></div><button class=\"button button-block button-positive bg-gray\" type=submit>Confirm Password</button></form><div debug-json=password></div></ion-content></ion-view>");
}]);

angular.module("js/states/user/user-password-reset.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/user/user-password-reset.html",
    "<ion-view><ion-content><form name=resetPassword ionic-validate-on-submit=ctrl.reset()><div class=list><label class=\"item item-input\"><input type=email name=email ng-model=reset.email ng-required=true placeholder=email></label></div><button class=\"button button-block button-positive bg-gray\" type=submit>Reset Password</button></form><div debug-json=reset></div></ion-content></ion-view>");
}]);

angular.module("js/states/user/user-search.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/user/user-search.html",
    "<div style=\"z-index: 10\" class=\"tabs-striped position-relative tabs-only-icons tabs-top tabs-background-light tabs-color-positive\"><div class=\"tabs tabs-static no-border\"><a class=tab-item ng-click=ctrl.search() ng-class=\"{active: ctrl.isTastdSearch }\"><i class=\"icon icon-crown\"></i></a> <a class=tab-item ng-click=ctrl.searchFriends() ng-class=\"{active: ctrl.isFacebookSearch }\"><i class=\"icon icon-facebook\"></i></a> <a class=tab-item ng-click=ctrl.searchContacts() ng-class=\"{active: ctrl.isContactsSearch }\"><i class=\"icon icon-contacts\"></i></a></div></div><ion-view class=user-search-view><ion-content class=\"has-subheader-inside-view has-double-footer\"><ion-list ng-if=ctrl.isTastdSearch style=\"z-index: 9\" class=\"standard-list position-relative\"><ion-item class=\"standard-item no-border\" ng-click=ctrl.changeGeoname()><span>{{ctrl.searchCriteria.geoname.formattedName || ('button.all_cities' | translate) }}</span> <span class=tastd-item-title>({{'button.city.change' | translate}})</span></ion-item></ion-list><div ng-if=ctrl.isTastdSearch class=standard-search-box><label class=\"item item-input search-box\"><input type=search autocomplete=off autocorrect=off autocapitalize=off spellcheck placeholder=\"{{ 'user.type_guru_name' | translate }}\" ng-model=ctrl.searchCriteria.query ng-change=ctrl.search()> <i class=\"icon ion-search placeholder-icon\"></i></label></div><ion-list class=\"padless new-list list-users\"><list-loader loading=\"ctrl.loading && !ctrl.isContactsSearch\"></list-loader><progress-bar ng-if=\"ctrl.loading && ctrl.isContactsSearch\" progress=ctrl.getProgress()></progress-bar><ion-item ng-if=\"ctrl.users.length === 0 && !ctrl.loading\" translate=no.results></ion-item><user-signature class=bottom-border ng-class=\"{'item-selected': isSelectAll.b, 'medal': ctrl.isPodium(user)}\" light-theme=isSelectAll.b ng-repeat=\"user in ctrl.users\" ng-click=\"ctrl.$state.go('user', {userId : user.id })\" user=user current-geoname=ctrl.searchCriteria.geoname></user-signature></ion-list><ion-infinite-scroll ng-if=ctrl.users.$metadata.hasNextPage on-infinite=ctrl.loadMore() distance=1%></ion-infinite-scroll></ion-content><button ng-click=ctrl.publishOnFb() class=\"button standard-bottom-button with-bar-below\">{{ 'button.invite' | translate }}</button></ion-view>");
}]);

angular.module("js/states/user/user.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/user/user.html",
    "<ion-view><ion-content class=\"content-bg user-view\"><ion-refresher pulling-text=\"Pull to refresh...\" on-refresh=ctrl.doRefresh()></ion-refresher><div class=top-profile-wrapper><ion-user-avatar user=ctrl.user></ion-user-avatar><div class=\"profile-row tastd-green\"><div class=profile-row-inner><ion-user-score class=profile-item user=ctrl.user></ion-user-score><div ui-sref=inviteHome ng-if=ctrl.isMe class=\"rounded-button profile-item\">{{ 'user.become_a_top_guru' | translate }}</div><user-follow-button ng-if=!ctrl.isMe class=profile-item user=ctrl.user ng-click=ctrl.toggleFollow()></user-follow-button></div></div><div class=profile-row><a ng-if=ctrl.user ui-sref=\"userFollowing({ userId : ctrl.user.id })\" class=user-info-bar-item><span class=number ng-bind=ctrl.user.leadersCount>0</span> <span class=label translate=user.gurus></span></a> <a ng-if=ctrl.user ui-sref=\"userFollowers({ userId : ctrl.user.id })\" class=user-info-bar-item><span class=number ng-bind=ctrl.user.followersCount>0</span> <span class=label translate=followers></span></a></div></div><div ng-if=\"ctrl.user.headline || ctrl.user.about\" class=silver-line></div><div ng-if=\"ctrl.user.headline || ctrl.user.about\" class=description-wrapper><h2 ng-if=ctrl.user.headline>{{ctrl.user.headline}}</h2><div ng-if=\"ctrl.user.headline && ctrl.user.about\" class=about-space></div><p ng-if=ctrl.user.about>{{ctrl.user.about}}</p></div><div class=\"tabs tabs-static tabs-striped position-static tabs-light tabs-color-positive\"><a class=tab-item ng-class=\"{ active: !ctrl.showWall }\" ng-click=\"ctrl.showWall= false\">{{ 'button.lists' | translate }}</a> <a class=tab-item ng-class=\"{ active: ctrl.showWall }\" ng-click=\"ctrl.showWall= true\">{{ 'button.feed' | translate }}</a></div><div ng-if=!ctrl.showWall><list-loader loading=ctrl.expertiseLoading></list-loader><div ng-if=\"!ctrl.expertiseLoading && !ctrl.expertise.length && ctrl.isMe\" class=\"padding text-center color-oil\"><p translate>ranking.you_no_restaurants</p><button translate class=\"button button-positive button-width-base bg-gray\" ui-sref=restaurantSearch>ranking.review_first_restaurant</button></div><div ng-if=\"!ctrl.expertiseLoading && !ctrl.expertise.length && !ctrl.isMe\" class=\"padding text-center color-oil\"><p translate>ranking.user_no_restaurants</p></div><ion-list><ion-item class=\"item item-not-complex\" ng-click=ctrl.goToCity(city) ng-repeat=\"city in ctrl.expertise\">{{ city.nameÂ }} <span class=item-note>{{city.count}}</span></ion-item></ion-list></div><div ng-if=ctrl.showWall><wall reviews=ctrl.reviews page=user_news me=ctrl.me hide-signature=true></wall></div></ion-content></ion-view>");
}]);

angular.module("js/states/wall/wall.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("js/states/wall/wall.html",
    "<ion-view><ion-content><ion-refresher pulling-text=\"Pull to refresh...\" on-refresh=ctrl.doRefresh()></ion-refresher><list-loader loading=ctrl.loading></list-loader><div class=wall-no-results ng-if=\"!ctrl.loading && ctrl.reviews.length === 0\"><p>{{ 'wall.no_results' | translate }}</p><button ui-sref=userSearch class=\"button button-block bg-gray\">{{ 'wall.no_results_button' | translate }}</button></div><button has-roles=ROLE_EDITOR ui-sref=onBoardingIntro class=\"button button-positive button-block bg-gray\">On Boarding</button><wall reviews=ctrl.reviews page=wall me=ctrl.me></wall></ion-content></ion-view>");
}]);
